#[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
pub mod types {
    #[used]
    #[doc(hidden)]
    static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
    use super::super::super::super::_rt;
    pub type Bytes = _rt::Vec<u8>;
    pub struct Address {
        pub city: Option<_rt::String>,
        pub country: Option<_rt::String>,
        pub line1: Option<_rt::String>,
        pub line2: Option<_rt::String>,
        pub postal_code: Option<_rt::String>,
        pub state: Option<_rt::String>,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for Address {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "city" => _serde::__private::Ok(__Field::__field0),
                            "country" => _serde::__private::Ok(__Field::__field1),
                            "line1" => _serde::__private::Ok(__Field::__field2),
                            "line2" => _serde::__private::Ok(__Field::__field3),
                            "postal_code" => _serde::__private::Ok(__Field::__field4),
                            "state" => _serde::__private::Ok(__Field::__field5),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"city" => _serde::__private::Ok(__Field::__field0),
                            b"country" => _serde::__private::Ok(__Field::__field1),
                            b"line1" => _serde::__private::Ok(__Field::__field2),
                            b"line2" => _serde::__private::Ok(__Field::__field3),
                            b"postal_code" => _serde::__private::Ok(__Field::__field4),
                            b"state" => _serde::__private::Ok(__Field::__field5),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<Address>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = Address;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct Address",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct Address with 6 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct Address with 6 elements",
                                    ),
                                );
                            }
                        };
                        let __field2 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        2usize,
                                        &"struct Address with 6 elements",
                                    ),
                                );
                            }
                        };
                        let __field3 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        3usize,
                                        &"struct Address with 6 elements",
                                    ),
                                );
                            }
                        };
                        let __field4 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        4usize,
                                        &"struct Address with 6 elements",
                                    ),
                                );
                            }
                        };
                        let __field5 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        5usize,
                                        &"struct Address with 6 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(Address {
                            city: __field0,
                            country: __field1,
                            line1: __field2,
                            line2: __field3,
                            postal_code: __field4,
                            state: __field5,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field2: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field3: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field4: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field5: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                            __Field,
                        >(&mut __map)? {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("city"),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "country",
                                            ),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("line1"),
                                        );
                                    }
                                    __field2 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field3 => {
                                    if _serde::__private::Option::is_some(&__field3) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("line2"),
                                        );
                                    }
                                    __field3 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field4 => {
                                    if _serde::__private::Option::is_some(&__field4) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "postal_code",
                                            ),
                                        );
                                    }
                                    __field4 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field5 => {
                                    if _serde::__private::Option::is_some(&__field5) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("state"),
                                        );
                                    }
                                    __field5 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                _ => {
                                    let _ = _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map)?;
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("city")?
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("country")?
                            }
                        };
                        let __field2 = match __field2 {
                            _serde::__private::Some(__field2) => __field2,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("line1")?
                            }
                        };
                        let __field3 = match __field3 {
                            _serde::__private::Some(__field3) => __field3,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("line2")?
                            }
                        };
                        let __field4 = match __field4 {
                            _serde::__private::Some(__field4) => __field4,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("postal_code")?
                            }
                        };
                        let __field5 = match __field5 {
                            _serde::__private::Some(__field5) => __field5,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("state")?
                            }
                        };
                        _serde::__private::Ok(Address {
                            city: __field0,
                            country: __field1,
                            line1: __field2,
                            line2: __field3,
                            postal_code: __field4,
                            state: __field5,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &[
                    "city",
                    "country",
                    "line1",
                    "line2",
                    "postal_code",
                    "state",
                ];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "Address",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<Address>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for Address {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = _serde::Serializer::serialize_struct(
                    __serializer,
                    "Address",
                    false as usize + 1 + 1 + 1 + 1 + 1 + 1,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "city",
                    &self.city,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "country",
                    &self.country,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "line1",
                    &self.line1,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "line2",
                    &self.line2,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "postal_code",
                    &self.postal_code,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "state",
                    &self.state,
                )?;
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for Address {
        #[inline]
        fn clone(&self) -> Address {
            Address {
                city: ::core::clone::Clone::clone(&self.city),
                country: ::core::clone::Clone::clone(&self.country),
                line1: ::core::clone::Clone::clone(&self.line1),
                line2: ::core::clone::Clone::clone(&self.line2),
                postal_code: ::core::clone::Clone::clone(&self.postal_code),
                state: ::core::clone::Clone::clone(&self.state),
            }
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for Address {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for Address {
        #[inline]
        fn eq(&self, other: &Address) -> bool {
            self.city == other.city && self.country == other.country
                && self.line1 == other.line1 && self.line2 == other.line2
                && self.postal_code == other.postal_code && self.state == other.state
        }
    }
    impl ::core::fmt::Debug for Address {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("Address")
                .field("city", &self.city)
                .field("country", &self.country)
                .field("line1", &self.line1)
                .field("line2", &self.line2)
                .field("postal-code", &self.postal_code)
                .field("state", &self.state)
                .finish()
        }
    }
    pub enum ChargeEventType {
        ChargeCaptured,
        ChargeDisputeClosed,
        ChargeDisputeCreated,
        ChargeDisputeFundsReinstated,
        ChargeDisputeFundsWithdrawn,
        ChargeDisputeUpdated,
        ChargeExpired,
        ChargeFailed,
        ChargePending,
        ChargeRefundUpdated,
        ChargeRefunded,
        ChargeSucceeded,
        ChargeUpdated,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for ChargeEventType {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                    __field7,
                    __field8,
                    __field9,
                    __field10,
                    __field11,
                    __field12,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            6u64 => _serde::__private::Ok(__Field::__field6),
                            7u64 => _serde::__private::Ok(__Field::__field7),
                            8u64 => _serde::__private::Ok(__Field::__field8),
                            9u64 => _serde::__private::Ok(__Field::__field9),
                            10u64 => _serde::__private::Ok(__Field::__field10),
                            11u64 => _serde::__private::Ok(__Field::__field11),
                            12u64 => _serde::__private::Ok(__Field::__field12),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 13",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "ChargeCaptured" => _serde::__private::Ok(__Field::__field0),
                            "ChargeDisputeClosed" => {
                                _serde::__private::Ok(__Field::__field1)
                            }
                            "ChargeDisputeCreated" => {
                                _serde::__private::Ok(__Field::__field2)
                            }
                            "ChargeDisputeFundsReinstated" => {
                                _serde::__private::Ok(__Field::__field3)
                            }
                            "ChargeDisputeFundsWithdrawn" => {
                                _serde::__private::Ok(__Field::__field4)
                            }
                            "ChargeDisputeUpdated" => {
                                _serde::__private::Ok(__Field::__field5)
                            }
                            "ChargeExpired" => _serde::__private::Ok(__Field::__field6),
                            "ChargeFailed" => _serde::__private::Ok(__Field::__field7),
                            "ChargePending" => _serde::__private::Ok(__Field::__field8),
                            "ChargeRefundUpdated" => {
                                _serde::__private::Ok(__Field::__field9)
                            }
                            "ChargeRefunded" => _serde::__private::Ok(__Field::__field10),
                            "ChargeSucceeded" => {
                                _serde::__private::Ok(__Field::__field11)
                            }
                            "ChargeUpdated" => _serde::__private::Ok(__Field::__field12),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"ChargeCaptured" => _serde::__private::Ok(__Field::__field0),
                            b"ChargeDisputeClosed" => {
                                _serde::__private::Ok(__Field::__field1)
                            }
                            b"ChargeDisputeCreated" => {
                                _serde::__private::Ok(__Field::__field2)
                            }
                            b"ChargeDisputeFundsReinstated" => {
                                _serde::__private::Ok(__Field::__field3)
                            }
                            b"ChargeDisputeFundsWithdrawn" => {
                                _serde::__private::Ok(__Field::__field4)
                            }
                            b"ChargeDisputeUpdated" => {
                                _serde::__private::Ok(__Field::__field5)
                            }
                            b"ChargeExpired" => _serde::__private::Ok(__Field::__field6),
                            b"ChargeFailed" => _serde::__private::Ok(__Field::__field7),
                            b"ChargePending" => _serde::__private::Ok(__Field::__field8),
                            b"ChargeRefundUpdated" => {
                                _serde::__private::Ok(__Field::__field9)
                            }
                            b"ChargeRefunded" => {
                                _serde::__private::Ok(__Field::__field10)
                            }
                            b"ChargeSucceeded" => {
                                _serde::__private::Ok(__Field::__field11)
                            }
                            b"ChargeUpdated" => _serde::__private::Ok(__Field::__field12),
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<ChargeEventType>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = ChargeEventType;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum ChargeEventType",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(ChargeEventType::ChargeCaptured)
                            }
                            (__Field::__field1, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(ChargeEventType::ChargeDisputeClosed)
                            }
                            (__Field::__field2, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(ChargeEventType::ChargeDisputeCreated)
                            }
                            (__Field::__field3, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    ChargeEventType::ChargeDisputeFundsReinstated,
                                )
                            }
                            (__Field::__field4, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    ChargeEventType::ChargeDisputeFundsWithdrawn,
                                )
                            }
                            (__Field::__field5, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(ChargeEventType::ChargeDisputeUpdated)
                            }
                            (__Field::__field6, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(ChargeEventType::ChargeExpired)
                            }
                            (__Field::__field7, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(ChargeEventType::ChargeFailed)
                            }
                            (__Field::__field8, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(ChargeEventType::ChargePending)
                            }
                            (__Field::__field9, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(ChargeEventType::ChargeRefundUpdated)
                            }
                            (__Field::__field10, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(ChargeEventType::ChargeRefunded)
                            }
                            (__Field::__field11, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(ChargeEventType::ChargeSucceeded)
                            }
                            (__Field::__field12, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(ChargeEventType::ChargeUpdated)
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &[
                    "ChargeCaptured",
                    "ChargeDisputeClosed",
                    "ChargeDisputeCreated",
                    "ChargeDisputeFundsReinstated",
                    "ChargeDisputeFundsWithdrawn",
                    "ChargeDisputeUpdated",
                    "ChargeExpired",
                    "ChargeFailed",
                    "ChargePending",
                    "ChargeRefundUpdated",
                    "ChargeRefunded",
                    "ChargeSucceeded",
                    "ChargeUpdated",
                ];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "ChargeEventType",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<ChargeEventType>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for ChargeEventType {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    ChargeEventType::ChargeCaptured => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "ChargeEventType",
                            0u32,
                            "ChargeCaptured",
                        )
                    }
                    ChargeEventType::ChargeDisputeClosed => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "ChargeEventType",
                            1u32,
                            "ChargeDisputeClosed",
                        )
                    }
                    ChargeEventType::ChargeDisputeCreated => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "ChargeEventType",
                            2u32,
                            "ChargeDisputeCreated",
                        )
                    }
                    ChargeEventType::ChargeDisputeFundsReinstated => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "ChargeEventType",
                            3u32,
                            "ChargeDisputeFundsReinstated",
                        )
                    }
                    ChargeEventType::ChargeDisputeFundsWithdrawn => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "ChargeEventType",
                            4u32,
                            "ChargeDisputeFundsWithdrawn",
                        )
                    }
                    ChargeEventType::ChargeDisputeUpdated => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "ChargeEventType",
                            5u32,
                            "ChargeDisputeUpdated",
                        )
                    }
                    ChargeEventType::ChargeExpired => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "ChargeEventType",
                            6u32,
                            "ChargeExpired",
                        )
                    }
                    ChargeEventType::ChargeFailed => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "ChargeEventType",
                            7u32,
                            "ChargeFailed",
                        )
                    }
                    ChargeEventType::ChargePending => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "ChargeEventType",
                            8u32,
                            "ChargePending",
                        )
                    }
                    ChargeEventType::ChargeRefundUpdated => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "ChargeEventType",
                            9u32,
                            "ChargeRefundUpdated",
                        )
                    }
                    ChargeEventType::ChargeRefunded => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "ChargeEventType",
                            10u32,
                            "ChargeRefunded",
                        )
                    }
                    ChargeEventType::ChargeSucceeded => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "ChargeEventType",
                            11u32,
                            "ChargeSucceeded",
                        )
                    }
                    ChargeEventType::ChargeUpdated => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "ChargeEventType",
                            12u32,
                            "ChargeUpdated",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for ChargeEventType {
        #[inline]
        fn clone(&self) -> ChargeEventType {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for ChargeEventType {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for ChargeEventType {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for ChargeEventType {
        #[inline]
        fn eq(&self, other: &ChargeEventType) -> bool {
            let __self_discr = ::core::intrinsics::discriminant_value(self);
            let __arg1_discr = ::core::intrinsics::discriminant_value(other);
            __self_discr == __arg1_discr
        }
    }
    impl ::core::fmt::Debug for ChargeEventType {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                ChargeEventType::ChargeCaptured => {
                    f.debug_tuple("ChargeEventType::ChargeCaptured").finish()
                }
                ChargeEventType::ChargeDisputeClosed => {
                    f.debug_tuple("ChargeEventType::ChargeDisputeClosed").finish()
                }
                ChargeEventType::ChargeDisputeCreated => {
                    f.debug_tuple("ChargeEventType::ChargeDisputeCreated").finish()
                }
                ChargeEventType::ChargeDisputeFundsReinstated => {
                    f.debug_tuple("ChargeEventType::ChargeDisputeFundsReinstated")
                        .finish()
                }
                ChargeEventType::ChargeDisputeFundsWithdrawn => {
                    f.debug_tuple("ChargeEventType::ChargeDisputeFundsWithdrawn")
                        .finish()
                }
                ChargeEventType::ChargeDisputeUpdated => {
                    f.debug_tuple("ChargeEventType::ChargeDisputeUpdated").finish()
                }
                ChargeEventType::ChargeExpired => {
                    f.debug_tuple("ChargeEventType::ChargeExpired").finish()
                }
                ChargeEventType::ChargeFailed => {
                    f.debug_tuple("ChargeEventType::ChargeFailed").finish()
                }
                ChargeEventType::ChargePending => {
                    f.debug_tuple("ChargeEventType::ChargePending").finish()
                }
                ChargeEventType::ChargeRefundUpdated => {
                    f.debug_tuple("ChargeEventType::ChargeRefundUpdated").finish()
                }
                ChargeEventType::ChargeRefunded => {
                    f.debug_tuple("ChargeEventType::ChargeRefunded").finish()
                }
                ChargeEventType::ChargeSucceeded => {
                    f.debug_tuple("ChargeEventType::ChargeSucceeded").finish()
                }
                ChargeEventType::ChargeUpdated => {
                    f.debug_tuple("ChargeEventType::ChargeUpdated").finish()
                }
            }
        }
    }
    pub enum ChargeStatus {
        Failed,
        Pending,
        Succeeded,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for ChargeStatus {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 3",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "Failed" => _serde::__private::Ok(__Field::__field0),
                            "Pending" => _serde::__private::Ok(__Field::__field1),
                            "Succeeded" => _serde::__private::Ok(__Field::__field2),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"Failed" => _serde::__private::Ok(__Field::__field0),
                            b"Pending" => _serde::__private::Ok(__Field::__field1),
                            b"Succeeded" => _serde::__private::Ok(__Field::__field2),
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<ChargeStatus>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = ChargeStatus;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum ChargeStatus",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(ChargeStatus::Failed)
                            }
                            (__Field::__field1, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(ChargeStatus::Pending)
                            }
                            (__Field::__field2, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(ChargeStatus::Succeeded)
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &[
                    "Failed",
                    "Pending",
                    "Succeeded",
                ];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "ChargeStatus",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<ChargeStatus>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for ChargeStatus {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    ChargeStatus::Failed => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "ChargeStatus",
                            0u32,
                            "Failed",
                        )
                    }
                    ChargeStatus::Pending => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "ChargeStatus",
                            1u32,
                            "Pending",
                        )
                    }
                    ChargeStatus::Succeeded => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "ChargeStatus",
                            2u32,
                            "Succeeded",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for ChargeStatus {
        #[inline]
        fn clone(&self) -> ChargeStatus {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for ChargeStatus {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for ChargeStatus {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for ChargeStatus {
        #[inline]
        fn eq(&self, other: &ChargeStatus) -> bool {
            let __self_discr = ::core::intrinsics::discriminant_value(self);
            let __arg1_discr = ::core::intrinsics::discriminant_value(other);
            __self_discr == __arg1_discr
        }
    }
    impl ::core::fmt::Debug for ChargeStatus {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                ChargeStatus::Failed => f.debug_tuple("ChargeStatus::Failed").finish(),
                ChargeStatus::Pending => f.debug_tuple("ChargeStatus::Pending").finish(),
                ChargeStatus::Succeeded => {
                    f.debug_tuple("ChargeStatus::Succeeded").finish()
                }
            }
        }
    }
    pub struct Charge {
        pub amount: i32,
        pub amount_captured: i32,
        pub amount_refunded: i32,
        pub balance_transaction: Option<_rt::String>,
        pub calculated_statement_descriptor: Option<_rt::String>,
        pub captured: bool,
        pub created: i32,
        pub currency: _rt::String,
        pub customer: Option<_rt::String>,
        pub description: Option<_rt::String>,
        pub disputed: bool,
        pub event_type: ChargeEventType,
        pub failure_code: Option<_rt::String>,
        pub failure_message: Option<_rt::String>,
        pub id: _rt::String,
        pub invoice: Option<_rt::String>,
        pub paid: bool,
        pub receipt_url: Option<_rt::String>,
        pub refunded: bool,
        pub status: ChargeStatus,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for Charge {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                    __field7,
                    __field8,
                    __field9,
                    __field10,
                    __field11,
                    __field12,
                    __field13,
                    __field14,
                    __field15,
                    __field16,
                    __field17,
                    __field18,
                    __field19,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            6u64 => _serde::__private::Ok(__Field::__field6),
                            7u64 => _serde::__private::Ok(__Field::__field7),
                            8u64 => _serde::__private::Ok(__Field::__field8),
                            9u64 => _serde::__private::Ok(__Field::__field9),
                            10u64 => _serde::__private::Ok(__Field::__field10),
                            11u64 => _serde::__private::Ok(__Field::__field11),
                            12u64 => _serde::__private::Ok(__Field::__field12),
                            13u64 => _serde::__private::Ok(__Field::__field13),
                            14u64 => _serde::__private::Ok(__Field::__field14),
                            15u64 => _serde::__private::Ok(__Field::__field15),
                            16u64 => _serde::__private::Ok(__Field::__field16),
                            17u64 => _serde::__private::Ok(__Field::__field17),
                            18u64 => _serde::__private::Ok(__Field::__field18),
                            19u64 => _serde::__private::Ok(__Field::__field19),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "amount" => _serde::__private::Ok(__Field::__field0),
                            "amount_captured" => _serde::__private::Ok(__Field::__field1),
                            "amount_refunded" => _serde::__private::Ok(__Field::__field2),
                            "balance_transaction" => {
                                _serde::__private::Ok(__Field::__field3)
                            }
                            "calculated_statement_descriptor" => {
                                _serde::__private::Ok(__Field::__field4)
                            }
                            "captured" => _serde::__private::Ok(__Field::__field5),
                            "created" => _serde::__private::Ok(__Field::__field6),
                            "currency" => _serde::__private::Ok(__Field::__field7),
                            "customer" => _serde::__private::Ok(__Field::__field8),
                            "description" => _serde::__private::Ok(__Field::__field9),
                            "disputed" => _serde::__private::Ok(__Field::__field10),
                            "event_type" => _serde::__private::Ok(__Field::__field11),
                            "failure_code" => _serde::__private::Ok(__Field::__field12),
                            "failure_message" => {
                                _serde::__private::Ok(__Field::__field13)
                            }
                            "id" => _serde::__private::Ok(__Field::__field14),
                            "invoice" => _serde::__private::Ok(__Field::__field15),
                            "paid" => _serde::__private::Ok(__Field::__field16),
                            "receipt_url" => _serde::__private::Ok(__Field::__field17),
                            "refunded" => _serde::__private::Ok(__Field::__field18),
                            "status" => _serde::__private::Ok(__Field::__field19),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"amount" => _serde::__private::Ok(__Field::__field0),
                            b"amount_captured" => {
                                _serde::__private::Ok(__Field::__field1)
                            }
                            b"amount_refunded" => {
                                _serde::__private::Ok(__Field::__field2)
                            }
                            b"balance_transaction" => {
                                _serde::__private::Ok(__Field::__field3)
                            }
                            b"calculated_statement_descriptor" => {
                                _serde::__private::Ok(__Field::__field4)
                            }
                            b"captured" => _serde::__private::Ok(__Field::__field5),
                            b"created" => _serde::__private::Ok(__Field::__field6),
                            b"currency" => _serde::__private::Ok(__Field::__field7),
                            b"customer" => _serde::__private::Ok(__Field::__field8),
                            b"description" => _serde::__private::Ok(__Field::__field9),
                            b"disputed" => _serde::__private::Ok(__Field::__field10),
                            b"event_type" => _serde::__private::Ok(__Field::__field11),
                            b"failure_code" => _serde::__private::Ok(__Field::__field12),
                            b"failure_message" => {
                                _serde::__private::Ok(__Field::__field13)
                            }
                            b"id" => _serde::__private::Ok(__Field::__field14),
                            b"invoice" => _serde::__private::Ok(__Field::__field15),
                            b"paid" => _serde::__private::Ok(__Field::__field16),
                            b"receipt_url" => _serde::__private::Ok(__Field::__field17),
                            b"refunded" => _serde::__private::Ok(__Field::__field18),
                            b"status" => _serde::__private::Ok(__Field::__field19),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<Charge>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = Charge;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct Charge",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match _serde::de::SeqAccess::next_element::<
                            i32,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct Charge with 20 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match _serde::de::SeqAccess::next_element::<
                            i32,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct Charge with 20 elements",
                                    ),
                                );
                            }
                        };
                        let __field2 = match _serde::de::SeqAccess::next_element::<
                            i32,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        2usize,
                                        &"struct Charge with 20 elements",
                                    ),
                                );
                            }
                        };
                        let __field3 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        3usize,
                                        &"struct Charge with 20 elements",
                                    ),
                                );
                            }
                        };
                        let __field4 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        4usize,
                                        &"struct Charge with 20 elements",
                                    ),
                                );
                            }
                        };
                        let __field5 = match _serde::de::SeqAccess::next_element::<
                            bool,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        5usize,
                                        &"struct Charge with 20 elements",
                                    ),
                                );
                            }
                        };
                        let __field6 = match _serde::de::SeqAccess::next_element::<
                            i32,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        6usize,
                                        &"struct Charge with 20 elements",
                                    ),
                                );
                            }
                        };
                        let __field7 = match _serde::de::SeqAccess::next_element::<
                            _rt::String,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        7usize,
                                        &"struct Charge with 20 elements",
                                    ),
                                );
                            }
                        };
                        let __field8 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        8usize,
                                        &"struct Charge with 20 elements",
                                    ),
                                );
                            }
                        };
                        let __field9 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        9usize,
                                        &"struct Charge with 20 elements",
                                    ),
                                );
                            }
                        };
                        let __field10 = match _serde::de::SeqAccess::next_element::<
                            bool,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        10usize,
                                        &"struct Charge with 20 elements",
                                    ),
                                );
                            }
                        };
                        let __field11 = match _serde::de::SeqAccess::next_element::<
                            ChargeEventType,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        11usize,
                                        &"struct Charge with 20 elements",
                                    ),
                                );
                            }
                        };
                        let __field12 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        12usize,
                                        &"struct Charge with 20 elements",
                                    ),
                                );
                            }
                        };
                        let __field13 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        13usize,
                                        &"struct Charge with 20 elements",
                                    ),
                                );
                            }
                        };
                        let __field14 = match _serde::de::SeqAccess::next_element::<
                            _rt::String,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        14usize,
                                        &"struct Charge with 20 elements",
                                    ),
                                );
                            }
                        };
                        let __field15 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        15usize,
                                        &"struct Charge with 20 elements",
                                    ),
                                );
                            }
                        };
                        let __field16 = match _serde::de::SeqAccess::next_element::<
                            bool,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        16usize,
                                        &"struct Charge with 20 elements",
                                    ),
                                );
                            }
                        };
                        let __field17 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        17usize,
                                        &"struct Charge with 20 elements",
                                    ),
                                );
                            }
                        };
                        let __field18 = match _serde::de::SeqAccess::next_element::<
                            bool,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        18usize,
                                        &"struct Charge with 20 elements",
                                    ),
                                );
                            }
                        };
                        let __field19 = match _serde::de::SeqAccess::next_element::<
                            ChargeStatus,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        19usize,
                                        &"struct Charge with 20 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(Charge {
                            amount: __field0,
                            amount_captured: __field1,
                            amount_refunded: __field2,
                            balance_transaction: __field3,
                            calculated_statement_descriptor: __field4,
                            captured: __field5,
                            created: __field6,
                            currency: __field7,
                            customer: __field8,
                            description: __field9,
                            disputed: __field10,
                            event_type: __field11,
                            failure_code: __field12,
                            failure_message: __field13,
                            id: __field14,
                            invoice: __field15,
                            paid: __field16,
                            receipt_url: __field17,
                            refunded: __field18,
                            status: __field19,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<i32> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<i32> = _serde::__private::None;
                        let mut __field2: _serde::__private::Option<i32> = _serde::__private::None;
                        let mut __field3: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field4: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field5: _serde::__private::Option<bool> = _serde::__private::None;
                        let mut __field6: _serde::__private::Option<i32> = _serde::__private::None;
                        let mut __field7: _serde::__private::Option<_rt::String> = _serde::__private::None;
                        let mut __field8: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field9: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field10: _serde::__private::Option<bool> = _serde::__private::None;
                        let mut __field11: _serde::__private::Option<ChargeEventType> = _serde::__private::None;
                        let mut __field12: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field13: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field14: _serde::__private::Option<_rt::String> = _serde::__private::None;
                        let mut __field15: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field16: _serde::__private::Option<bool> = _serde::__private::None;
                        let mut __field17: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field18: _serde::__private::Option<bool> = _serde::__private::None;
                        let mut __field19: _serde::__private::Option<ChargeStatus> = _serde::__private::None;
                        while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                            __Field,
                        >(&mut __map)? {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("amount"),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "amount_captured",
                                            ),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                    );
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "amount_refunded",
                                            ),
                                        );
                                    }
                                    __field2 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                    );
                                }
                                __Field::__field3 => {
                                    if _serde::__private::Option::is_some(&__field3) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "balance_transaction",
                                            ),
                                        );
                                    }
                                    __field3 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field4 => {
                                    if _serde::__private::Option::is_some(&__field4) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "calculated_statement_descriptor",
                                            ),
                                        );
                                    }
                                    __field4 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field5 => {
                                    if _serde::__private::Option::is_some(&__field5) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "captured",
                                            ),
                                        );
                                    }
                                    __field5 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<bool>(&mut __map)?,
                                    );
                                }
                                __Field::__field6 => {
                                    if _serde::__private::Option::is_some(&__field6) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "created",
                                            ),
                                        );
                                    }
                                    __field6 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                    );
                                }
                                __Field::__field7 => {
                                    if _serde::__private::Option::is_some(&__field7) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "currency",
                                            ),
                                        );
                                    }
                                    __field7 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            _rt::String,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field8 => {
                                    if _serde::__private::Option::is_some(&__field8) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "customer",
                                            ),
                                        );
                                    }
                                    __field8 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field9 => {
                                    if _serde::__private::Option::is_some(&__field9) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "description",
                                            ),
                                        );
                                    }
                                    __field9 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field10 => {
                                    if _serde::__private::Option::is_some(&__field10) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "disputed",
                                            ),
                                        );
                                    }
                                    __field10 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<bool>(&mut __map)?,
                                    );
                                }
                                __Field::__field11 => {
                                    if _serde::__private::Option::is_some(&__field11) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "event_type",
                                            ),
                                        );
                                    }
                                    __field11 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            ChargeEventType,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field12 => {
                                    if _serde::__private::Option::is_some(&__field12) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "failure_code",
                                            ),
                                        );
                                    }
                                    __field12 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field13 => {
                                    if _serde::__private::Option::is_some(&__field13) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "failure_message",
                                            ),
                                        );
                                    }
                                    __field13 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field14 => {
                                    if _serde::__private::Option::is_some(&__field14) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                        );
                                    }
                                    __field14 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            _rt::String,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field15 => {
                                    if _serde::__private::Option::is_some(&__field15) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "invoice",
                                            ),
                                        );
                                    }
                                    __field15 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field16 => {
                                    if _serde::__private::Option::is_some(&__field16) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("paid"),
                                        );
                                    }
                                    __field16 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<bool>(&mut __map)?,
                                    );
                                }
                                __Field::__field17 => {
                                    if _serde::__private::Option::is_some(&__field17) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "receipt_url",
                                            ),
                                        );
                                    }
                                    __field17 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field18 => {
                                    if _serde::__private::Option::is_some(&__field18) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "refunded",
                                            ),
                                        );
                                    }
                                    __field18 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<bool>(&mut __map)?,
                                    );
                                }
                                __Field::__field19 => {
                                    if _serde::__private::Option::is_some(&__field19) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("status"),
                                        );
                                    }
                                    __field19 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            ChargeStatus,
                                        >(&mut __map)?,
                                    );
                                }
                                _ => {
                                    let _ = _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map)?;
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("amount")?
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("amount_captured")?
                            }
                        };
                        let __field2 = match __field2 {
                            _serde::__private::Some(__field2) => __field2,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("amount_refunded")?
                            }
                        };
                        let __field3 = match __field3 {
                            _serde::__private::Some(__field3) => __field3,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("balance_transaction")?
                            }
                        };
                        let __field4 = match __field4 {
                            _serde::__private::Some(__field4) => __field4,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field(
                                    "calculated_statement_descriptor",
                                )?
                            }
                        };
                        let __field5 = match __field5 {
                            _serde::__private::Some(__field5) => __field5,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("captured")?
                            }
                        };
                        let __field6 = match __field6 {
                            _serde::__private::Some(__field6) => __field6,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("created")?
                            }
                        };
                        let __field7 = match __field7 {
                            _serde::__private::Some(__field7) => __field7,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("currency")?
                            }
                        };
                        let __field8 = match __field8 {
                            _serde::__private::Some(__field8) => __field8,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("customer")?
                            }
                        };
                        let __field9 = match __field9 {
                            _serde::__private::Some(__field9) => __field9,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("description")?
                            }
                        };
                        let __field10 = match __field10 {
                            _serde::__private::Some(__field10) => __field10,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("disputed")?
                            }
                        };
                        let __field11 = match __field11 {
                            _serde::__private::Some(__field11) => __field11,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("event_type")?
                            }
                        };
                        let __field12 = match __field12 {
                            _serde::__private::Some(__field12) => __field12,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("failure_code")?
                            }
                        };
                        let __field13 = match __field13 {
                            _serde::__private::Some(__field13) => __field13,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("failure_message")?
                            }
                        };
                        let __field14 = match __field14 {
                            _serde::__private::Some(__field14) => __field14,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("id")?
                            }
                        };
                        let __field15 = match __field15 {
                            _serde::__private::Some(__field15) => __field15,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("invoice")?
                            }
                        };
                        let __field16 = match __field16 {
                            _serde::__private::Some(__field16) => __field16,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("paid")?
                            }
                        };
                        let __field17 = match __field17 {
                            _serde::__private::Some(__field17) => __field17,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("receipt_url")?
                            }
                        };
                        let __field18 = match __field18 {
                            _serde::__private::Some(__field18) => __field18,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("refunded")?
                            }
                        };
                        let __field19 = match __field19 {
                            _serde::__private::Some(__field19) => __field19,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("status")?
                            }
                        };
                        _serde::__private::Ok(Charge {
                            amount: __field0,
                            amount_captured: __field1,
                            amount_refunded: __field2,
                            balance_transaction: __field3,
                            calculated_statement_descriptor: __field4,
                            captured: __field5,
                            created: __field6,
                            currency: __field7,
                            customer: __field8,
                            description: __field9,
                            disputed: __field10,
                            event_type: __field11,
                            failure_code: __field12,
                            failure_message: __field13,
                            id: __field14,
                            invoice: __field15,
                            paid: __field16,
                            receipt_url: __field17,
                            refunded: __field18,
                            status: __field19,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &[
                    "amount",
                    "amount_captured",
                    "amount_refunded",
                    "balance_transaction",
                    "calculated_statement_descriptor",
                    "captured",
                    "created",
                    "currency",
                    "customer",
                    "description",
                    "disputed",
                    "event_type",
                    "failure_code",
                    "failure_message",
                    "id",
                    "invoice",
                    "paid",
                    "receipt_url",
                    "refunded",
                    "status",
                ];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "Charge",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<Charge>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for Charge {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = _serde::Serializer::serialize_struct(
                    __serializer,
                    "Charge",
                    false as usize + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
                        + 1 + 1 + 1 + 1 + 1 + 1 + 1,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "amount",
                    &self.amount,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "amount_captured",
                    &self.amount_captured,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "amount_refunded",
                    &self.amount_refunded,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "balance_transaction",
                    &self.balance_transaction,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "calculated_statement_descriptor",
                    &self.calculated_statement_descriptor,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "captured",
                    &self.captured,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "created",
                    &self.created,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "currency",
                    &self.currency,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "customer",
                    &self.customer,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "description",
                    &self.description,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "disputed",
                    &self.disputed,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "event_type",
                    &self.event_type,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "failure_code",
                    &self.failure_code,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "failure_message",
                    &self.failure_message,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "invoice",
                    &self.invoice,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "paid",
                    &self.paid,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "receipt_url",
                    &self.receipt_url,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "refunded",
                    &self.refunded,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "status",
                    &self.status,
                )?;
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for Charge {
        #[inline]
        fn clone(&self) -> Charge {
            Charge {
                amount: ::core::clone::Clone::clone(&self.amount),
                amount_captured: ::core::clone::Clone::clone(&self.amount_captured),
                amount_refunded: ::core::clone::Clone::clone(&self.amount_refunded),
                balance_transaction: ::core::clone::Clone::clone(
                    &self.balance_transaction,
                ),
                calculated_statement_descriptor: ::core::clone::Clone::clone(
                    &self.calculated_statement_descriptor,
                ),
                captured: ::core::clone::Clone::clone(&self.captured),
                created: ::core::clone::Clone::clone(&self.created),
                currency: ::core::clone::Clone::clone(&self.currency),
                customer: ::core::clone::Clone::clone(&self.customer),
                description: ::core::clone::Clone::clone(&self.description),
                disputed: ::core::clone::Clone::clone(&self.disputed),
                event_type: ::core::clone::Clone::clone(&self.event_type),
                failure_code: ::core::clone::Clone::clone(&self.failure_code),
                failure_message: ::core::clone::Clone::clone(&self.failure_message),
                id: ::core::clone::Clone::clone(&self.id),
                invoice: ::core::clone::Clone::clone(&self.invoice),
                paid: ::core::clone::Clone::clone(&self.paid),
                receipt_url: ::core::clone::Clone::clone(&self.receipt_url),
                refunded: ::core::clone::Clone::clone(&self.refunded),
                status: ::core::clone::Clone::clone(&self.status),
            }
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for Charge {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for Charge {
        #[inline]
        fn eq(&self, other: &Charge) -> bool {
            self.amount == other.amount && self.amount_captured == other.amount_captured
                && self.amount_refunded == other.amount_refunded
                && self.balance_transaction == other.balance_transaction
                && self.calculated_statement_descriptor
                    == other.calculated_statement_descriptor
                && self.captured == other.captured && self.created == other.created
                && self.currency == other.currency && self.customer == other.customer
                && self.description == other.description
                && self.disputed == other.disputed && self.event_type == other.event_type
                && self.failure_code == other.failure_code
                && self.failure_message == other.failure_message && self.id == other.id
                && self.invoice == other.invoice && self.paid == other.paid
                && self.receipt_url == other.receipt_url
                && self.refunded == other.refunded && self.status == other.status
        }
    }
    impl ::core::fmt::Debug for Charge {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("Charge")
                .field("amount", &self.amount)
                .field("amount-captured", &self.amount_captured)
                .field("amount-refunded", &self.amount_refunded)
                .field("balance-transaction", &self.balance_transaction)
                .field(
                    "calculated-statement-descriptor",
                    &self.calculated_statement_descriptor,
                )
                .field("captured", &self.captured)
                .field("created", &self.created)
                .field("currency", &self.currency)
                .field("customer", &self.customer)
                .field("description", &self.description)
                .field("disputed", &self.disputed)
                .field("event-type", &self.event_type)
                .field("failure-code", &self.failure_code)
                .field("failure-message", &self.failure_message)
                .field("id", &self.id)
                .field("invoice", &self.invoice)
                .field("paid", &self.paid)
                .field("receipt-url", &self.receipt_url)
                .field("refunded", &self.refunded)
                .field("status", &self.status)
                .finish()
        }
    }
    pub struct CustomerAddress {
        pub city: Option<_rt::String>,
        pub country: Option<_rt::String>,
        pub line1: Option<_rt::String>,
        pub line2: Option<_rt::String>,
        pub postal_code: Option<_rt::String>,
        pub state: Option<_rt::String>,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for CustomerAddress {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "city" => _serde::__private::Ok(__Field::__field0),
                            "country" => _serde::__private::Ok(__Field::__field1),
                            "line1" => _serde::__private::Ok(__Field::__field2),
                            "line2" => _serde::__private::Ok(__Field::__field3),
                            "postal_code" => _serde::__private::Ok(__Field::__field4),
                            "state" => _serde::__private::Ok(__Field::__field5),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"city" => _serde::__private::Ok(__Field::__field0),
                            b"country" => _serde::__private::Ok(__Field::__field1),
                            b"line1" => _serde::__private::Ok(__Field::__field2),
                            b"line2" => _serde::__private::Ok(__Field::__field3),
                            b"postal_code" => _serde::__private::Ok(__Field::__field4),
                            b"state" => _serde::__private::Ok(__Field::__field5),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<CustomerAddress>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = CustomerAddress;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct CustomerAddress",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct CustomerAddress with 6 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct CustomerAddress with 6 elements",
                                    ),
                                );
                            }
                        };
                        let __field2 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        2usize,
                                        &"struct CustomerAddress with 6 elements",
                                    ),
                                );
                            }
                        };
                        let __field3 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        3usize,
                                        &"struct CustomerAddress with 6 elements",
                                    ),
                                );
                            }
                        };
                        let __field4 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        4usize,
                                        &"struct CustomerAddress with 6 elements",
                                    ),
                                );
                            }
                        };
                        let __field5 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        5usize,
                                        &"struct CustomerAddress with 6 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(CustomerAddress {
                            city: __field0,
                            country: __field1,
                            line1: __field2,
                            line2: __field3,
                            postal_code: __field4,
                            state: __field5,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field2: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field3: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field4: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field5: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                            __Field,
                        >(&mut __map)? {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("city"),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "country",
                                            ),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("line1"),
                                        );
                                    }
                                    __field2 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field3 => {
                                    if _serde::__private::Option::is_some(&__field3) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("line2"),
                                        );
                                    }
                                    __field3 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field4 => {
                                    if _serde::__private::Option::is_some(&__field4) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "postal_code",
                                            ),
                                        );
                                    }
                                    __field4 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field5 => {
                                    if _serde::__private::Option::is_some(&__field5) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("state"),
                                        );
                                    }
                                    __field5 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                _ => {
                                    let _ = _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map)?;
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("city")?
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("country")?
                            }
                        };
                        let __field2 = match __field2 {
                            _serde::__private::Some(__field2) => __field2,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("line1")?
                            }
                        };
                        let __field3 = match __field3 {
                            _serde::__private::Some(__field3) => __field3,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("line2")?
                            }
                        };
                        let __field4 = match __field4 {
                            _serde::__private::Some(__field4) => __field4,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("postal_code")?
                            }
                        };
                        let __field5 = match __field5 {
                            _serde::__private::Some(__field5) => __field5,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("state")?
                            }
                        };
                        _serde::__private::Ok(CustomerAddress {
                            city: __field0,
                            country: __field1,
                            line1: __field2,
                            line2: __field3,
                            postal_code: __field4,
                            state: __field5,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &[
                    "city",
                    "country",
                    "line1",
                    "line2",
                    "postal_code",
                    "state",
                ];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "CustomerAddress",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<CustomerAddress>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for CustomerAddress {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = _serde::Serializer::serialize_struct(
                    __serializer,
                    "CustomerAddress",
                    false as usize + 1 + 1 + 1 + 1 + 1 + 1,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "city",
                    &self.city,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "country",
                    &self.country,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "line1",
                    &self.line1,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "line2",
                    &self.line2,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "postal_code",
                    &self.postal_code,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "state",
                    &self.state,
                )?;
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for CustomerAddress {
        #[inline]
        fn clone(&self) -> CustomerAddress {
            CustomerAddress {
                city: ::core::clone::Clone::clone(&self.city),
                country: ::core::clone::Clone::clone(&self.country),
                line1: ::core::clone::Clone::clone(&self.line1),
                line2: ::core::clone::Clone::clone(&self.line2),
                postal_code: ::core::clone::Clone::clone(&self.postal_code),
                state: ::core::clone::Clone::clone(&self.state),
            }
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for CustomerAddress {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for CustomerAddress {
        #[inline]
        fn eq(&self, other: &CustomerAddress) -> bool {
            self.city == other.city && self.country == other.country
                && self.line1 == other.line1 && self.line2 == other.line2
                && self.postal_code == other.postal_code && self.state == other.state
        }
    }
    impl ::core::fmt::Debug for CustomerAddress {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("CustomerAddress")
                .field("city", &self.city)
                .field("country", &self.country)
                .field("line1", &self.line1)
                .field("line2", &self.line2)
                .field("postal-code", &self.postal_code)
                .field("state", &self.state)
                .finish()
        }
    }
    pub enum CustomerEventType {
        CustomerBankAccountCreated,
        CustomerBankAccountDeleted,
        CustomerBankAccountUpdated,
        CustomerCardCreated,
        CustomerCardDeleted,
        CustomerCardUpdated,
        CustomerCreated,
        CustomerDeleted,
        CustomerSubscriptionCreated,
        CustomerSubscriptionDeleted,
        CustomerSubscriptionPaused,
        CustomerSubscriptionPendingUpdateApplied,
        CustomerSubscriptionPendingUpdateExpired,
        CustomerSubscriptionResumed,
        CustomerSubscriptionTrialWillEnd,
        CustomerSubscriptionUpdated,
        CustomerUpdated,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for CustomerEventType {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                    __field7,
                    __field8,
                    __field9,
                    __field10,
                    __field11,
                    __field12,
                    __field13,
                    __field14,
                    __field15,
                    __field16,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            6u64 => _serde::__private::Ok(__Field::__field6),
                            7u64 => _serde::__private::Ok(__Field::__field7),
                            8u64 => _serde::__private::Ok(__Field::__field8),
                            9u64 => _serde::__private::Ok(__Field::__field9),
                            10u64 => _serde::__private::Ok(__Field::__field10),
                            11u64 => _serde::__private::Ok(__Field::__field11),
                            12u64 => _serde::__private::Ok(__Field::__field12),
                            13u64 => _serde::__private::Ok(__Field::__field13),
                            14u64 => _serde::__private::Ok(__Field::__field14),
                            15u64 => _serde::__private::Ok(__Field::__field15),
                            16u64 => _serde::__private::Ok(__Field::__field16),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 17",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "CustomerBankAccountCreated" => {
                                _serde::__private::Ok(__Field::__field0)
                            }
                            "CustomerBankAccountDeleted" => {
                                _serde::__private::Ok(__Field::__field1)
                            }
                            "CustomerBankAccountUpdated" => {
                                _serde::__private::Ok(__Field::__field2)
                            }
                            "CustomerCardCreated" => {
                                _serde::__private::Ok(__Field::__field3)
                            }
                            "CustomerCardDeleted" => {
                                _serde::__private::Ok(__Field::__field4)
                            }
                            "CustomerCardUpdated" => {
                                _serde::__private::Ok(__Field::__field5)
                            }
                            "CustomerCreated" => _serde::__private::Ok(__Field::__field6),
                            "CustomerDeleted" => _serde::__private::Ok(__Field::__field7),
                            "CustomerSubscriptionCreated" => {
                                _serde::__private::Ok(__Field::__field8)
                            }
                            "CustomerSubscriptionDeleted" => {
                                _serde::__private::Ok(__Field::__field9)
                            }
                            "CustomerSubscriptionPaused" => {
                                _serde::__private::Ok(__Field::__field10)
                            }
                            "CustomerSubscriptionPendingUpdateApplied" => {
                                _serde::__private::Ok(__Field::__field11)
                            }
                            "CustomerSubscriptionPendingUpdateExpired" => {
                                _serde::__private::Ok(__Field::__field12)
                            }
                            "CustomerSubscriptionResumed" => {
                                _serde::__private::Ok(__Field::__field13)
                            }
                            "CustomerSubscriptionTrialWillEnd" => {
                                _serde::__private::Ok(__Field::__field14)
                            }
                            "CustomerSubscriptionUpdated" => {
                                _serde::__private::Ok(__Field::__field15)
                            }
                            "CustomerUpdated" => {
                                _serde::__private::Ok(__Field::__field16)
                            }
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"CustomerBankAccountCreated" => {
                                _serde::__private::Ok(__Field::__field0)
                            }
                            b"CustomerBankAccountDeleted" => {
                                _serde::__private::Ok(__Field::__field1)
                            }
                            b"CustomerBankAccountUpdated" => {
                                _serde::__private::Ok(__Field::__field2)
                            }
                            b"CustomerCardCreated" => {
                                _serde::__private::Ok(__Field::__field3)
                            }
                            b"CustomerCardDeleted" => {
                                _serde::__private::Ok(__Field::__field4)
                            }
                            b"CustomerCardUpdated" => {
                                _serde::__private::Ok(__Field::__field5)
                            }
                            b"CustomerCreated" => {
                                _serde::__private::Ok(__Field::__field6)
                            }
                            b"CustomerDeleted" => {
                                _serde::__private::Ok(__Field::__field7)
                            }
                            b"CustomerSubscriptionCreated" => {
                                _serde::__private::Ok(__Field::__field8)
                            }
                            b"CustomerSubscriptionDeleted" => {
                                _serde::__private::Ok(__Field::__field9)
                            }
                            b"CustomerSubscriptionPaused" => {
                                _serde::__private::Ok(__Field::__field10)
                            }
                            b"CustomerSubscriptionPendingUpdateApplied" => {
                                _serde::__private::Ok(__Field::__field11)
                            }
                            b"CustomerSubscriptionPendingUpdateExpired" => {
                                _serde::__private::Ok(__Field::__field12)
                            }
                            b"CustomerSubscriptionResumed" => {
                                _serde::__private::Ok(__Field::__field13)
                            }
                            b"CustomerSubscriptionTrialWillEnd" => {
                                _serde::__private::Ok(__Field::__field14)
                            }
                            b"CustomerSubscriptionUpdated" => {
                                _serde::__private::Ok(__Field::__field15)
                            }
                            b"CustomerUpdated" => {
                                _serde::__private::Ok(__Field::__field16)
                            }
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<CustomerEventType>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = CustomerEventType;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum CustomerEventType",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    CustomerEventType::CustomerBankAccountCreated,
                                )
                            }
                            (__Field::__field1, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    CustomerEventType::CustomerBankAccountDeleted,
                                )
                            }
                            (__Field::__field2, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    CustomerEventType::CustomerBankAccountUpdated,
                                )
                            }
                            (__Field::__field3, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    CustomerEventType::CustomerCardCreated,
                                )
                            }
                            (__Field::__field4, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    CustomerEventType::CustomerCardDeleted,
                                )
                            }
                            (__Field::__field5, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    CustomerEventType::CustomerCardUpdated,
                                )
                            }
                            (__Field::__field6, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(CustomerEventType::CustomerCreated)
                            }
                            (__Field::__field7, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(CustomerEventType::CustomerDeleted)
                            }
                            (__Field::__field8, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    CustomerEventType::CustomerSubscriptionCreated,
                                )
                            }
                            (__Field::__field9, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    CustomerEventType::CustomerSubscriptionDeleted,
                                )
                            }
                            (__Field::__field10, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    CustomerEventType::CustomerSubscriptionPaused,
                                )
                            }
                            (__Field::__field11, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    CustomerEventType::CustomerSubscriptionPendingUpdateApplied,
                                )
                            }
                            (__Field::__field12, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    CustomerEventType::CustomerSubscriptionPendingUpdateExpired,
                                )
                            }
                            (__Field::__field13, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    CustomerEventType::CustomerSubscriptionResumed,
                                )
                            }
                            (__Field::__field14, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    CustomerEventType::CustomerSubscriptionTrialWillEnd,
                                )
                            }
                            (__Field::__field15, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    CustomerEventType::CustomerSubscriptionUpdated,
                                )
                            }
                            (__Field::__field16, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(CustomerEventType::CustomerUpdated)
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &[
                    "CustomerBankAccountCreated",
                    "CustomerBankAccountDeleted",
                    "CustomerBankAccountUpdated",
                    "CustomerCardCreated",
                    "CustomerCardDeleted",
                    "CustomerCardUpdated",
                    "CustomerCreated",
                    "CustomerDeleted",
                    "CustomerSubscriptionCreated",
                    "CustomerSubscriptionDeleted",
                    "CustomerSubscriptionPaused",
                    "CustomerSubscriptionPendingUpdateApplied",
                    "CustomerSubscriptionPendingUpdateExpired",
                    "CustomerSubscriptionResumed",
                    "CustomerSubscriptionTrialWillEnd",
                    "CustomerSubscriptionUpdated",
                    "CustomerUpdated",
                ];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "CustomerEventType",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<CustomerEventType>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for CustomerEventType {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    CustomerEventType::CustomerBankAccountCreated => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "CustomerEventType",
                            0u32,
                            "CustomerBankAccountCreated",
                        )
                    }
                    CustomerEventType::CustomerBankAccountDeleted => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "CustomerEventType",
                            1u32,
                            "CustomerBankAccountDeleted",
                        )
                    }
                    CustomerEventType::CustomerBankAccountUpdated => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "CustomerEventType",
                            2u32,
                            "CustomerBankAccountUpdated",
                        )
                    }
                    CustomerEventType::CustomerCardCreated => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "CustomerEventType",
                            3u32,
                            "CustomerCardCreated",
                        )
                    }
                    CustomerEventType::CustomerCardDeleted => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "CustomerEventType",
                            4u32,
                            "CustomerCardDeleted",
                        )
                    }
                    CustomerEventType::CustomerCardUpdated => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "CustomerEventType",
                            5u32,
                            "CustomerCardUpdated",
                        )
                    }
                    CustomerEventType::CustomerCreated => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "CustomerEventType",
                            6u32,
                            "CustomerCreated",
                        )
                    }
                    CustomerEventType::CustomerDeleted => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "CustomerEventType",
                            7u32,
                            "CustomerDeleted",
                        )
                    }
                    CustomerEventType::CustomerSubscriptionCreated => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "CustomerEventType",
                            8u32,
                            "CustomerSubscriptionCreated",
                        )
                    }
                    CustomerEventType::CustomerSubscriptionDeleted => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "CustomerEventType",
                            9u32,
                            "CustomerSubscriptionDeleted",
                        )
                    }
                    CustomerEventType::CustomerSubscriptionPaused => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "CustomerEventType",
                            10u32,
                            "CustomerSubscriptionPaused",
                        )
                    }
                    CustomerEventType::CustomerSubscriptionPendingUpdateApplied => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "CustomerEventType",
                            11u32,
                            "CustomerSubscriptionPendingUpdateApplied",
                        )
                    }
                    CustomerEventType::CustomerSubscriptionPendingUpdateExpired => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "CustomerEventType",
                            12u32,
                            "CustomerSubscriptionPendingUpdateExpired",
                        )
                    }
                    CustomerEventType::CustomerSubscriptionResumed => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "CustomerEventType",
                            13u32,
                            "CustomerSubscriptionResumed",
                        )
                    }
                    CustomerEventType::CustomerSubscriptionTrialWillEnd => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "CustomerEventType",
                            14u32,
                            "CustomerSubscriptionTrialWillEnd",
                        )
                    }
                    CustomerEventType::CustomerSubscriptionUpdated => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "CustomerEventType",
                            15u32,
                            "CustomerSubscriptionUpdated",
                        )
                    }
                    CustomerEventType::CustomerUpdated => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "CustomerEventType",
                            16u32,
                            "CustomerUpdated",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for CustomerEventType {
        #[inline]
        fn clone(&self) -> CustomerEventType {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for CustomerEventType {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for CustomerEventType {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for CustomerEventType {
        #[inline]
        fn eq(&self, other: &CustomerEventType) -> bool {
            let __self_discr = ::core::intrinsics::discriminant_value(self);
            let __arg1_discr = ::core::intrinsics::discriminant_value(other);
            __self_discr == __arg1_discr
        }
    }
    impl ::core::fmt::Debug for CustomerEventType {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                CustomerEventType::CustomerBankAccountCreated => {
                    f.debug_tuple("CustomerEventType::CustomerBankAccountCreated")
                        .finish()
                }
                CustomerEventType::CustomerBankAccountDeleted => {
                    f.debug_tuple("CustomerEventType::CustomerBankAccountDeleted")
                        .finish()
                }
                CustomerEventType::CustomerBankAccountUpdated => {
                    f.debug_tuple("CustomerEventType::CustomerBankAccountUpdated")
                        .finish()
                }
                CustomerEventType::CustomerCardCreated => {
                    f.debug_tuple("CustomerEventType::CustomerCardCreated").finish()
                }
                CustomerEventType::CustomerCardDeleted => {
                    f.debug_tuple("CustomerEventType::CustomerCardDeleted").finish()
                }
                CustomerEventType::CustomerCardUpdated => {
                    f.debug_tuple("CustomerEventType::CustomerCardUpdated").finish()
                }
                CustomerEventType::CustomerCreated => {
                    f.debug_tuple("CustomerEventType::CustomerCreated").finish()
                }
                CustomerEventType::CustomerDeleted => {
                    f.debug_tuple("CustomerEventType::CustomerDeleted").finish()
                }
                CustomerEventType::CustomerSubscriptionCreated => {
                    f.debug_tuple("CustomerEventType::CustomerSubscriptionCreated")
                        .finish()
                }
                CustomerEventType::CustomerSubscriptionDeleted => {
                    f.debug_tuple("CustomerEventType::CustomerSubscriptionDeleted")
                        .finish()
                }
                CustomerEventType::CustomerSubscriptionPaused => {
                    f.debug_tuple("CustomerEventType::CustomerSubscriptionPaused")
                        .finish()
                }
                CustomerEventType::CustomerSubscriptionPendingUpdateApplied => {
                    f.debug_tuple(
                            "CustomerEventType::CustomerSubscriptionPendingUpdateApplied",
                        )
                        .finish()
                }
                CustomerEventType::CustomerSubscriptionPendingUpdateExpired => {
                    f.debug_tuple(
                            "CustomerEventType::CustomerSubscriptionPendingUpdateExpired",
                        )
                        .finish()
                }
                CustomerEventType::CustomerSubscriptionResumed => {
                    f.debug_tuple("CustomerEventType::CustomerSubscriptionResumed")
                        .finish()
                }
                CustomerEventType::CustomerSubscriptionTrialWillEnd => {
                    f.debug_tuple("CustomerEventType::CustomerSubscriptionTrialWillEnd")
                        .finish()
                }
                CustomerEventType::CustomerSubscriptionUpdated => {
                    f.debug_tuple("CustomerEventType::CustomerSubscriptionUpdated")
                        .finish()
                }
                CustomerEventType::CustomerUpdated => {
                    f.debug_tuple("CustomerEventType::CustomerUpdated").finish()
                }
            }
        }
    }
    pub struct Customer {
        pub address: Option<CustomerAddress>,
        pub balance: Option<i32>,
        pub created: i32,
        pub currency: Option<_rt::String>,
        pub delinquent: Option<bool>,
        pub description: Option<_rt::String>,
        pub email: Option<_rt::String>,
        pub event_type: CustomerEventType,
        pub id: _rt::String,
        pub invoice_prefix: Option<_rt::String>,
        pub name: Option<_rt::String>,
        pub next_invoice_sequence: Option<i32>,
        pub phone: Option<_rt::String>,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for Customer {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                    __field7,
                    __field8,
                    __field9,
                    __field10,
                    __field11,
                    __field12,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            6u64 => _serde::__private::Ok(__Field::__field6),
                            7u64 => _serde::__private::Ok(__Field::__field7),
                            8u64 => _serde::__private::Ok(__Field::__field8),
                            9u64 => _serde::__private::Ok(__Field::__field9),
                            10u64 => _serde::__private::Ok(__Field::__field10),
                            11u64 => _serde::__private::Ok(__Field::__field11),
                            12u64 => _serde::__private::Ok(__Field::__field12),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "address" => _serde::__private::Ok(__Field::__field0),
                            "balance" => _serde::__private::Ok(__Field::__field1),
                            "created" => _serde::__private::Ok(__Field::__field2),
                            "currency" => _serde::__private::Ok(__Field::__field3),
                            "delinquent" => _serde::__private::Ok(__Field::__field4),
                            "description" => _serde::__private::Ok(__Field::__field5),
                            "email" => _serde::__private::Ok(__Field::__field6),
                            "event_type" => _serde::__private::Ok(__Field::__field7),
                            "id" => _serde::__private::Ok(__Field::__field8),
                            "invoice_prefix" => _serde::__private::Ok(__Field::__field9),
                            "name" => _serde::__private::Ok(__Field::__field10),
                            "next_invoice_sequence" => {
                                _serde::__private::Ok(__Field::__field11)
                            }
                            "phone" => _serde::__private::Ok(__Field::__field12),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"address" => _serde::__private::Ok(__Field::__field0),
                            b"balance" => _serde::__private::Ok(__Field::__field1),
                            b"created" => _serde::__private::Ok(__Field::__field2),
                            b"currency" => _serde::__private::Ok(__Field::__field3),
                            b"delinquent" => _serde::__private::Ok(__Field::__field4),
                            b"description" => _serde::__private::Ok(__Field::__field5),
                            b"email" => _serde::__private::Ok(__Field::__field6),
                            b"event_type" => _serde::__private::Ok(__Field::__field7),
                            b"id" => _serde::__private::Ok(__Field::__field8),
                            b"invoice_prefix" => _serde::__private::Ok(__Field::__field9),
                            b"name" => _serde::__private::Ok(__Field::__field10),
                            b"next_invoice_sequence" => {
                                _serde::__private::Ok(__Field::__field11)
                            }
                            b"phone" => _serde::__private::Ok(__Field::__field12),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<Customer>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = Customer;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct Customer",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match _serde::de::SeqAccess::next_element::<
                            Option<CustomerAddress>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct Customer with 13 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match _serde::de::SeqAccess::next_element::<
                            Option<i32>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct Customer with 13 elements",
                                    ),
                                );
                            }
                        };
                        let __field2 = match _serde::de::SeqAccess::next_element::<
                            i32,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        2usize,
                                        &"struct Customer with 13 elements",
                                    ),
                                );
                            }
                        };
                        let __field3 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        3usize,
                                        &"struct Customer with 13 elements",
                                    ),
                                );
                            }
                        };
                        let __field4 = match _serde::de::SeqAccess::next_element::<
                            Option<bool>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        4usize,
                                        &"struct Customer with 13 elements",
                                    ),
                                );
                            }
                        };
                        let __field5 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        5usize,
                                        &"struct Customer with 13 elements",
                                    ),
                                );
                            }
                        };
                        let __field6 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        6usize,
                                        &"struct Customer with 13 elements",
                                    ),
                                );
                            }
                        };
                        let __field7 = match _serde::de::SeqAccess::next_element::<
                            CustomerEventType,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        7usize,
                                        &"struct Customer with 13 elements",
                                    ),
                                );
                            }
                        };
                        let __field8 = match _serde::de::SeqAccess::next_element::<
                            _rt::String,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        8usize,
                                        &"struct Customer with 13 elements",
                                    ),
                                );
                            }
                        };
                        let __field9 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        9usize,
                                        &"struct Customer with 13 elements",
                                    ),
                                );
                            }
                        };
                        let __field10 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        10usize,
                                        &"struct Customer with 13 elements",
                                    ),
                                );
                            }
                        };
                        let __field11 = match _serde::de::SeqAccess::next_element::<
                            Option<i32>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        11usize,
                                        &"struct Customer with 13 elements",
                                    ),
                                );
                            }
                        };
                        let __field12 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        12usize,
                                        &"struct Customer with 13 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(Customer {
                            address: __field0,
                            balance: __field1,
                            created: __field2,
                            currency: __field3,
                            delinquent: __field4,
                            description: __field5,
                            email: __field6,
                            event_type: __field7,
                            id: __field8,
                            invoice_prefix: __field9,
                            name: __field10,
                            next_invoice_sequence: __field11,
                            phone: __field12,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<
                            Option<CustomerAddress>,
                        > = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<Option<i32>> = _serde::__private::None;
                        let mut __field2: _serde::__private::Option<i32> = _serde::__private::None;
                        let mut __field3: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field4: _serde::__private::Option<Option<bool>> = _serde::__private::None;
                        let mut __field5: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field6: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field7: _serde::__private::Option<CustomerEventType> = _serde::__private::None;
                        let mut __field8: _serde::__private::Option<_rt::String> = _serde::__private::None;
                        let mut __field9: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field10: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field11: _serde::__private::Option<Option<i32>> = _serde::__private::None;
                        let mut __field12: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                            __Field,
                        >(&mut __map)? {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "address",
                                            ),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<CustomerAddress>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "balance",
                                            ),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<i32>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "created",
                                            ),
                                        );
                                    }
                                    __field2 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                    );
                                }
                                __Field::__field3 => {
                                    if _serde::__private::Option::is_some(&__field3) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "currency",
                                            ),
                                        );
                                    }
                                    __field3 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field4 => {
                                    if _serde::__private::Option::is_some(&__field4) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "delinquent",
                                            ),
                                        );
                                    }
                                    __field4 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<bool>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field5 => {
                                    if _serde::__private::Option::is_some(&__field5) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "description",
                                            ),
                                        );
                                    }
                                    __field5 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field6 => {
                                    if _serde::__private::Option::is_some(&__field6) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("email"),
                                        );
                                    }
                                    __field6 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field7 => {
                                    if _serde::__private::Option::is_some(&__field7) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "event_type",
                                            ),
                                        );
                                    }
                                    __field7 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            CustomerEventType,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field8 => {
                                    if _serde::__private::Option::is_some(&__field8) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                        );
                                    }
                                    __field8 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            _rt::String,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field9 => {
                                    if _serde::__private::Option::is_some(&__field9) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "invoice_prefix",
                                            ),
                                        );
                                    }
                                    __field9 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field10 => {
                                    if _serde::__private::Option::is_some(&__field10) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("name"),
                                        );
                                    }
                                    __field10 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field11 => {
                                    if _serde::__private::Option::is_some(&__field11) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "next_invoice_sequence",
                                            ),
                                        );
                                    }
                                    __field11 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<i32>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field12 => {
                                    if _serde::__private::Option::is_some(&__field12) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("phone"),
                                        );
                                    }
                                    __field12 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                _ => {
                                    let _ = _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map)?;
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("address")?
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("balance")?
                            }
                        };
                        let __field2 = match __field2 {
                            _serde::__private::Some(__field2) => __field2,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("created")?
                            }
                        };
                        let __field3 = match __field3 {
                            _serde::__private::Some(__field3) => __field3,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("currency")?
                            }
                        };
                        let __field4 = match __field4 {
                            _serde::__private::Some(__field4) => __field4,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("delinquent")?
                            }
                        };
                        let __field5 = match __field5 {
                            _serde::__private::Some(__field5) => __field5,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("description")?
                            }
                        };
                        let __field6 = match __field6 {
                            _serde::__private::Some(__field6) => __field6,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("email")?
                            }
                        };
                        let __field7 = match __field7 {
                            _serde::__private::Some(__field7) => __field7,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("event_type")?
                            }
                        };
                        let __field8 = match __field8 {
                            _serde::__private::Some(__field8) => __field8,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("id")?
                            }
                        };
                        let __field9 = match __field9 {
                            _serde::__private::Some(__field9) => __field9,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("invoice_prefix")?
                            }
                        };
                        let __field10 = match __field10 {
                            _serde::__private::Some(__field10) => __field10,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("name")?
                            }
                        };
                        let __field11 = match __field11 {
                            _serde::__private::Some(__field11) => __field11,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field(
                                    "next_invoice_sequence",
                                )?
                            }
                        };
                        let __field12 = match __field12 {
                            _serde::__private::Some(__field12) => __field12,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("phone")?
                            }
                        };
                        _serde::__private::Ok(Customer {
                            address: __field0,
                            balance: __field1,
                            created: __field2,
                            currency: __field3,
                            delinquent: __field4,
                            description: __field5,
                            email: __field6,
                            event_type: __field7,
                            id: __field8,
                            invoice_prefix: __field9,
                            name: __field10,
                            next_invoice_sequence: __field11,
                            phone: __field12,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &[
                    "address",
                    "balance",
                    "created",
                    "currency",
                    "delinquent",
                    "description",
                    "email",
                    "event_type",
                    "id",
                    "invoice_prefix",
                    "name",
                    "next_invoice_sequence",
                    "phone",
                ];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "Customer",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<Customer>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for Customer {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = _serde::Serializer::serialize_struct(
                    __serializer,
                    "Customer",
                    false as usize + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "address",
                    &self.address,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "balance",
                    &self.balance,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "created",
                    &self.created,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "currency",
                    &self.currency,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "delinquent",
                    &self.delinquent,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "description",
                    &self.description,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "email",
                    &self.email,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "event_type",
                    &self.event_type,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "invoice_prefix",
                    &self.invoice_prefix,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "name",
                    &self.name,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "next_invoice_sequence",
                    &self.next_invoice_sequence,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "phone",
                    &self.phone,
                )?;
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for Customer {
        #[inline]
        fn clone(&self) -> Customer {
            Customer {
                address: ::core::clone::Clone::clone(&self.address),
                balance: ::core::clone::Clone::clone(&self.balance),
                created: ::core::clone::Clone::clone(&self.created),
                currency: ::core::clone::Clone::clone(&self.currency),
                delinquent: ::core::clone::Clone::clone(&self.delinquent),
                description: ::core::clone::Clone::clone(&self.description),
                email: ::core::clone::Clone::clone(&self.email),
                event_type: ::core::clone::Clone::clone(&self.event_type),
                id: ::core::clone::Clone::clone(&self.id),
                invoice_prefix: ::core::clone::Clone::clone(&self.invoice_prefix),
                name: ::core::clone::Clone::clone(&self.name),
                next_invoice_sequence: ::core::clone::Clone::clone(
                    &self.next_invoice_sequence,
                ),
                phone: ::core::clone::Clone::clone(&self.phone),
            }
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for Customer {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for Customer {
        #[inline]
        fn eq(&self, other: &Customer) -> bool {
            self.address == other.address && self.balance == other.balance
                && self.created == other.created && self.currency == other.currency
                && self.delinquent == other.delinquent
                && self.description == other.description && self.email == other.email
                && self.event_type == other.event_type && self.id == other.id
                && self.invoice_prefix == other.invoice_prefix && self.name == other.name
                && self.next_invoice_sequence == other.next_invoice_sequence
                && self.phone == other.phone
        }
    }
    impl ::core::fmt::Debug for Customer {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("Customer")
                .field("address", &self.address)
                .field("balance", &self.balance)
                .field("created", &self.created)
                .field("currency", &self.currency)
                .field("delinquent", &self.delinquent)
                .field("description", &self.description)
                .field("email", &self.email)
                .field("event-type", &self.event_type)
                .field("id", &self.id)
                .field("invoice-prefix", &self.invoice_prefix)
                .field("name", &self.name)
                .field("next-invoice-sequence", &self.next_invoice_sequence)
                .field("phone", &self.phone)
                .finish()
        }
    }
    pub enum FieldsSectionType {
        Section,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for FieldsSectionType {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 1",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "Section" => _serde::__private::Ok(__Field::__field0),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"Section" => _serde::__private::Ok(__Field::__field0),
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<FieldsSectionType>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = FieldsSectionType;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum FieldsSectionType",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(FieldsSectionType::Section)
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &["Section"];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "FieldsSectionType",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<FieldsSectionType>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for FieldsSectionType {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    FieldsSectionType::Section => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "FieldsSectionType",
                            0u32,
                            "Section",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for FieldsSectionType {
        #[inline]
        fn clone(&self) -> FieldsSectionType {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for FieldsSectionType {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for FieldsSectionType {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for FieldsSectionType {
        #[inline]
        fn eq(&self, other: &FieldsSectionType) -> bool {
            true
        }
    }
    impl ::core::fmt::Debug for FieldsSectionType {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                FieldsSectionType::Section => {
                    f.debug_tuple("FieldsSectionType::Section").finish()
                }
            }
        }
    }
    pub enum InvoiceBillingReason {
        AutomaticPendingInvoiceItemInvoice,
        Manual,
        QuoteAccept,
        Subscription,
        SubscriptionCreate,
        SubscriptionCycle,
        SubscriptionThreshold,
        SubscriptionUpdate,
        Upcoming,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for InvoiceBillingReason {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                    __field7,
                    __field8,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            6u64 => _serde::__private::Ok(__Field::__field6),
                            7u64 => _serde::__private::Ok(__Field::__field7),
                            8u64 => _serde::__private::Ok(__Field::__field8),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 9",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "AutomaticPendingInvoiceItemInvoice" => {
                                _serde::__private::Ok(__Field::__field0)
                            }
                            "Manual" => _serde::__private::Ok(__Field::__field1),
                            "QuoteAccept" => _serde::__private::Ok(__Field::__field2),
                            "Subscription" => _serde::__private::Ok(__Field::__field3),
                            "SubscriptionCreate" => {
                                _serde::__private::Ok(__Field::__field4)
                            }
                            "SubscriptionCycle" => {
                                _serde::__private::Ok(__Field::__field5)
                            }
                            "SubscriptionThreshold" => {
                                _serde::__private::Ok(__Field::__field6)
                            }
                            "SubscriptionUpdate" => {
                                _serde::__private::Ok(__Field::__field7)
                            }
                            "Upcoming" => _serde::__private::Ok(__Field::__field8),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"AutomaticPendingInvoiceItemInvoice" => {
                                _serde::__private::Ok(__Field::__field0)
                            }
                            b"Manual" => _serde::__private::Ok(__Field::__field1),
                            b"QuoteAccept" => _serde::__private::Ok(__Field::__field2),
                            b"Subscription" => _serde::__private::Ok(__Field::__field3),
                            b"SubscriptionCreate" => {
                                _serde::__private::Ok(__Field::__field4)
                            }
                            b"SubscriptionCycle" => {
                                _serde::__private::Ok(__Field::__field5)
                            }
                            b"SubscriptionThreshold" => {
                                _serde::__private::Ok(__Field::__field6)
                            }
                            b"SubscriptionUpdate" => {
                                _serde::__private::Ok(__Field::__field7)
                            }
                            b"Upcoming" => _serde::__private::Ok(__Field::__field8),
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<InvoiceBillingReason>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = InvoiceBillingReason;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum InvoiceBillingReason",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    InvoiceBillingReason::AutomaticPendingInvoiceItemInvoice,
                                )
                            }
                            (__Field::__field1, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(InvoiceBillingReason::Manual)
                            }
                            (__Field::__field2, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(InvoiceBillingReason::QuoteAccept)
                            }
                            (__Field::__field3, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(InvoiceBillingReason::Subscription)
                            }
                            (__Field::__field4, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    InvoiceBillingReason::SubscriptionCreate,
                                )
                            }
                            (__Field::__field5, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    InvoiceBillingReason::SubscriptionCycle,
                                )
                            }
                            (__Field::__field6, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    InvoiceBillingReason::SubscriptionThreshold,
                                )
                            }
                            (__Field::__field7, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    InvoiceBillingReason::SubscriptionUpdate,
                                )
                            }
                            (__Field::__field8, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(InvoiceBillingReason::Upcoming)
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &[
                    "AutomaticPendingInvoiceItemInvoice",
                    "Manual",
                    "QuoteAccept",
                    "Subscription",
                    "SubscriptionCreate",
                    "SubscriptionCycle",
                    "SubscriptionThreshold",
                    "SubscriptionUpdate",
                    "Upcoming",
                ];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "InvoiceBillingReason",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<InvoiceBillingReason>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for InvoiceBillingReason {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    InvoiceBillingReason::AutomaticPendingInvoiceItemInvoice => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "InvoiceBillingReason",
                            0u32,
                            "AutomaticPendingInvoiceItemInvoice",
                        )
                    }
                    InvoiceBillingReason::Manual => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "InvoiceBillingReason",
                            1u32,
                            "Manual",
                        )
                    }
                    InvoiceBillingReason::QuoteAccept => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "InvoiceBillingReason",
                            2u32,
                            "QuoteAccept",
                        )
                    }
                    InvoiceBillingReason::Subscription => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "InvoiceBillingReason",
                            3u32,
                            "Subscription",
                        )
                    }
                    InvoiceBillingReason::SubscriptionCreate => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "InvoiceBillingReason",
                            4u32,
                            "SubscriptionCreate",
                        )
                    }
                    InvoiceBillingReason::SubscriptionCycle => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "InvoiceBillingReason",
                            5u32,
                            "SubscriptionCycle",
                        )
                    }
                    InvoiceBillingReason::SubscriptionThreshold => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "InvoiceBillingReason",
                            6u32,
                            "SubscriptionThreshold",
                        )
                    }
                    InvoiceBillingReason::SubscriptionUpdate => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "InvoiceBillingReason",
                            7u32,
                            "SubscriptionUpdate",
                        )
                    }
                    InvoiceBillingReason::Upcoming => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "InvoiceBillingReason",
                            8u32,
                            "Upcoming",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for InvoiceBillingReason {
        #[inline]
        fn clone(&self) -> InvoiceBillingReason {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for InvoiceBillingReason {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for InvoiceBillingReason {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for InvoiceBillingReason {
        #[inline]
        fn eq(&self, other: &InvoiceBillingReason) -> bool {
            let __self_discr = ::core::intrinsics::discriminant_value(self);
            let __arg1_discr = ::core::intrinsics::discriminant_value(other);
            __self_discr == __arg1_discr
        }
    }
    impl ::core::fmt::Debug for InvoiceBillingReason {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                InvoiceBillingReason::AutomaticPendingInvoiceItemInvoice => {
                    f.debug_tuple(
                            "InvoiceBillingReason::AutomaticPendingInvoiceItemInvoice",
                        )
                        .finish()
                }
                InvoiceBillingReason::Manual => {
                    f.debug_tuple("InvoiceBillingReason::Manual").finish()
                }
                InvoiceBillingReason::QuoteAccept => {
                    f.debug_tuple("InvoiceBillingReason::QuoteAccept").finish()
                }
                InvoiceBillingReason::Subscription => {
                    f.debug_tuple("InvoiceBillingReason::Subscription").finish()
                }
                InvoiceBillingReason::SubscriptionCreate => {
                    f.debug_tuple("InvoiceBillingReason::SubscriptionCreate").finish()
                }
                InvoiceBillingReason::SubscriptionCycle => {
                    f.debug_tuple("InvoiceBillingReason::SubscriptionCycle").finish()
                }
                InvoiceBillingReason::SubscriptionThreshold => {
                    f.debug_tuple("InvoiceBillingReason::SubscriptionThreshold").finish()
                }
                InvoiceBillingReason::SubscriptionUpdate => {
                    f.debug_tuple("InvoiceBillingReason::SubscriptionUpdate").finish()
                }
                InvoiceBillingReason::Upcoming => {
                    f.debug_tuple("InvoiceBillingReason::Upcoming").finish()
                }
            }
        }
    }
    pub enum InvoiceCollectionMethod {
        ChargeAutomatically,
        SendInvoice,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for InvoiceCollectionMethod {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 2",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "ChargeAutomatically" => {
                                _serde::__private::Ok(__Field::__field0)
                            }
                            "SendInvoice" => _serde::__private::Ok(__Field::__field1),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"ChargeAutomatically" => {
                                _serde::__private::Ok(__Field::__field0)
                            }
                            b"SendInvoice" => _serde::__private::Ok(__Field::__field1),
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<InvoiceCollectionMethod>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = InvoiceCollectionMethod;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum InvoiceCollectionMethod",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    InvoiceCollectionMethod::ChargeAutomatically,
                                )
                            }
                            (__Field::__field1, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(InvoiceCollectionMethod::SendInvoice)
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &[
                    "ChargeAutomatically",
                    "SendInvoice",
                ];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "InvoiceCollectionMethod",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<
                            InvoiceCollectionMethod,
                        >,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for InvoiceCollectionMethod {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    InvoiceCollectionMethod::ChargeAutomatically => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "InvoiceCollectionMethod",
                            0u32,
                            "ChargeAutomatically",
                        )
                    }
                    InvoiceCollectionMethod::SendInvoice => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "InvoiceCollectionMethod",
                            1u32,
                            "SendInvoice",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for InvoiceCollectionMethod {
        #[inline]
        fn clone(&self) -> InvoiceCollectionMethod {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for InvoiceCollectionMethod {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for InvoiceCollectionMethod {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for InvoiceCollectionMethod {
        #[inline]
        fn eq(&self, other: &InvoiceCollectionMethod) -> bool {
            let __self_discr = ::core::intrinsics::discriminant_value(self);
            let __arg1_discr = ::core::intrinsics::discriminant_value(other);
            __self_discr == __arg1_discr
        }
    }
    impl ::core::fmt::Debug for InvoiceCollectionMethod {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                InvoiceCollectionMethod::ChargeAutomatically => {
                    f.debug_tuple("InvoiceCollectionMethod::ChargeAutomatically")
                        .finish()
                }
                InvoiceCollectionMethod::SendInvoice => {
                    f.debug_tuple("InvoiceCollectionMethod::SendInvoice").finish()
                }
            }
        }
    }
    pub enum InvoiceEventType {
        InvoiceCreated,
        InvoiceDeleted,
        InvoiceFinalizationFailed,
        InvoiceFinalized,
        InvoiceInvoiceWillBeDue,
        InvoiceMarkedUncollectible,
        InvoiceOverdue,
        InvoicePaid,
        InvoicePaymentActionRequired,
        InvoicePaymentFailed,
        InvoicePaymentSucceeded,
        InvoiceSent,
        InvoiceUpcoming,
        InvoiceUpdated,
        InvoiceVoided,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for InvoiceEventType {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                    __field7,
                    __field8,
                    __field9,
                    __field10,
                    __field11,
                    __field12,
                    __field13,
                    __field14,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            6u64 => _serde::__private::Ok(__Field::__field6),
                            7u64 => _serde::__private::Ok(__Field::__field7),
                            8u64 => _serde::__private::Ok(__Field::__field8),
                            9u64 => _serde::__private::Ok(__Field::__field9),
                            10u64 => _serde::__private::Ok(__Field::__field10),
                            11u64 => _serde::__private::Ok(__Field::__field11),
                            12u64 => _serde::__private::Ok(__Field::__field12),
                            13u64 => _serde::__private::Ok(__Field::__field13),
                            14u64 => _serde::__private::Ok(__Field::__field14),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 15",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "InvoiceCreated" => _serde::__private::Ok(__Field::__field0),
                            "InvoiceDeleted" => _serde::__private::Ok(__Field::__field1),
                            "InvoiceFinalizationFailed" => {
                                _serde::__private::Ok(__Field::__field2)
                            }
                            "InvoiceFinalized" => {
                                _serde::__private::Ok(__Field::__field3)
                            }
                            "InvoiceInvoiceWillBeDue" => {
                                _serde::__private::Ok(__Field::__field4)
                            }
                            "InvoiceMarkedUncollectible" => {
                                _serde::__private::Ok(__Field::__field5)
                            }
                            "InvoiceOverdue" => _serde::__private::Ok(__Field::__field6),
                            "InvoicePaid" => _serde::__private::Ok(__Field::__field7),
                            "InvoicePaymentActionRequired" => {
                                _serde::__private::Ok(__Field::__field8)
                            }
                            "InvoicePaymentFailed" => {
                                _serde::__private::Ok(__Field::__field9)
                            }
                            "InvoicePaymentSucceeded" => {
                                _serde::__private::Ok(__Field::__field10)
                            }
                            "InvoiceSent" => _serde::__private::Ok(__Field::__field11),
                            "InvoiceUpcoming" => {
                                _serde::__private::Ok(__Field::__field12)
                            }
                            "InvoiceUpdated" => _serde::__private::Ok(__Field::__field13),
                            "InvoiceVoided" => _serde::__private::Ok(__Field::__field14),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"InvoiceCreated" => _serde::__private::Ok(__Field::__field0),
                            b"InvoiceDeleted" => _serde::__private::Ok(__Field::__field1),
                            b"InvoiceFinalizationFailed" => {
                                _serde::__private::Ok(__Field::__field2)
                            }
                            b"InvoiceFinalized" => {
                                _serde::__private::Ok(__Field::__field3)
                            }
                            b"InvoiceInvoiceWillBeDue" => {
                                _serde::__private::Ok(__Field::__field4)
                            }
                            b"InvoiceMarkedUncollectible" => {
                                _serde::__private::Ok(__Field::__field5)
                            }
                            b"InvoiceOverdue" => _serde::__private::Ok(__Field::__field6),
                            b"InvoicePaid" => _serde::__private::Ok(__Field::__field7),
                            b"InvoicePaymentActionRequired" => {
                                _serde::__private::Ok(__Field::__field8)
                            }
                            b"InvoicePaymentFailed" => {
                                _serde::__private::Ok(__Field::__field9)
                            }
                            b"InvoicePaymentSucceeded" => {
                                _serde::__private::Ok(__Field::__field10)
                            }
                            b"InvoiceSent" => _serde::__private::Ok(__Field::__field11),
                            b"InvoiceUpcoming" => {
                                _serde::__private::Ok(__Field::__field12)
                            }
                            b"InvoiceUpdated" => {
                                _serde::__private::Ok(__Field::__field13)
                            }
                            b"InvoiceVoided" => _serde::__private::Ok(__Field::__field14),
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<InvoiceEventType>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = InvoiceEventType;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum InvoiceEventType",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(InvoiceEventType::InvoiceCreated)
                            }
                            (__Field::__field1, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(InvoiceEventType::InvoiceDeleted)
                            }
                            (__Field::__field2, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    InvoiceEventType::InvoiceFinalizationFailed,
                                )
                            }
                            (__Field::__field3, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(InvoiceEventType::InvoiceFinalized)
                            }
                            (__Field::__field4, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    InvoiceEventType::InvoiceInvoiceWillBeDue,
                                )
                            }
                            (__Field::__field5, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    InvoiceEventType::InvoiceMarkedUncollectible,
                                )
                            }
                            (__Field::__field6, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(InvoiceEventType::InvoiceOverdue)
                            }
                            (__Field::__field7, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(InvoiceEventType::InvoicePaid)
                            }
                            (__Field::__field8, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    InvoiceEventType::InvoicePaymentActionRequired,
                                )
                            }
                            (__Field::__field9, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    InvoiceEventType::InvoicePaymentFailed,
                                )
                            }
                            (__Field::__field10, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    InvoiceEventType::InvoicePaymentSucceeded,
                                )
                            }
                            (__Field::__field11, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(InvoiceEventType::InvoiceSent)
                            }
                            (__Field::__field12, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(InvoiceEventType::InvoiceUpcoming)
                            }
                            (__Field::__field13, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(InvoiceEventType::InvoiceUpdated)
                            }
                            (__Field::__field14, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(InvoiceEventType::InvoiceVoided)
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &[
                    "InvoiceCreated",
                    "InvoiceDeleted",
                    "InvoiceFinalizationFailed",
                    "InvoiceFinalized",
                    "InvoiceInvoiceWillBeDue",
                    "InvoiceMarkedUncollectible",
                    "InvoiceOverdue",
                    "InvoicePaid",
                    "InvoicePaymentActionRequired",
                    "InvoicePaymentFailed",
                    "InvoicePaymentSucceeded",
                    "InvoiceSent",
                    "InvoiceUpcoming",
                    "InvoiceUpdated",
                    "InvoiceVoided",
                ];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "InvoiceEventType",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<InvoiceEventType>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for InvoiceEventType {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    InvoiceEventType::InvoiceCreated => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "InvoiceEventType",
                            0u32,
                            "InvoiceCreated",
                        )
                    }
                    InvoiceEventType::InvoiceDeleted => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "InvoiceEventType",
                            1u32,
                            "InvoiceDeleted",
                        )
                    }
                    InvoiceEventType::InvoiceFinalizationFailed => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "InvoiceEventType",
                            2u32,
                            "InvoiceFinalizationFailed",
                        )
                    }
                    InvoiceEventType::InvoiceFinalized => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "InvoiceEventType",
                            3u32,
                            "InvoiceFinalized",
                        )
                    }
                    InvoiceEventType::InvoiceInvoiceWillBeDue => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "InvoiceEventType",
                            4u32,
                            "InvoiceInvoiceWillBeDue",
                        )
                    }
                    InvoiceEventType::InvoiceMarkedUncollectible => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "InvoiceEventType",
                            5u32,
                            "InvoiceMarkedUncollectible",
                        )
                    }
                    InvoiceEventType::InvoiceOverdue => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "InvoiceEventType",
                            6u32,
                            "InvoiceOverdue",
                        )
                    }
                    InvoiceEventType::InvoicePaid => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "InvoiceEventType",
                            7u32,
                            "InvoicePaid",
                        )
                    }
                    InvoiceEventType::InvoicePaymentActionRequired => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "InvoiceEventType",
                            8u32,
                            "InvoicePaymentActionRequired",
                        )
                    }
                    InvoiceEventType::InvoicePaymentFailed => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "InvoiceEventType",
                            9u32,
                            "InvoicePaymentFailed",
                        )
                    }
                    InvoiceEventType::InvoicePaymentSucceeded => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "InvoiceEventType",
                            10u32,
                            "InvoicePaymentSucceeded",
                        )
                    }
                    InvoiceEventType::InvoiceSent => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "InvoiceEventType",
                            11u32,
                            "InvoiceSent",
                        )
                    }
                    InvoiceEventType::InvoiceUpcoming => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "InvoiceEventType",
                            12u32,
                            "InvoiceUpcoming",
                        )
                    }
                    InvoiceEventType::InvoiceUpdated => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "InvoiceEventType",
                            13u32,
                            "InvoiceUpdated",
                        )
                    }
                    InvoiceEventType::InvoiceVoided => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "InvoiceEventType",
                            14u32,
                            "InvoiceVoided",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for InvoiceEventType {
        #[inline]
        fn clone(&self) -> InvoiceEventType {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for InvoiceEventType {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for InvoiceEventType {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for InvoiceEventType {
        #[inline]
        fn eq(&self, other: &InvoiceEventType) -> bool {
            let __self_discr = ::core::intrinsics::discriminant_value(self);
            let __arg1_discr = ::core::intrinsics::discriminant_value(other);
            __self_discr == __arg1_discr
        }
    }
    impl ::core::fmt::Debug for InvoiceEventType {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                InvoiceEventType::InvoiceCreated => {
                    f.debug_tuple("InvoiceEventType::InvoiceCreated").finish()
                }
                InvoiceEventType::InvoiceDeleted => {
                    f.debug_tuple("InvoiceEventType::InvoiceDeleted").finish()
                }
                InvoiceEventType::InvoiceFinalizationFailed => {
                    f.debug_tuple("InvoiceEventType::InvoiceFinalizationFailed").finish()
                }
                InvoiceEventType::InvoiceFinalized => {
                    f.debug_tuple("InvoiceEventType::InvoiceFinalized").finish()
                }
                InvoiceEventType::InvoiceInvoiceWillBeDue => {
                    f.debug_tuple("InvoiceEventType::InvoiceInvoiceWillBeDue").finish()
                }
                InvoiceEventType::InvoiceMarkedUncollectible => {
                    f.debug_tuple("InvoiceEventType::InvoiceMarkedUncollectible")
                        .finish()
                }
                InvoiceEventType::InvoiceOverdue => {
                    f.debug_tuple("InvoiceEventType::InvoiceOverdue").finish()
                }
                InvoiceEventType::InvoicePaid => {
                    f.debug_tuple("InvoiceEventType::InvoicePaid").finish()
                }
                InvoiceEventType::InvoicePaymentActionRequired => {
                    f.debug_tuple("InvoiceEventType::InvoicePaymentActionRequired")
                        .finish()
                }
                InvoiceEventType::InvoicePaymentFailed => {
                    f.debug_tuple("InvoiceEventType::InvoicePaymentFailed").finish()
                }
                InvoiceEventType::InvoicePaymentSucceeded => {
                    f.debug_tuple("InvoiceEventType::InvoicePaymentSucceeded").finish()
                }
                InvoiceEventType::InvoiceSent => {
                    f.debug_tuple("InvoiceEventType::InvoiceSent").finish()
                }
                InvoiceEventType::InvoiceUpcoming => {
                    f.debug_tuple("InvoiceEventType::InvoiceUpcoming").finish()
                }
                InvoiceEventType::InvoiceUpdated => {
                    f.debug_tuple("InvoiceEventType::InvoiceUpdated").finish()
                }
                InvoiceEventType::InvoiceVoided => {
                    f.debug_tuple("InvoiceEventType::InvoiceVoided").finish()
                }
            }
        }
    }
    pub enum InvoiceStatus {
        Draft,
        Open,
        Paid,
        Uncollectible,
        Void,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for InvoiceStatus {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 5",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "Draft" => _serde::__private::Ok(__Field::__field0),
                            "Open" => _serde::__private::Ok(__Field::__field1),
                            "Paid" => _serde::__private::Ok(__Field::__field2),
                            "Uncollectible" => _serde::__private::Ok(__Field::__field3),
                            "Void" => _serde::__private::Ok(__Field::__field4),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"Draft" => _serde::__private::Ok(__Field::__field0),
                            b"Open" => _serde::__private::Ok(__Field::__field1),
                            b"Paid" => _serde::__private::Ok(__Field::__field2),
                            b"Uncollectible" => _serde::__private::Ok(__Field::__field3),
                            b"Void" => _serde::__private::Ok(__Field::__field4),
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<InvoiceStatus>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = InvoiceStatus;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum InvoiceStatus",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(InvoiceStatus::Draft)
                            }
                            (__Field::__field1, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(InvoiceStatus::Open)
                            }
                            (__Field::__field2, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(InvoiceStatus::Paid)
                            }
                            (__Field::__field3, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(InvoiceStatus::Uncollectible)
                            }
                            (__Field::__field4, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(InvoiceStatus::Void)
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &[
                    "Draft",
                    "Open",
                    "Paid",
                    "Uncollectible",
                    "Void",
                ];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "InvoiceStatus",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<InvoiceStatus>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for InvoiceStatus {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    InvoiceStatus::Draft => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "InvoiceStatus",
                            0u32,
                            "Draft",
                        )
                    }
                    InvoiceStatus::Open => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "InvoiceStatus",
                            1u32,
                            "Open",
                        )
                    }
                    InvoiceStatus::Paid => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "InvoiceStatus",
                            2u32,
                            "Paid",
                        )
                    }
                    InvoiceStatus::Uncollectible => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "InvoiceStatus",
                            3u32,
                            "Uncollectible",
                        )
                    }
                    InvoiceStatus::Void => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "InvoiceStatus",
                            4u32,
                            "Void",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for InvoiceStatus {
        #[inline]
        fn clone(&self) -> InvoiceStatus {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for InvoiceStatus {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for InvoiceStatus {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for InvoiceStatus {
        #[inline]
        fn eq(&self, other: &InvoiceStatus) -> bool {
            let __self_discr = ::core::intrinsics::discriminant_value(self);
            let __arg1_discr = ::core::intrinsics::discriminant_value(other);
            __self_discr == __arg1_discr
        }
    }
    impl ::core::fmt::Debug for InvoiceStatus {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                InvoiceStatus::Draft => f.debug_tuple("InvoiceStatus::Draft").finish(),
                InvoiceStatus::Open => f.debug_tuple("InvoiceStatus::Open").finish(),
                InvoiceStatus::Paid => f.debug_tuple("InvoiceStatus::Paid").finish(),
                InvoiceStatus::Uncollectible => {
                    f.debug_tuple("InvoiceStatus::Uncollectible").finish()
                }
                InvoiceStatus::Void => f.debug_tuple("InvoiceStatus::Void").finish(),
            }
        }
    }
    pub enum InvoiceitemEventType {
        InvoiceitemCreated,
        InvoiceitemDeleted,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for InvoiceitemEventType {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 2",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "InvoiceitemCreated" => {
                                _serde::__private::Ok(__Field::__field0)
                            }
                            "InvoiceitemDeleted" => {
                                _serde::__private::Ok(__Field::__field1)
                            }
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"InvoiceitemCreated" => {
                                _serde::__private::Ok(__Field::__field0)
                            }
                            b"InvoiceitemDeleted" => {
                                _serde::__private::Ok(__Field::__field1)
                            }
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<InvoiceitemEventType>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = InvoiceitemEventType;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum InvoiceitemEventType",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    InvoiceitemEventType::InvoiceitemCreated,
                                )
                            }
                            (__Field::__field1, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    InvoiceitemEventType::InvoiceitemDeleted,
                                )
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &[
                    "InvoiceitemCreated",
                    "InvoiceitemDeleted",
                ];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "InvoiceitemEventType",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<InvoiceitemEventType>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for InvoiceitemEventType {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    InvoiceitemEventType::InvoiceitemCreated => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "InvoiceitemEventType",
                            0u32,
                            "InvoiceitemCreated",
                        )
                    }
                    InvoiceitemEventType::InvoiceitemDeleted => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "InvoiceitemEventType",
                            1u32,
                            "InvoiceitemDeleted",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for InvoiceitemEventType {
        #[inline]
        fn clone(&self) -> InvoiceitemEventType {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for InvoiceitemEventType {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for InvoiceitemEventType {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for InvoiceitemEventType {
        #[inline]
        fn eq(&self, other: &InvoiceitemEventType) -> bool {
            let __self_discr = ::core::intrinsics::discriminant_value(self);
            let __arg1_discr = ::core::intrinsics::discriminant_value(other);
            __self_discr == __arg1_discr
        }
    }
    impl ::core::fmt::Debug for InvoiceitemEventType {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                InvoiceitemEventType::InvoiceitemCreated => {
                    f.debug_tuple("InvoiceitemEventType::InvoiceitemCreated").finish()
                }
                InvoiceitemEventType::InvoiceitemDeleted => {
                    f.debug_tuple("InvoiceitemEventType::InvoiceitemDeleted").finish()
                }
            }
        }
    }
    #[repr(C)]
    pub struct IssuingAuthorizationAmountDetails {
        pub atm_fee: Option<i32>,
        pub cashback_amount: Option<i32>,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for IssuingAuthorizationAmountDetails {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "atm_fee" => _serde::__private::Ok(__Field::__field0),
                            "cashback_amount" => _serde::__private::Ok(__Field::__field1),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"atm_fee" => _serde::__private::Ok(__Field::__field0),
                            b"cashback_amount" => {
                                _serde::__private::Ok(__Field::__field1)
                            }
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<
                        IssuingAuthorizationAmountDetails,
                    >,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = IssuingAuthorizationAmountDetails;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct IssuingAuthorizationAmountDetails",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match _serde::de::SeqAccess::next_element::<
                            Option<i32>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct IssuingAuthorizationAmountDetails with 2 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match _serde::de::SeqAccess::next_element::<
                            Option<i32>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct IssuingAuthorizationAmountDetails with 2 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(IssuingAuthorizationAmountDetails {
                            atm_fee: __field0,
                            cashback_amount: __field1,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<Option<i32>> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<Option<i32>> = _serde::__private::None;
                        while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                            __Field,
                        >(&mut __map)? {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "atm_fee",
                                            ),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<i32>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "cashback_amount",
                                            ),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<i32>,
                                        >(&mut __map)?,
                                    );
                                }
                                _ => {
                                    let _ = _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map)?;
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("atm_fee")?
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("cashback_amount")?
                            }
                        };
                        _serde::__private::Ok(IssuingAuthorizationAmountDetails {
                            atm_fee: __field0,
                            cashback_amount: __field1,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &["atm_fee", "cashback_amount"];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "IssuingAuthorizationAmountDetails",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<
                            IssuingAuthorizationAmountDetails,
                        >,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for IssuingAuthorizationAmountDetails {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = _serde::Serializer::serialize_struct(
                    __serializer,
                    "IssuingAuthorizationAmountDetails",
                    false as usize + 1 + 1,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "atm_fee",
                    &self.atm_fee,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "cashback_amount",
                    &self.cashback_amount,
                )?;
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for IssuingAuthorizationAmountDetails {
        #[inline]
        fn clone(&self) -> IssuingAuthorizationAmountDetails {
            let _: ::core::clone::AssertParamIsClone<Option<i32>>;
            let _: ::core::clone::AssertParamIsClone<Option<i32>>;
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for IssuingAuthorizationAmountDetails {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for IssuingAuthorizationAmountDetails {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for IssuingAuthorizationAmountDetails {
        #[inline]
        fn eq(&self, other: &IssuingAuthorizationAmountDetails) -> bool {
            self.atm_fee == other.atm_fee
                && self.cashback_amount == other.cashback_amount
        }
    }
    impl ::core::fmt::Debug for IssuingAuthorizationAmountDetails {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("IssuingAuthorizationAmountDetails")
                .field("atm-fee", &self.atm_fee)
                .field("cashback-amount", &self.cashback_amount)
                .finish()
        }
    }
    pub enum IssuingAuthorizationAuthorizationMethod {
        Chip,
        Contactless,
        KeyedIn,
        Online,
        Swipe,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for IssuingAuthorizationAuthorizationMethod {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 5",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "Chip" => _serde::__private::Ok(__Field::__field0),
                            "Contactless" => _serde::__private::Ok(__Field::__field1),
                            "KeyedIn" => _serde::__private::Ok(__Field::__field2),
                            "Online" => _serde::__private::Ok(__Field::__field3),
                            "Swipe" => _serde::__private::Ok(__Field::__field4),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"Chip" => _serde::__private::Ok(__Field::__field0),
                            b"Contactless" => _serde::__private::Ok(__Field::__field1),
                            b"KeyedIn" => _serde::__private::Ok(__Field::__field2),
                            b"Online" => _serde::__private::Ok(__Field::__field3),
                            b"Swipe" => _serde::__private::Ok(__Field::__field4),
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<
                        IssuingAuthorizationAuthorizationMethod,
                    >,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = IssuingAuthorizationAuthorizationMethod;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum IssuingAuthorizationAuthorizationMethod",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    IssuingAuthorizationAuthorizationMethod::Chip,
                                )
                            }
                            (__Field::__field1, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    IssuingAuthorizationAuthorizationMethod::Contactless,
                                )
                            }
                            (__Field::__field2, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    IssuingAuthorizationAuthorizationMethod::KeyedIn,
                                )
                            }
                            (__Field::__field3, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    IssuingAuthorizationAuthorizationMethod::Online,
                                )
                            }
                            (__Field::__field4, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    IssuingAuthorizationAuthorizationMethod::Swipe,
                                )
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &[
                    "Chip",
                    "Contactless",
                    "KeyedIn",
                    "Online",
                    "Swipe",
                ];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "IssuingAuthorizationAuthorizationMethod",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<
                            IssuingAuthorizationAuthorizationMethod,
                        >,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for IssuingAuthorizationAuthorizationMethod {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    IssuingAuthorizationAuthorizationMethod::Chip => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingAuthorizationAuthorizationMethod",
                            0u32,
                            "Chip",
                        )
                    }
                    IssuingAuthorizationAuthorizationMethod::Contactless => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingAuthorizationAuthorizationMethod",
                            1u32,
                            "Contactless",
                        )
                    }
                    IssuingAuthorizationAuthorizationMethod::KeyedIn => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingAuthorizationAuthorizationMethod",
                            2u32,
                            "KeyedIn",
                        )
                    }
                    IssuingAuthorizationAuthorizationMethod::Online => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingAuthorizationAuthorizationMethod",
                            3u32,
                            "Online",
                        )
                    }
                    IssuingAuthorizationAuthorizationMethod::Swipe => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingAuthorizationAuthorizationMethod",
                            4u32,
                            "Swipe",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for IssuingAuthorizationAuthorizationMethod {
        #[inline]
        fn clone(&self) -> IssuingAuthorizationAuthorizationMethod {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for IssuingAuthorizationAuthorizationMethod {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq
    for IssuingAuthorizationAuthorizationMethod {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for IssuingAuthorizationAuthorizationMethod {
        #[inline]
        fn eq(&self, other: &IssuingAuthorizationAuthorizationMethod) -> bool {
            let __self_discr = ::core::intrinsics::discriminant_value(self);
            let __arg1_discr = ::core::intrinsics::discriminant_value(other);
            __self_discr == __arg1_discr
        }
    }
    impl ::core::fmt::Debug for IssuingAuthorizationAuthorizationMethod {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                IssuingAuthorizationAuthorizationMethod::Chip => {
                    f.debug_tuple("IssuingAuthorizationAuthorizationMethod::Chip")
                        .finish()
                }
                IssuingAuthorizationAuthorizationMethod::Contactless => {
                    f.debug_tuple("IssuingAuthorizationAuthorizationMethod::Contactless")
                        .finish()
                }
                IssuingAuthorizationAuthorizationMethod::KeyedIn => {
                    f.debug_tuple("IssuingAuthorizationAuthorizationMethod::KeyedIn")
                        .finish()
                }
                IssuingAuthorizationAuthorizationMethod::Online => {
                    f.debug_tuple("IssuingAuthorizationAuthorizationMethod::Online")
                        .finish()
                }
                IssuingAuthorizationAuthorizationMethod::Swipe => {
                    f.debug_tuple("IssuingAuthorizationAuthorizationMethod::Swipe")
                        .finish()
                }
            }
        }
    }
    pub enum IssuingAuthorizationEventType {
        IssuingAuthorizationCreated,
        IssuingAuthorizationUpdated,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for IssuingAuthorizationEventType {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 2",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "IssuingAuthorizationCreated" => {
                                _serde::__private::Ok(__Field::__field0)
                            }
                            "IssuingAuthorizationUpdated" => {
                                _serde::__private::Ok(__Field::__field1)
                            }
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"IssuingAuthorizationCreated" => {
                                _serde::__private::Ok(__Field::__field0)
                            }
                            b"IssuingAuthorizationUpdated" => {
                                _serde::__private::Ok(__Field::__field1)
                            }
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<
                        IssuingAuthorizationEventType,
                    >,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = IssuingAuthorizationEventType;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum IssuingAuthorizationEventType",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    IssuingAuthorizationEventType::IssuingAuthorizationCreated,
                                )
                            }
                            (__Field::__field1, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    IssuingAuthorizationEventType::IssuingAuthorizationUpdated,
                                )
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &[
                    "IssuingAuthorizationCreated",
                    "IssuingAuthorizationUpdated",
                ];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "IssuingAuthorizationEventType",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<
                            IssuingAuthorizationEventType,
                        >,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for IssuingAuthorizationEventType {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    IssuingAuthorizationEventType::IssuingAuthorizationCreated => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingAuthorizationEventType",
                            0u32,
                            "IssuingAuthorizationCreated",
                        )
                    }
                    IssuingAuthorizationEventType::IssuingAuthorizationUpdated => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingAuthorizationEventType",
                            1u32,
                            "IssuingAuthorizationUpdated",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for IssuingAuthorizationEventType {
        #[inline]
        fn clone(&self) -> IssuingAuthorizationEventType {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for IssuingAuthorizationEventType {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for IssuingAuthorizationEventType {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for IssuingAuthorizationEventType {
        #[inline]
        fn eq(&self, other: &IssuingAuthorizationEventType) -> bool {
            let __self_discr = ::core::intrinsics::discriminant_value(self);
            let __arg1_discr = ::core::intrinsics::discriminant_value(other);
            __self_discr == __arg1_discr
        }
    }
    impl ::core::fmt::Debug for IssuingAuthorizationEventType {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                IssuingAuthorizationEventType::IssuingAuthorizationCreated => {
                    f.debug_tuple(
                            "IssuingAuthorizationEventType::IssuingAuthorizationCreated",
                        )
                        .finish()
                }
                IssuingAuthorizationEventType::IssuingAuthorizationUpdated => {
                    f.debug_tuple(
                            "IssuingAuthorizationEventType::IssuingAuthorizationUpdated",
                        )
                        .finish()
                }
            }
        }
    }
    pub enum IssuingAuthorizationStatus {
        Closed,
        Pending,
        Reversed,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for IssuingAuthorizationStatus {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 3",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "Closed" => _serde::__private::Ok(__Field::__field0),
                            "Pending" => _serde::__private::Ok(__Field::__field1),
                            "Reversed" => _serde::__private::Ok(__Field::__field2),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"Closed" => _serde::__private::Ok(__Field::__field0),
                            b"Pending" => _serde::__private::Ok(__Field::__field1),
                            b"Reversed" => _serde::__private::Ok(__Field::__field2),
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<IssuingAuthorizationStatus>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = IssuingAuthorizationStatus;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum IssuingAuthorizationStatus",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(IssuingAuthorizationStatus::Closed)
                            }
                            (__Field::__field1, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(IssuingAuthorizationStatus::Pending)
                            }
                            (__Field::__field2, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(IssuingAuthorizationStatus::Reversed)
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &[
                    "Closed",
                    "Pending",
                    "Reversed",
                ];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "IssuingAuthorizationStatus",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<
                            IssuingAuthorizationStatus,
                        >,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for IssuingAuthorizationStatus {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    IssuingAuthorizationStatus::Closed => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingAuthorizationStatus",
                            0u32,
                            "Closed",
                        )
                    }
                    IssuingAuthorizationStatus::Pending => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingAuthorizationStatus",
                            1u32,
                            "Pending",
                        )
                    }
                    IssuingAuthorizationStatus::Reversed => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingAuthorizationStatus",
                            2u32,
                            "Reversed",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for IssuingAuthorizationStatus {
        #[inline]
        fn clone(&self) -> IssuingAuthorizationStatus {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for IssuingAuthorizationStatus {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for IssuingAuthorizationStatus {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for IssuingAuthorizationStatus {
        #[inline]
        fn eq(&self, other: &IssuingAuthorizationStatus) -> bool {
            let __self_discr = ::core::intrinsics::discriminant_value(self);
            let __arg1_discr = ::core::intrinsics::discriminant_value(other);
            __self_discr == __arg1_discr
        }
    }
    impl ::core::fmt::Debug for IssuingAuthorizationStatus {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                IssuingAuthorizationStatus::Closed => {
                    f.debug_tuple("IssuingAuthorizationStatus::Closed").finish()
                }
                IssuingAuthorizationStatus::Pending => {
                    f.debug_tuple("IssuingAuthorizationStatus::Pending").finish()
                }
                IssuingAuthorizationStatus::Reversed => {
                    f.debug_tuple("IssuingAuthorizationStatus::Reversed").finish()
                }
            }
        }
    }
    pub enum IssuingCardCancellationReason {
        DesignRejected,
        Lost,
        Stolen,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for IssuingCardCancellationReason {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 3",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "DesignRejected" => _serde::__private::Ok(__Field::__field0),
                            "Lost" => _serde::__private::Ok(__Field::__field1),
                            "Stolen" => _serde::__private::Ok(__Field::__field2),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"DesignRejected" => _serde::__private::Ok(__Field::__field0),
                            b"Lost" => _serde::__private::Ok(__Field::__field1),
                            b"Stolen" => _serde::__private::Ok(__Field::__field2),
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<
                        IssuingCardCancellationReason,
                    >,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = IssuingCardCancellationReason;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum IssuingCardCancellationReason",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    IssuingCardCancellationReason::DesignRejected,
                                )
                            }
                            (__Field::__field1, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(IssuingCardCancellationReason::Lost)
                            }
                            (__Field::__field2, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(IssuingCardCancellationReason::Stolen)
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &[
                    "DesignRejected",
                    "Lost",
                    "Stolen",
                ];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "IssuingCardCancellationReason",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<
                            IssuingCardCancellationReason,
                        >,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for IssuingCardCancellationReason {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    IssuingCardCancellationReason::DesignRejected => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingCardCancellationReason",
                            0u32,
                            "DesignRejected",
                        )
                    }
                    IssuingCardCancellationReason::Lost => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingCardCancellationReason",
                            1u32,
                            "Lost",
                        )
                    }
                    IssuingCardCancellationReason::Stolen => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingCardCancellationReason",
                            2u32,
                            "Stolen",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for IssuingCardCancellationReason {
        #[inline]
        fn clone(&self) -> IssuingCardCancellationReason {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for IssuingCardCancellationReason {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for IssuingCardCancellationReason {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for IssuingCardCancellationReason {
        #[inline]
        fn eq(&self, other: &IssuingCardCancellationReason) -> bool {
            let __self_discr = ::core::intrinsics::discriminant_value(self);
            let __arg1_discr = ::core::intrinsics::discriminant_value(other);
            __self_discr == __arg1_discr
        }
    }
    impl ::core::fmt::Debug for IssuingCardCancellationReason {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                IssuingCardCancellationReason::DesignRejected => {
                    f.debug_tuple("IssuingCardCancellationReason::DesignRejected")
                        .finish()
                }
                IssuingCardCancellationReason::Lost => {
                    f.debug_tuple("IssuingCardCancellationReason::Lost").finish()
                }
                IssuingCardCancellationReason::Stolen => {
                    f.debug_tuple("IssuingCardCancellationReason::Stolen").finish()
                }
            }
        }
    }
    pub struct IssuingCardCardholder {
        pub email: Option<_rt::String>,
        pub id: Option<_rt::String>,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for IssuingCardCardholder {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "email" => _serde::__private::Ok(__Field::__field0),
                            "id" => _serde::__private::Ok(__Field::__field1),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"email" => _serde::__private::Ok(__Field::__field0),
                            b"id" => _serde::__private::Ok(__Field::__field1),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<IssuingCardCardholder>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = IssuingCardCardholder;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct IssuingCardCardholder",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct IssuingCardCardholder with 2 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct IssuingCardCardholder with 2 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(IssuingCardCardholder {
                            email: __field0,
                            id: __field1,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                            __Field,
                        >(&mut __map)? {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("email"),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                _ => {
                                    let _ = _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map)?;
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("email")?
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("id")?
                            }
                        };
                        _serde::__private::Ok(IssuingCardCardholder {
                            email: __field0,
                            id: __field1,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &["email", "id"];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "IssuingCardCardholder",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<IssuingCardCardholder>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for IssuingCardCardholder {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = _serde::Serializer::serialize_struct(
                    __serializer,
                    "IssuingCardCardholder",
                    false as usize + 1 + 1,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "email",
                    &self.email,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for IssuingCardCardholder {
        #[inline]
        fn clone(&self) -> IssuingCardCardholder {
            IssuingCardCardholder {
                email: ::core::clone::Clone::clone(&self.email),
                id: ::core::clone::Clone::clone(&self.id),
            }
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for IssuingCardCardholder {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for IssuingCardCardholder {
        #[inline]
        fn eq(&self, other: &IssuingCardCardholder) -> bool {
            self.email == other.email && self.id == other.id
        }
    }
    impl ::core::fmt::Debug for IssuingCardCardholder {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("IssuingCardCardholder")
                .field("email", &self.email)
                .field("id", &self.id)
                .finish()
        }
    }
    pub enum IssuingCardEventType {
        IssuingCardCreated,
        IssuingCardUpdated,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for IssuingCardEventType {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 2",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "IssuingCardCreated" => {
                                _serde::__private::Ok(__Field::__field0)
                            }
                            "IssuingCardUpdated" => {
                                _serde::__private::Ok(__Field::__field1)
                            }
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"IssuingCardCreated" => {
                                _serde::__private::Ok(__Field::__field0)
                            }
                            b"IssuingCardUpdated" => {
                                _serde::__private::Ok(__Field::__field1)
                            }
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<IssuingCardEventType>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = IssuingCardEventType;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum IssuingCardEventType",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    IssuingCardEventType::IssuingCardCreated,
                                )
                            }
                            (__Field::__field1, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    IssuingCardEventType::IssuingCardUpdated,
                                )
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &[
                    "IssuingCardCreated",
                    "IssuingCardUpdated",
                ];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "IssuingCardEventType",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<IssuingCardEventType>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for IssuingCardEventType {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    IssuingCardEventType::IssuingCardCreated => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingCardEventType",
                            0u32,
                            "IssuingCardCreated",
                        )
                    }
                    IssuingCardEventType::IssuingCardUpdated => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingCardEventType",
                            1u32,
                            "IssuingCardUpdated",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for IssuingCardEventType {
        #[inline]
        fn clone(&self) -> IssuingCardEventType {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for IssuingCardEventType {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for IssuingCardEventType {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for IssuingCardEventType {
        #[inline]
        fn eq(&self, other: &IssuingCardEventType) -> bool {
            let __self_discr = ::core::intrinsics::discriminant_value(self);
            let __arg1_discr = ::core::intrinsics::discriminant_value(other);
            __self_discr == __arg1_discr
        }
    }
    impl ::core::fmt::Debug for IssuingCardEventType {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                IssuingCardEventType::IssuingCardCreated => {
                    f.debug_tuple("IssuingCardEventType::IssuingCardCreated").finish()
                }
                IssuingCardEventType::IssuingCardUpdated => {
                    f.debug_tuple("IssuingCardEventType::IssuingCardUpdated").finish()
                }
            }
        }
    }
    pub enum IssuingCardStatus {
        Active,
        Canceled,
        Inactive,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for IssuingCardStatus {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 3",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "Active" => _serde::__private::Ok(__Field::__field0),
                            "Canceled" => _serde::__private::Ok(__Field::__field1),
                            "Inactive" => _serde::__private::Ok(__Field::__field2),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"Active" => _serde::__private::Ok(__Field::__field0),
                            b"Canceled" => _serde::__private::Ok(__Field::__field1),
                            b"Inactive" => _serde::__private::Ok(__Field::__field2),
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<IssuingCardStatus>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = IssuingCardStatus;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum IssuingCardStatus",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(IssuingCardStatus::Active)
                            }
                            (__Field::__field1, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(IssuingCardStatus::Canceled)
                            }
                            (__Field::__field2, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(IssuingCardStatus::Inactive)
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &[
                    "Active",
                    "Canceled",
                    "Inactive",
                ];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "IssuingCardStatus",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<IssuingCardStatus>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for IssuingCardStatus {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    IssuingCardStatus::Active => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingCardStatus",
                            0u32,
                            "Active",
                        )
                    }
                    IssuingCardStatus::Canceled => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingCardStatus",
                            1u32,
                            "Canceled",
                        )
                    }
                    IssuingCardStatus::Inactive => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingCardStatus",
                            2u32,
                            "Inactive",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for IssuingCardStatus {
        #[inline]
        fn clone(&self) -> IssuingCardStatus {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for IssuingCardStatus {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for IssuingCardStatus {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for IssuingCardStatus {
        #[inline]
        fn eq(&self, other: &IssuingCardStatus) -> bool {
            let __self_discr = ::core::intrinsics::discriminant_value(self);
            let __arg1_discr = ::core::intrinsics::discriminant_value(other);
            __self_discr == __arg1_discr
        }
    }
    impl ::core::fmt::Debug for IssuingCardStatus {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                IssuingCardStatus::Active => {
                    f.debug_tuple("IssuingCardStatus::Active").finish()
                }
                IssuingCardStatus::Canceled => {
                    f.debug_tuple("IssuingCardStatus::Canceled").finish()
                }
                IssuingCardStatus::Inactive => {
                    f.debug_tuple("IssuingCardStatus::Inactive").finish()
                }
            }
        }
    }
    pub enum IssuingCardType {
        Physical,
        Virtual,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for IssuingCardType {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 2",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "Physical" => _serde::__private::Ok(__Field::__field0),
                            "Virtual" => _serde::__private::Ok(__Field::__field1),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"Physical" => _serde::__private::Ok(__Field::__field0),
                            b"Virtual" => _serde::__private::Ok(__Field::__field1),
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<IssuingCardType>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = IssuingCardType;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum IssuingCardType",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(IssuingCardType::Physical)
                            }
                            (__Field::__field1, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(IssuingCardType::Virtual)
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &["Physical", "Virtual"];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "IssuingCardType",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<IssuingCardType>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for IssuingCardType {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    IssuingCardType::Physical => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingCardType",
                            0u32,
                            "Physical",
                        )
                    }
                    IssuingCardType::Virtual => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingCardType",
                            1u32,
                            "Virtual",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for IssuingCardType {
        #[inline]
        fn clone(&self) -> IssuingCardType {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for IssuingCardType {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for IssuingCardType {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for IssuingCardType {
        #[inline]
        fn eq(&self, other: &IssuingCardType) -> bool {
            let __self_discr = ::core::intrinsics::discriminant_value(self);
            let __arg1_discr = ::core::intrinsics::discriminant_value(other);
            __self_discr == __arg1_discr
        }
    }
    impl ::core::fmt::Debug for IssuingCardType {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                IssuingCardType::Physical => {
                    f.debug_tuple("IssuingCardType::Physical").finish()
                }
                IssuingCardType::Virtual => {
                    f.debug_tuple("IssuingCardType::Virtual").finish()
                }
            }
        }
    }
    pub struct IssuingCard {
        pub brand: _rt::String,
        pub cancellation_reason: Option<IssuingCardCancellationReason>,
        pub cardholder: IssuingCardCardholder,
        pub created: i32,
        pub currency: _rt::String,
        pub cvc: Option<_rt::String>,
        pub event_type: IssuingCardEventType,
        pub exp_month: i32,
        pub exp_year: i32,
        pub financial_account: Option<_rt::String>,
        pub id: _rt::String,
        pub last4: _rt::String,
        pub status: IssuingCardStatus,
        pub type_: IssuingCardType,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for IssuingCard {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                    __field7,
                    __field8,
                    __field9,
                    __field10,
                    __field11,
                    __field12,
                    __field13,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            6u64 => _serde::__private::Ok(__Field::__field6),
                            7u64 => _serde::__private::Ok(__Field::__field7),
                            8u64 => _serde::__private::Ok(__Field::__field8),
                            9u64 => _serde::__private::Ok(__Field::__field9),
                            10u64 => _serde::__private::Ok(__Field::__field10),
                            11u64 => _serde::__private::Ok(__Field::__field11),
                            12u64 => _serde::__private::Ok(__Field::__field12),
                            13u64 => _serde::__private::Ok(__Field::__field13),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "brand" => _serde::__private::Ok(__Field::__field0),
                            "cancellation_reason" => {
                                _serde::__private::Ok(__Field::__field1)
                            }
                            "cardholder" => _serde::__private::Ok(__Field::__field2),
                            "created" => _serde::__private::Ok(__Field::__field3),
                            "currency" => _serde::__private::Ok(__Field::__field4),
                            "cvc" => _serde::__private::Ok(__Field::__field5),
                            "event_type" => _serde::__private::Ok(__Field::__field6),
                            "exp_month" => _serde::__private::Ok(__Field::__field7),
                            "exp_year" => _serde::__private::Ok(__Field::__field8),
                            "financial_account" => {
                                _serde::__private::Ok(__Field::__field9)
                            }
                            "id" => _serde::__private::Ok(__Field::__field10),
                            "last4" => _serde::__private::Ok(__Field::__field11),
                            "status" => _serde::__private::Ok(__Field::__field12),
                            "type_" => _serde::__private::Ok(__Field::__field13),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"brand" => _serde::__private::Ok(__Field::__field0),
                            b"cancellation_reason" => {
                                _serde::__private::Ok(__Field::__field1)
                            }
                            b"cardholder" => _serde::__private::Ok(__Field::__field2),
                            b"created" => _serde::__private::Ok(__Field::__field3),
                            b"currency" => _serde::__private::Ok(__Field::__field4),
                            b"cvc" => _serde::__private::Ok(__Field::__field5),
                            b"event_type" => _serde::__private::Ok(__Field::__field6),
                            b"exp_month" => _serde::__private::Ok(__Field::__field7),
                            b"exp_year" => _serde::__private::Ok(__Field::__field8),
                            b"financial_account" => {
                                _serde::__private::Ok(__Field::__field9)
                            }
                            b"id" => _serde::__private::Ok(__Field::__field10),
                            b"last4" => _serde::__private::Ok(__Field::__field11),
                            b"status" => _serde::__private::Ok(__Field::__field12),
                            b"type_" => _serde::__private::Ok(__Field::__field13),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<IssuingCard>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = IssuingCard;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct IssuingCard",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match _serde::de::SeqAccess::next_element::<
                            _rt::String,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct IssuingCard with 14 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match _serde::de::SeqAccess::next_element::<
                            Option<IssuingCardCancellationReason>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct IssuingCard with 14 elements",
                                    ),
                                );
                            }
                        };
                        let __field2 = match _serde::de::SeqAccess::next_element::<
                            IssuingCardCardholder,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        2usize,
                                        &"struct IssuingCard with 14 elements",
                                    ),
                                );
                            }
                        };
                        let __field3 = match _serde::de::SeqAccess::next_element::<
                            i32,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        3usize,
                                        &"struct IssuingCard with 14 elements",
                                    ),
                                );
                            }
                        };
                        let __field4 = match _serde::de::SeqAccess::next_element::<
                            _rt::String,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        4usize,
                                        &"struct IssuingCard with 14 elements",
                                    ),
                                );
                            }
                        };
                        let __field5 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        5usize,
                                        &"struct IssuingCard with 14 elements",
                                    ),
                                );
                            }
                        };
                        let __field6 = match _serde::de::SeqAccess::next_element::<
                            IssuingCardEventType,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        6usize,
                                        &"struct IssuingCard with 14 elements",
                                    ),
                                );
                            }
                        };
                        let __field7 = match _serde::de::SeqAccess::next_element::<
                            i32,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        7usize,
                                        &"struct IssuingCard with 14 elements",
                                    ),
                                );
                            }
                        };
                        let __field8 = match _serde::de::SeqAccess::next_element::<
                            i32,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        8usize,
                                        &"struct IssuingCard with 14 elements",
                                    ),
                                );
                            }
                        };
                        let __field9 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        9usize,
                                        &"struct IssuingCard with 14 elements",
                                    ),
                                );
                            }
                        };
                        let __field10 = match _serde::de::SeqAccess::next_element::<
                            _rt::String,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        10usize,
                                        &"struct IssuingCard with 14 elements",
                                    ),
                                );
                            }
                        };
                        let __field11 = match _serde::de::SeqAccess::next_element::<
                            _rt::String,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        11usize,
                                        &"struct IssuingCard with 14 elements",
                                    ),
                                );
                            }
                        };
                        let __field12 = match _serde::de::SeqAccess::next_element::<
                            IssuingCardStatus,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        12usize,
                                        &"struct IssuingCard with 14 elements",
                                    ),
                                );
                            }
                        };
                        let __field13 = match _serde::de::SeqAccess::next_element::<
                            IssuingCardType,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        13usize,
                                        &"struct IssuingCard with 14 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(IssuingCard {
                            brand: __field0,
                            cancellation_reason: __field1,
                            cardholder: __field2,
                            created: __field3,
                            currency: __field4,
                            cvc: __field5,
                            event_type: __field6,
                            exp_month: __field7,
                            exp_year: __field8,
                            financial_account: __field9,
                            id: __field10,
                            last4: __field11,
                            status: __field12,
                            type_: __field13,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<_rt::String> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<
                            Option<IssuingCardCancellationReason>,
                        > = _serde::__private::None;
                        let mut __field2: _serde::__private::Option<
                            IssuingCardCardholder,
                        > = _serde::__private::None;
                        let mut __field3: _serde::__private::Option<i32> = _serde::__private::None;
                        let mut __field4: _serde::__private::Option<_rt::String> = _serde::__private::None;
                        let mut __field5: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field6: _serde::__private::Option<
                            IssuingCardEventType,
                        > = _serde::__private::None;
                        let mut __field7: _serde::__private::Option<i32> = _serde::__private::None;
                        let mut __field8: _serde::__private::Option<i32> = _serde::__private::None;
                        let mut __field9: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field10: _serde::__private::Option<_rt::String> = _serde::__private::None;
                        let mut __field11: _serde::__private::Option<_rt::String> = _serde::__private::None;
                        let mut __field12: _serde::__private::Option<
                            IssuingCardStatus,
                        > = _serde::__private::None;
                        let mut __field13: _serde::__private::Option<IssuingCardType> = _serde::__private::None;
                        while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                            __Field,
                        >(&mut __map)? {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("brand"),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            _rt::String,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "cancellation_reason",
                                            ),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<IssuingCardCancellationReason>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "cardholder",
                                            ),
                                        );
                                    }
                                    __field2 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            IssuingCardCardholder,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field3 => {
                                    if _serde::__private::Option::is_some(&__field3) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "created",
                                            ),
                                        );
                                    }
                                    __field3 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                    );
                                }
                                __Field::__field4 => {
                                    if _serde::__private::Option::is_some(&__field4) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "currency",
                                            ),
                                        );
                                    }
                                    __field4 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            _rt::String,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field5 => {
                                    if _serde::__private::Option::is_some(&__field5) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("cvc"),
                                        );
                                    }
                                    __field5 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field6 => {
                                    if _serde::__private::Option::is_some(&__field6) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "event_type",
                                            ),
                                        );
                                    }
                                    __field6 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            IssuingCardEventType,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field7 => {
                                    if _serde::__private::Option::is_some(&__field7) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "exp_month",
                                            ),
                                        );
                                    }
                                    __field7 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                    );
                                }
                                __Field::__field8 => {
                                    if _serde::__private::Option::is_some(&__field8) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "exp_year",
                                            ),
                                        );
                                    }
                                    __field8 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                    );
                                }
                                __Field::__field9 => {
                                    if _serde::__private::Option::is_some(&__field9) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "financial_account",
                                            ),
                                        );
                                    }
                                    __field9 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field10 => {
                                    if _serde::__private::Option::is_some(&__field10) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                        );
                                    }
                                    __field10 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            _rt::String,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field11 => {
                                    if _serde::__private::Option::is_some(&__field11) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("last4"),
                                        );
                                    }
                                    __field11 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            _rt::String,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field12 => {
                                    if _serde::__private::Option::is_some(&__field12) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("status"),
                                        );
                                    }
                                    __field12 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            IssuingCardStatus,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field13 => {
                                    if _serde::__private::Option::is_some(&__field13) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("type_"),
                                        );
                                    }
                                    __field13 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            IssuingCardType,
                                        >(&mut __map)?,
                                    );
                                }
                                _ => {
                                    let _ = _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map)?;
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("brand")?
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("cancellation_reason")?
                            }
                        };
                        let __field2 = match __field2 {
                            _serde::__private::Some(__field2) => __field2,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("cardholder")?
                            }
                        };
                        let __field3 = match __field3 {
                            _serde::__private::Some(__field3) => __field3,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("created")?
                            }
                        };
                        let __field4 = match __field4 {
                            _serde::__private::Some(__field4) => __field4,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("currency")?
                            }
                        };
                        let __field5 = match __field5 {
                            _serde::__private::Some(__field5) => __field5,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("cvc")?
                            }
                        };
                        let __field6 = match __field6 {
                            _serde::__private::Some(__field6) => __field6,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("event_type")?
                            }
                        };
                        let __field7 = match __field7 {
                            _serde::__private::Some(__field7) => __field7,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("exp_month")?
                            }
                        };
                        let __field8 = match __field8 {
                            _serde::__private::Some(__field8) => __field8,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("exp_year")?
                            }
                        };
                        let __field9 = match __field9 {
                            _serde::__private::Some(__field9) => __field9,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("financial_account")?
                            }
                        };
                        let __field10 = match __field10 {
                            _serde::__private::Some(__field10) => __field10,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("id")?
                            }
                        };
                        let __field11 = match __field11 {
                            _serde::__private::Some(__field11) => __field11,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("last4")?
                            }
                        };
                        let __field12 = match __field12 {
                            _serde::__private::Some(__field12) => __field12,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("status")?
                            }
                        };
                        let __field13 = match __field13 {
                            _serde::__private::Some(__field13) => __field13,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("type_")?
                            }
                        };
                        _serde::__private::Ok(IssuingCard {
                            brand: __field0,
                            cancellation_reason: __field1,
                            cardholder: __field2,
                            created: __field3,
                            currency: __field4,
                            cvc: __field5,
                            event_type: __field6,
                            exp_month: __field7,
                            exp_year: __field8,
                            financial_account: __field9,
                            id: __field10,
                            last4: __field11,
                            status: __field12,
                            type_: __field13,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &[
                    "brand",
                    "cancellation_reason",
                    "cardholder",
                    "created",
                    "currency",
                    "cvc",
                    "event_type",
                    "exp_month",
                    "exp_year",
                    "financial_account",
                    "id",
                    "last4",
                    "status",
                    "type_",
                ];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "IssuingCard",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<IssuingCard>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for IssuingCard {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = _serde::Serializer::serialize_struct(
                    __serializer,
                    "IssuingCard",
                    false as usize + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
                        + 1,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "brand",
                    &self.brand,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "cancellation_reason",
                    &self.cancellation_reason,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "cardholder",
                    &self.cardholder,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "created",
                    &self.created,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "currency",
                    &self.currency,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "cvc",
                    &self.cvc,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "event_type",
                    &self.event_type,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "exp_month",
                    &self.exp_month,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "exp_year",
                    &self.exp_year,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "financial_account",
                    &self.financial_account,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "last4",
                    &self.last4,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "status",
                    &self.status,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "type_",
                    &self.type_,
                )?;
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for IssuingCard {
        #[inline]
        fn clone(&self) -> IssuingCard {
            IssuingCard {
                brand: ::core::clone::Clone::clone(&self.brand),
                cancellation_reason: ::core::clone::Clone::clone(
                    &self.cancellation_reason,
                ),
                cardholder: ::core::clone::Clone::clone(&self.cardholder),
                created: ::core::clone::Clone::clone(&self.created),
                currency: ::core::clone::Clone::clone(&self.currency),
                cvc: ::core::clone::Clone::clone(&self.cvc),
                event_type: ::core::clone::Clone::clone(&self.event_type),
                exp_month: ::core::clone::Clone::clone(&self.exp_month),
                exp_year: ::core::clone::Clone::clone(&self.exp_year),
                financial_account: ::core::clone::Clone::clone(&self.financial_account),
                id: ::core::clone::Clone::clone(&self.id),
                last4: ::core::clone::Clone::clone(&self.last4),
                status: ::core::clone::Clone::clone(&self.status),
                type_: ::core::clone::Clone::clone(&self.type_),
            }
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for IssuingCard {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for IssuingCard {
        #[inline]
        fn eq(&self, other: &IssuingCard) -> bool {
            self.brand == other.brand
                && self.cancellation_reason == other.cancellation_reason
                && self.cardholder == other.cardholder && self.created == other.created
                && self.currency == other.currency && self.cvc == other.cvc
                && self.event_type == other.event_type
                && self.exp_month == other.exp_month && self.exp_year == other.exp_year
                && self.financial_account == other.financial_account
                && self.id == other.id && self.last4 == other.last4
                && self.status == other.status && self.type_ == other.type_
        }
    }
    impl ::core::fmt::Debug for IssuingCard {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("IssuingCard")
                .field("brand", &self.brand)
                .field("cancellation-reason", &self.cancellation_reason)
                .field("cardholder", &self.cardholder)
                .field("created", &self.created)
                .field("currency", &self.currency)
                .field("cvc", &self.cvc)
                .field("event-type", &self.event_type)
                .field("exp-month", &self.exp_month)
                .field("exp-year", &self.exp_year)
                .field("financial-account", &self.financial_account)
                .field("id", &self.id)
                .field("last4", &self.last4)
                .field("status", &self.status)
                .field("type", &self.type_)
                .finish()
        }
    }
    #[repr(C)]
    pub struct IssuingCardholderDob {
        pub day: Option<i32>,
        pub month: Option<i32>,
        pub year: Option<i32>,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for IssuingCardholderDob {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "day" => _serde::__private::Ok(__Field::__field0),
                            "month" => _serde::__private::Ok(__Field::__field1),
                            "year" => _serde::__private::Ok(__Field::__field2),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"day" => _serde::__private::Ok(__Field::__field0),
                            b"month" => _serde::__private::Ok(__Field::__field1),
                            b"year" => _serde::__private::Ok(__Field::__field2),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<IssuingCardholderDob>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = IssuingCardholderDob;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct IssuingCardholderDob",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match _serde::de::SeqAccess::next_element::<
                            Option<i32>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct IssuingCardholderDob with 3 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match _serde::de::SeqAccess::next_element::<
                            Option<i32>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct IssuingCardholderDob with 3 elements",
                                    ),
                                );
                            }
                        };
                        let __field2 = match _serde::de::SeqAccess::next_element::<
                            Option<i32>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        2usize,
                                        &"struct IssuingCardholderDob with 3 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(IssuingCardholderDob {
                            day: __field0,
                            month: __field1,
                            year: __field2,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<Option<i32>> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<Option<i32>> = _serde::__private::None;
                        let mut __field2: _serde::__private::Option<Option<i32>> = _serde::__private::None;
                        while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                            __Field,
                        >(&mut __map)? {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("day"),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<i32>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("month"),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<i32>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("year"),
                                        );
                                    }
                                    __field2 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<i32>,
                                        >(&mut __map)?,
                                    );
                                }
                                _ => {
                                    let _ = _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map)?;
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("day")?
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("month")?
                            }
                        };
                        let __field2 = match __field2 {
                            _serde::__private::Some(__field2) => __field2,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("year")?
                            }
                        };
                        _serde::__private::Ok(IssuingCardholderDob {
                            day: __field0,
                            month: __field1,
                            year: __field2,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &["day", "month", "year"];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "IssuingCardholderDob",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<IssuingCardholderDob>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for IssuingCardholderDob {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = _serde::Serializer::serialize_struct(
                    __serializer,
                    "IssuingCardholderDob",
                    false as usize + 1 + 1 + 1,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "day",
                    &self.day,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "month",
                    &self.month,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "year",
                    &self.year,
                )?;
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for IssuingCardholderDob {
        #[inline]
        fn clone(&self) -> IssuingCardholderDob {
            let _: ::core::clone::AssertParamIsClone<Option<i32>>;
            let _: ::core::clone::AssertParamIsClone<Option<i32>>;
            let _: ::core::clone::AssertParamIsClone<Option<i32>>;
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for IssuingCardholderDob {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for IssuingCardholderDob {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for IssuingCardholderDob {
        #[inline]
        fn eq(&self, other: &IssuingCardholderDob) -> bool {
            self.day == other.day && self.month == other.month && self.year == other.year
        }
    }
    impl ::core::fmt::Debug for IssuingCardholderDob {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("IssuingCardholderDob")
                .field("day", &self.day)
                .field("month", &self.month)
                .field("year", &self.year)
                .finish()
        }
    }
    pub enum IssuingCardholderEventType {
        IssuingCardholderCreated,
        IssuingCardholderUpdated,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for IssuingCardholderEventType {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 2",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "IssuingCardholderCreated" => {
                                _serde::__private::Ok(__Field::__field0)
                            }
                            "IssuingCardholderUpdated" => {
                                _serde::__private::Ok(__Field::__field1)
                            }
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"IssuingCardholderCreated" => {
                                _serde::__private::Ok(__Field::__field0)
                            }
                            b"IssuingCardholderUpdated" => {
                                _serde::__private::Ok(__Field::__field1)
                            }
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<IssuingCardholderEventType>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = IssuingCardholderEventType;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum IssuingCardholderEventType",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    IssuingCardholderEventType::IssuingCardholderCreated,
                                )
                            }
                            (__Field::__field1, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    IssuingCardholderEventType::IssuingCardholderUpdated,
                                )
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &[
                    "IssuingCardholderCreated",
                    "IssuingCardholderUpdated",
                ];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "IssuingCardholderEventType",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<
                            IssuingCardholderEventType,
                        >,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for IssuingCardholderEventType {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    IssuingCardholderEventType::IssuingCardholderCreated => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingCardholderEventType",
                            0u32,
                            "IssuingCardholderCreated",
                        )
                    }
                    IssuingCardholderEventType::IssuingCardholderUpdated => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingCardholderEventType",
                            1u32,
                            "IssuingCardholderUpdated",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for IssuingCardholderEventType {
        #[inline]
        fn clone(&self) -> IssuingCardholderEventType {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for IssuingCardholderEventType {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for IssuingCardholderEventType {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for IssuingCardholderEventType {
        #[inline]
        fn eq(&self, other: &IssuingCardholderEventType) -> bool {
            let __self_discr = ::core::intrinsics::discriminant_value(self);
            let __arg1_discr = ::core::intrinsics::discriminant_value(other);
            __self_discr == __arg1_discr
        }
    }
    impl ::core::fmt::Debug for IssuingCardholderEventType {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                IssuingCardholderEventType::IssuingCardholderCreated => {
                    f.debug_tuple("IssuingCardholderEventType::IssuingCardholderCreated")
                        .finish()
                }
                IssuingCardholderEventType::IssuingCardholderUpdated => {
                    f.debug_tuple("IssuingCardholderEventType::IssuingCardholderUpdated")
                        .finish()
                }
            }
        }
    }
    pub struct IssuingCardholderIndividual {
        pub dob: Option<IssuingCardholderDob>,
        pub first_name: Option<_rt::String>,
        pub last_name: Option<_rt::String>,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for IssuingCardholderIndividual {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "dob" => _serde::__private::Ok(__Field::__field0),
                            "first_name" => _serde::__private::Ok(__Field::__field1),
                            "last_name" => _serde::__private::Ok(__Field::__field2),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"dob" => _serde::__private::Ok(__Field::__field0),
                            b"first_name" => _serde::__private::Ok(__Field::__field1),
                            b"last_name" => _serde::__private::Ok(__Field::__field2),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<IssuingCardholderIndividual>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = IssuingCardholderIndividual;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct IssuingCardholderIndividual",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match _serde::de::SeqAccess::next_element::<
                            Option<IssuingCardholderDob>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct IssuingCardholderIndividual with 3 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct IssuingCardholderIndividual with 3 elements",
                                    ),
                                );
                            }
                        };
                        let __field2 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        2usize,
                                        &"struct IssuingCardholderIndividual with 3 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(IssuingCardholderIndividual {
                            dob: __field0,
                            first_name: __field1,
                            last_name: __field2,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<
                            Option<IssuingCardholderDob>,
                        > = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field2: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                            __Field,
                        >(&mut __map)? {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("dob"),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<IssuingCardholderDob>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "first_name",
                                            ),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "last_name",
                                            ),
                                        );
                                    }
                                    __field2 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                _ => {
                                    let _ = _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map)?;
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("dob")?
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("first_name")?
                            }
                        };
                        let __field2 = match __field2 {
                            _serde::__private::Some(__field2) => __field2,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("last_name")?
                            }
                        };
                        _serde::__private::Ok(IssuingCardholderIndividual {
                            dob: __field0,
                            first_name: __field1,
                            last_name: __field2,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &[
                    "dob",
                    "first_name",
                    "last_name",
                ];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "IssuingCardholderIndividual",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<
                            IssuingCardholderIndividual,
                        >,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for IssuingCardholderIndividual {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = _serde::Serializer::serialize_struct(
                    __serializer,
                    "IssuingCardholderIndividual",
                    false as usize + 1 + 1 + 1,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "dob",
                    &self.dob,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "first_name",
                    &self.first_name,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "last_name",
                    &self.last_name,
                )?;
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for IssuingCardholderIndividual {
        #[inline]
        fn clone(&self) -> IssuingCardholderIndividual {
            IssuingCardholderIndividual {
                dob: ::core::clone::Clone::clone(&self.dob),
                first_name: ::core::clone::Clone::clone(&self.first_name),
                last_name: ::core::clone::Clone::clone(&self.last_name),
            }
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for IssuingCardholderIndividual {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for IssuingCardholderIndividual {
        #[inline]
        fn eq(&self, other: &IssuingCardholderIndividual) -> bool {
            self.dob == other.dob && self.first_name == other.first_name
                && self.last_name == other.last_name
        }
    }
    impl ::core::fmt::Debug for IssuingCardholderIndividual {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("IssuingCardholderIndividual")
                .field("dob", &self.dob)
                .field("first-name", &self.first_name)
                .field("last-name", &self.last_name)
                .finish()
        }
    }
    pub enum IssuingCardholderStatus {
        Active,
        Blocked,
        Inactive,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for IssuingCardholderStatus {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 3",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "Active" => _serde::__private::Ok(__Field::__field0),
                            "Blocked" => _serde::__private::Ok(__Field::__field1),
                            "Inactive" => _serde::__private::Ok(__Field::__field2),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"Active" => _serde::__private::Ok(__Field::__field0),
                            b"Blocked" => _serde::__private::Ok(__Field::__field1),
                            b"Inactive" => _serde::__private::Ok(__Field::__field2),
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<IssuingCardholderStatus>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = IssuingCardholderStatus;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum IssuingCardholderStatus",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(IssuingCardholderStatus::Active)
                            }
                            (__Field::__field1, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(IssuingCardholderStatus::Blocked)
                            }
                            (__Field::__field2, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(IssuingCardholderStatus::Inactive)
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &[
                    "Active",
                    "Blocked",
                    "Inactive",
                ];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "IssuingCardholderStatus",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<
                            IssuingCardholderStatus,
                        >,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for IssuingCardholderStatus {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    IssuingCardholderStatus::Active => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingCardholderStatus",
                            0u32,
                            "Active",
                        )
                    }
                    IssuingCardholderStatus::Blocked => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingCardholderStatus",
                            1u32,
                            "Blocked",
                        )
                    }
                    IssuingCardholderStatus::Inactive => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingCardholderStatus",
                            2u32,
                            "Inactive",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for IssuingCardholderStatus {
        #[inline]
        fn clone(&self) -> IssuingCardholderStatus {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for IssuingCardholderStatus {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for IssuingCardholderStatus {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for IssuingCardholderStatus {
        #[inline]
        fn eq(&self, other: &IssuingCardholderStatus) -> bool {
            let __self_discr = ::core::intrinsics::discriminant_value(self);
            let __arg1_discr = ::core::intrinsics::discriminant_value(other);
            __self_discr == __arg1_discr
        }
    }
    impl ::core::fmt::Debug for IssuingCardholderStatus {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                IssuingCardholderStatus::Active => {
                    f.debug_tuple("IssuingCardholderStatus::Active").finish()
                }
                IssuingCardholderStatus::Blocked => {
                    f.debug_tuple("IssuingCardholderStatus::Blocked").finish()
                }
                IssuingCardholderStatus::Inactive => {
                    f.debug_tuple("IssuingCardholderStatus::Inactive").finish()
                }
            }
        }
    }
    pub enum IssuingCardholderType {
        Company,
        Individual,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for IssuingCardholderType {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 2",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "Company" => _serde::__private::Ok(__Field::__field0),
                            "Individual" => _serde::__private::Ok(__Field::__field1),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"Company" => _serde::__private::Ok(__Field::__field0),
                            b"Individual" => _serde::__private::Ok(__Field::__field1),
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<IssuingCardholderType>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = IssuingCardholderType;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum IssuingCardholderType",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(IssuingCardholderType::Company)
                            }
                            (__Field::__field1, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(IssuingCardholderType::Individual)
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &["Company", "Individual"];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "IssuingCardholderType",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<IssuingCardholderType>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for IssuingCardholderType {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    IssuingCardholderType::Company => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingCardholderType",
                            0u32,
                            "Company",
                        )
                    }
                    IssuingCardholderType::Individual => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingCardholderType",
                            1u32,
                            "Individual",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for IssuingCardholderType {
        #[inline]
        fn clone(&self) -> IssuingCardholderType {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for IssuingCardholderType {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for IssuingCardholderType {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for IssuingCardholderType {
        #[inline]
        fn eq(&self, other: &IssuingCardholderType) -> bool {
            let __self_discr = ::core::intrinsics::discriminant_value(self);
            let __arg1_discr = ::core::intrinsics::discriminant_value(other);
            __self_discr == __arg1_discr
        }
    }
    impl ::core::fmt::Debug for IssuingCardholderType {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                IssuingCardholderType::Company => {
                    f.debug_tuple("IssuingCardholderType::Company").finish()
                }
                IssuingCardholderType::Individual => {
                    f.debug_tuple("IssuingCardholderType::Individual").finish()
                }
            }
        }
    }
    pub struct IssuingCardholder {
        pub billing: Address,
        pub created: i32,
        pub email: Option<_rt::String>,
        pub event_type: IssuingCardholderEventType,
        pub id: _rt::String,
        pub individual: Option<IssuingCardholderIndividual>,
        pub name: _rt::String,
        pub phone_number: Option<_rt::String>,
        pub status: IssuingCardholderStatus,
        pub type_: IssuingCardholderType,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for IssuingCardholder {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                    __field7,
                    __field8,
                    __field9,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            6u64 => _serde::__private::Ok(__Field::__field6),
                            7u64 => _serde::__private::Ok(__Field::__field7),
                            8u64 => _serde::__private::Ok(__Field::__field8),
                            9u64 => _serde::__private::Ok(__Field::__field9),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "billing" => _serde::__private::Ok(__Field::__field0),
                            "created" => _serde::__private::Ok(__Field::__field1),
                            "email" => _serde::__private::Ok(__Field::__field2),
                            "event_type" => _serde::__private::Ok(__Field::__field3),
                            "id" => _serde::__private::Ok(__Field::__field4),
                            "individual" => _serde::__private::Ok(__Field::__field5),
                            "name" => _serde::__private::Ok(__Field::__field6),
                            "phone_number" => _serde::__private::Ok(__Field::__field7),
                            "status" => _serde::__private::Ok(__Field::__field8),
                            "type_" => _serde::__private::Ok(__Field::__field9),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"billing" => _serde::__private::Ok(__Field::__field0),
                            b"created" => _serde::__private::Ok(__Field::__field1),
                            b"email" => _serde::__private::Ok(__Field::__field2),
                            b"event_type" => _serde::__private::Ok(__Field::__field3),
                            b"id" => _serde::__private::Ok(__Field::__field4),
                            b"individual" => _serde::__private::Ok(__Field::__field5),
                            b"name" => _serde::__private::Ok(__Field::__field6),
                            b"phone_number" => _serde::__private::Ok(__Field::__field7),
                            b"status" => _serde::__private::Ok(__Field::__field8),
                            b"type_" => _serde::__private::Ok(__Field::__field9),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<IssuingCardholder>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = IssuingCardholder;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct IssuingCardholder",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match _serde::de::SeqAccess::next_element::<
                            Address,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct IssuingCardholder with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match _serde::de::SeqAccess::next_element::<
                            i32,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct IssuingCardholder with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field2 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        2usize,
                                        &"struct IssuingCardholder with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field3 = match _serde::de::SeqAccess::next_element::<
                            IssuingCardholderEventType,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        3usize,
                                        &"struct IssuingCardholder with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field4 = match _serde::de::SeqAccess::next_element::<
                            _rt::String,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        4usize,
                                        &"struct IssuingCardholder with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field5 = match _serde::de::SeqAccess::next_element::<
                            Option<IssuingCardholderIndividual>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        5usize,
                                        &"struct IssuingCardholder with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field6 = match _serde::de::SeqAccess::next_element::<
                            _rt::String,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        6usize,
                                        &"struct IssuingCardholder with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field7 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        7usize,
                                        &"struct IssuingCardholder with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field8 = match _serde::de::SeqAccess::next_element::<
                            IssuingCardholderStatus,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        8usize,
                                        &"struct IssuingCardholder with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field9 = match _serde::de::SeqAccess::next_element::<
                            IssuingCardholderType,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        9usize,
                                        &"struct IssuingCardholder with 10 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(IssuingCardholder {
                            billing: __field0,
                            created: __field1,
                            email: __field2,
                            event_type: __field3,
                            id: __field4,
                            individual: __field5,
                            name: __field6,
                            phone_number: __field7,
                            status: __field8,
                            type_: __field9,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<Address> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<i32> = _serde::__private::None;
                        let mut __field2: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field3: _serde::__private::Option<
                            IssuingCardholderEventType,
                        > = _serde::__private::None;
                        let mut __field4: _serde::__private::Option<_rt::String> = _serde::__private::None;
                        let mut __field5: _serde::__private::Option<
                            Option<IssuingCardholderIndividual>,
                        > = _serde::__private::None;
                        let mut __field6: _serde::__private::Option<_rt::String> = _serde::__private::None;
                        let mut __field7: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field8: _serde::__private::Option<
                            IssuingCardholderStatus,
                        > = _serde::__private::None;
                        let mut __field9: _serde::__private::Option<
                            IssuingCardholderType,
                        > = _serde::__private::None;
                        while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                            __Field,
                        >(&mut __map)? {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "billing",
                                            ),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<Address>(&mut __map)?,
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "created",
                                            ),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                    );
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("email"),
                                        );
                                    }
                                    __field2 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field3 => {
                                    if _serde::__private::Option::is_some(&__field3) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "event_type",
                                            ),
                                        );
                                    }
                                    __field3 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            IssuingCardholderEventType,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field4 => {
                                    if _serde::__private::Option::is_some(&__field4) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                        );
                                    }
                                    __field4 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            _rt::String,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field5 => {
                                    if _serde::__private::Option::is_some(&__field5) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "individual",
                                            ),
                                        );
                                    }
                                    __field5 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<IssuingCardholderIndividual>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field6 => {
                                    if _serde::__private::Option::is_some(&__field6) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("name"),
                                        );
                                    }
                                    __field6 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            _rt::String,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field7 => {
                                    if _serde::__private::Option::is_some(&__field7) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "phone_number",
                                            ),
                                        );
                                    }
                                    __field7 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field8 => {
                                    if _serde::__private::Option::is_some(&__field8) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("status"),
                                        );
                                    }
                                    __field8 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            IssuingCardholderStatus,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field9 => {
                                    if _serde::__private::Option::is_some(&__field9) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("type_"),
                                        );
                                    }
                                    __field9 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            IssuingCardholderType,
                                        >(&mut __map)?,
                                    );
                                }
                                _ => {
                                    let _ = _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map)?;
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("billing")?
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("created")?
                            }
                        };
                        let __field2 = match __field2 {
                            _serde::__private::Some(__field2) => __field2,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("email")?
                            }
                        };
                        let __field3 = match __field3 {
                            _serde::__private::Some(__field3) => __field3,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("event_type")?
                            }
                        };
                        let __field4 = match __field4 {
                            _serde::__private::Some(__field4) => __field4,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("id")?
                            }
                        };
                        let __field5 = match __field5 {
                            _serde::__private::Some(__field5) => __field5,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("individual")?
                            }
                        };
                        let __field6 = match __field6 {
                            _serde::__private::Some(__field6) => __field6,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("name")?
                            }
                        };
                        let __field7 = match __field7 {
                            _serde::__private::Some(__field7) => __field7,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("phone_number")?
                            }
                        };
                        let __field8 = match __field8 {
                            _serde::__private::Some(__field8) => __field8,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("status")?
                            }
                        };
                        let __field9 = match __field9 {
                            _serde::__private::Some(__field9) => __field9,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("type_")?
                            }
                        };
                        _serde::__private::Ok(IssuingCardholder {
                            billing: __field0,
                            created: __field1,
                            email: __field2,
                            event_type: __field3,
                            id: __field4,
                            individual: __field5,
                            name: __field6,
                            phone_number: __field7,
                            status: __field8,
                            type_: __field9,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &[
                    "billing",
                    "created",
                    "email",
                    "event_type",
                    "id",
                    "individual",
                    "name",
                    "phone_number",
                    "status",
                    "type_",
                ];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "IssuingCardholder",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<IssuingCardholder>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for IssuingCardholder {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = _serde::Serializer::serialize_struct(
                    __serializer,
                    "IssuingCardholder",
                    false as usize + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "billing",
                    &self.billing,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "created",
                    &self.created,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "email",
                    &self.email,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "event_type",
                    &self.event_type,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "individual",
                    &self.individual,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "name",
                    &self.name,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "phone_number",
                    &self.phone_number,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "status",
                    &self.status,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "type_",
                    &self.type_,
                )?;
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for IssuingCardholder {
        #[inline]
        fn clone(&self) -> IssuingCardholder {
            IssuingCardholder {
                billing: ::core::clone::Clone::clone(&self.billing),
                created: ::core::clone::Clone::clone(&self.created),
                email: ::core::clone::Clone::clone(&self.email),
                event_type: ::core::clone::Clone::clone(&self.event_type),
                id: ::core::clone::Clone::clone(&self.id),
                individual: ::core::clone::Clone::clone(&self.individual),
                name: ::core::clone::Clone::clone(&self.name),
                phone_number: ::core::clone::Clone::clone(&self.phone_number),
                status: ::core::clone::Clone::clone(&self.status),
                type_: ::core::clone::Clone::clone(&self.type_),
            }
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for IssuingCardholder {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for IssuingCardholder {
        #[inline]
        fn eq(&self, other: &IssuingCardholder) -> bool {
            self.billing == other.billing && self.created == other.created
                && self.email == other.email && self.event_type == other.event_type
                && self.id == other.id && self.individual == other.individual
                && self.name == other.name && self.phone_number == other.phone_number
                && self.status == other.status && self.type_ == other.type_
        }
    }
    impl ::core::fmt::Debug for IssuingCardholder {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("IssuingCardholder")
                .field("billing", &self.billing)
                .field("created", &self.created)
                .field("email", &self.email)
                .field("event-type", &self.event_type)
                .field("id", &self.id)
                .field("individual", &self.individual)
                .field("name", &self.name)
                .field("phone-number", &self.phone_number)
                .field("status", &self.status)
                .field("type", &self.type_)
                .finish()
        }
    }
    pub enum IssuingDisputeEventType {
        IssuingDisputeClosed,
        IssuingDisputeCreated,
        IssuingDisputeFundsReinstated,
        IssuingDisputeFundsRescinded,
        IssuingDisputeSubmitted,
        IssuingDisputeUpdated,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for IssuingDisputeEventType {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 6",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "IssuingDisputeClosed" => {
                                _serde::__private::Ok(__Field::__field0)
                            }
                            "IssuingDisputeCreated" => {
                                _serde::__private::Ok(__Field::__field1)
                            }
                            "IssuingDisputeFundsReinstated" => {
                                _serde::__private::Ok(__Field::__field2)
                            }
                            "IssuingDisputeFundsRescinded" => {
                                _serde::__private::Ok(__Field::__field3)
                            }
                            "IssuingDisputeSubmitted" => {
                                _serde::__private::Ok(__Field::__field4)
                            }
                            "IssuingDisputeUpdated" => {
                                _serde::__private::Ok(__Field::__field5)
                            }
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"IssuingDisputeClosed" => {
                                _serde::__private::Ok(__Field::__field0)
                            }
                            b"IssuingDisputeCreated" => {
                                _serde::__private::Ok(__Field::__field1)
                            }
                            b"IssuingDisputeFundsReinstated" => {
                                _serde::__private::Ok(__Field::__field2)
                            }
                            b"IssuingDisputeFundsRescinded" => {
                                _serde::__private::Ok(__Field::__field3)
                            }
                            b"IssuingDisputeSubmitted" => {
                                _serde::__private::Ok(__Field::__field4)
                            }
                            b"IssuingDisputeUpdated" => {
                                _serde::__private::Ok(__Field::__field5)
                            }
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<IssuingDisputeEventType>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = IssuingDisputeEventType;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum IssuingDisputeEventType",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    IssuingDisputeEventType::IssuingDisputeClosed,
                                )
                            }
                            (__Field::__field1, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    IssuingDisputeEventType::IssuingDisputeCreated,
                                )
                            }
                            (__Field::__field2, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    IssuingDisputeEventType::IssuingDisputeFundsReinstated,
                                )
                            }
                            (__Field::__field3, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    IssuingDisputeEventType::IssuingDisputeFundsRescinded,
                                )
                            }
                            (__Field::__field4, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    IssuingDisputeEventType::IssuingDisputeSubmitted,
                                )
                            }
                            (__Field::__field5, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    IssuingDisputeEventType::IssuingDisputeUpdated,
                                )
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &[
                    "IssuingDisputeClosed",
                    "IssuingDisputeCreated",
                    "IssuingDisputeFundsReinstated",
                    "IssuingDisputeFundsRescinded",
                    "IssuingDisputeSubmitted",
                    "IssuingDisputeUpdated",
                ];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "IssuingDisputeEventType",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<
                            IssuingDisputeEventType,
                        >,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for IssuingDisputeEventType {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    IssuingDisputeEventType::IssuingDisputeClosed => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingDisputeEventType",
                            0u32,
                            "IssuingDisputeClosed",
                        )
                    }
                    IssuingDisputeEventType::IssuingDisputeCreated => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingDisputeEventType",
                            1u32,
                            "IssuingDisputeCreated",
                        )
                    }
                    IssuingDisputeEventType::IssuingDisputeFundsReinstated => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingDisputeEventType",
                            2u32,
                            "IssuingDisputeFundsReinstated",
                        )
                    }
                    IssuingDisputeEventType::IssuingDisputeFundsRescinded => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingDisputeEventType",
                            3u32,
                            "IssuingDisputeFundsRescinded",
                        )
                    }
                    IssuingDisputeEventType::IssuingDisputeSubmitted => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingDisputeEventType",
                            4u32,
                            "IssuingDisputeSubmitted",
                        )
                    }
                    IssuingDisputeEventType::IssuingDisputeUpdated => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingDisputeEventType",
                            5u32,
                            "IssuingDisputeUpdated",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for IssuingDisputeEventType {
        #[inline]
        fn clone(&self) -> IssuingDisputeEventType {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for IssuingDisputeEventType {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for IssuingDisputeEventType {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for IssuingDisputeEventType {
        #[inline]
        fn eq(&self, other: &IssuingDisputeEventType) -> bool {
            let __self_discr = ::core::intrinsics::discriminant_value(self);
            let __arg1_discr = ::core::intrinsics::discriminant_value(other);
            __self_discr == __arg1_discr
        }
    }
    impl ::core::fmt::Debug for IssuingDisputeEventType {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                IssuingDisputeEventType::IssuingDisputeClosed => {
                    f.debug_tuple("IssuingDisputeEventType::IssuingDisputeClosed")
                        .finish()
                }
                IssuingDisputeEventType::IssuingDisputeCreated => {
                    f.debug_tuple("IssuingDisputeEventType::IssuingDisputeCreated")
                        .finish()
                }
                IssuingDisputeEventType::IssuingDisputeFundsReinstated => {
                    f.debug_tuple(
                            "IssuingDisputeEventType::IssuingDisputeFundsReinstated",
                        )
                        .finish()
                }
                IssuingDisputeEventType::IssuingDisputeFundsRescinded => {
                    f.debug_tuple(
                            "IssuingDisputeEventType::IssuingDisputeFundsRescinded",
                        )
                        .finish()
                }
                IssuingDisputeEventType::IssuingDisputeSubmitted => {
                    f.debug_tuple("IssuingDisputeEventType::IssuingDisputeSubmitted")
                        .finish()
                }
                IssuingDisputeEventType::IssuingDisputeUpdated => {
                    f.debug_tuple("IssuingDisputeEventType::IssuingDisputeUpdated")
                        .finish()
                }
            }
        }
    }
    pub enum IssuingDisputeLossReason {
        CardholderAuthenticationIssuerLiability,
        EcifiveTokenTransactionWithTavv,
        ExcessDisputesInTimeframe,
        HasNotMetTheMinimumDisputeAmountRequirements,
        InvalidDuplicateDispute,
        InvalidIncorrectAmountDispute,
        InvalidNoAuthorization,
        InvalidUseOfDisputes,
        MerchandiseDeliveredOrShipped,
        MerchandiseOrServiceAsDescribed,
        NotCancelled,
        Other,
        RefundIssued,
        SubmittedBeyondAllowableTimeLimit,
        TransactionApprovedAfterPriorFraudDispute,
        TransactionAuthorized,
        TransactionElectronicallyRead,
        TransactionQualifiesForVisaEasyPaymentService,
        TransactionThreeDsRequired,
        TransactionUnattended,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for IssuingDisputeLossReason {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                    __field7,
                    __field8,
                    __field9,
                    __field10,
                    __field11,
                    __field12,
                    __field13,
                    __field14,
                    __field15,
                    __field16,
                    __field17,
                    __field18,
                    __field19,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            6u64 => _serde::__private::Ok(__Field::__field6),
                            7u64 => _serde::__private::Ok(__Field::__field7),
                            8u64 => _serde::__private::Ok(__Field::__field8),
                            9u64 => _serde::__private::Ok(__Field::__field9),
                            10u64 => _serde::__private::Ok(__Field::__field10),
                            11u64 => _serde::__private::Ok(__Field::__field11),
                            12u64 => _serde::__private::Ok(__Field::__field12),
                            13u64 => _serde::__private::Ok(__Field::__field13),
                            14u64 => _serde::__private::Ok(__Field::__field14),
                            15u64 => _serde::__private::Ok(__Field::__field15),
                            16u64 => _serde::__private::Ok(__Field::__field16),
                            17u64 => _serde::__private::Ok(__Field::__field17),
                            18u64 => _serde::__private::Ok(__Field::__field18),
                            19u64 => _serde::__private::Ok(__Field::__field19),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 20",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "CardholderAuthenticationIssuerLiability" => {
                                _serde::__private::Ok(__Field::__field0)
                            }
                            "EcifiveTokenTransactionWithTavv" => {
                                _serde::__private::Ok(__Field::__field1)
                            }
                            "ExcessDisputesInTimeframe" => {
                                _serde::__private::Ok(__Field::__field2)
                            }
                            "HasNotMetTheMinimumDisputeAmountRequirements" => {
                                _serde::__private::Ok(__Field::__field3)
                            }
                            "InvalidDuplicateDispute" => {
                                _serde::__private::Ok(__Field::__field4)
                            }
                            "InvalidIncorrectAmountDispute" => {
                                _serde::__private::Ok(__Field::__field5)
                            }
                            "InvalidNoAuthorization" => {
                                _serde::__private::Ok(__Field::__field6)
                            }
                            "InvalidUseOfDisputes" => {
                                _serde::__private::Ok(__Field::__field7)
                            }
                            "MerchandiseDeliveredOrShipped" => {
                                _serde::__private::Ok(__Field::__field8)
                            }
                            "MerchandiseOrServiceAsDescribed" => {
                                _serde::__private::Ok(__Field::__field9)
                            }
                            "NotCancelled" => _serde::__private::Ok(__Field::__field10),
                            "Other" => _serde::__private::Ok(__Field::__field11),
                            "RefundIssued" => _serde::__private::Ok(__Field::__field12),
                            "SubmittedBeyondAllowableTimeLimit" => {
                                _serde::__private::Ok(__Field::__field13)
                            }
                            "TransactionApprovedAfterPriorFraudDispute" => {
                                _serde::__private::Ok(__Field::__field14)
                            }
                            "TransactionAuthorized" => {
                                _serde::__private::Ok(__Field::__field15)
                            }
                            "TransactionElectronicallyRead" => {
                                _serde::__private::Ok(__Field::__field16)
                            }
                            "TransactionQualifiesForVisaEasyPaymentService" => {
                                _serde::__private::Ok(__Field::__field17)
                            }
                            "TransactionThreeDsRequired" => {
                                _serde::__private::Ok(__Field::__field18)
                            }
                            "TransactionUnattended" => {
                                _serde::__private::Ok(__Field::__field19)
                            }
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"CardholderAuthenticationIssuerLiability" => {
                                _serde::__private::Ok(__Field::__field0)
                            }
                            b"EcifiveTokenTransactionWithTavv" => {
                                _serde::__private::Ok(__Field::__field1)
                            }
                            b"ExcessDisputesInTimeframe" => {
                                _serde::__private::Ok(__Field::__field2)
                            }
                            b"HasNotMetTheMinimumDisputeAmountRequirements" => {
                                _serde::__private::Ok(__Field::__field3)
                            }
                            b"InvalidDuplicateDispute" => {
                                _serde::__private::Ok(__Field::__field4)
                            }
                            b"InvalidIncorrectAmountDispute" => {
                                _serde::__private::Ok(__Field::__field5)
                            }
                            b"InvalidNoAuthorization" => {
                                _serde::__private::Ok(__Field::__field6)
                            }
                            b"InvalidUseOfDisputes" => {
                                _serde::__private::Ok(__Field::__field7)
                            }
                            b"MerchandiseDeliveredOrShipped" => {
                                _serde::__private::Ok(__Field::__field8)
                            }
                            b"MerchandiseOrServiceAsDescribed" => {
                                _serde::__private::Ok(__Field::__field9)
                            }
                            b"NotCancelled" => _serde::__private::Ok(__Field::__field10),
                            b"Other" => _serde::__private::Ok(__Field::__field11),
                            b"RefundIssued" => _serde::__private::Ok(__Field::__field12),
                            b"SubmittedBeyondAllowableTimeLimit" => {
                                _serde::__private::Ok(__Field::__field13)
                            }
                            b"TransactionApprovedAfterPriorFraudDispute" => {
                                _serde::__private::Ok(__Field::__field14)
                            }
                            b"TransactionAuthorized" => {
                                _serde::__private::Ok(__Field::__field15)
                            }
                            b"TransactionElectronicallyRead" => {
                                _serde::__private::Ok(__Field::__field16)
                            }
                            b"TransactionQualifiesForVisaEasyPaymentService" => {
                                _serde::__private::Ok(__Field::__field17)
                            }
                            b"TransactionThreeDsRequired" => {
                                _serde::__private::Ok(__Field::__field18)
                            }
                            b"TransactionUnattended" => {
                                _serde::__private::Ok(__Field::__field19)
                            }
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<IssuingDisputeLossReason>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = IssuingDisputeLossReason;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum IssuingDisputeLossReason",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    IssuingDisputeLossReason::CardholderAuthenticationIssuerLiability,
                                )
                            }
                            (__Field::__field1, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    IssuingDisputeLossReason::EcifiveTokenTransactionWithTavv,
                                )
                            }
                            (__Field::__field2, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    IssuingDisputeLossReason::ExcessDisputesInTimeframe,
                                )
                            }
                            (__Field::__field3, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    IssuingDisputeLossReason::HasNotMetTheMinimumDisputeAmountRequirements,
                                )
                            }
                            (__Field::__field4, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    IssuingDisputeLossReason::InvalidDuplicateDispute,
                                )
                            }
                            (__Field::__field5, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    IssuingDisputeLossReason::InvalidIncorrectAmountDispute,
                                )
                            }
                            (__Field::__field6, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    IssuingDisputeLossReason::InvalidNoAuthorization,
                                )
                            }
                            (__Field::__field7, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    IssuingDisputeLossReason::InvalidUseOfDisputes,
                                )
                            }
                            (__Field::__field8, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    IssuingDisputeLossReason::MerchandiseDeliveredOrShipped,
                                )
                            }
                            (__Field::__field9, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    IssuingDisputeLossReason::MerchandiseOrServiceAsDescribed,
                                )
                            }
                            (__Field::__field10, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    IssuingDisputeLossReason::NotCancelled,
                                )
                            }
                            (__Field::__field11, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(IssuingDisputeLossReason::Other)
                            }
                            (__Field::__field12, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    IssuingDisputeLossReason::RefundIssued,
                                )
                            }
                            (__Field::__field13, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    IssuingDisputeLossReason::SubmittedBeyondAllowableTimeLimit,
                                )
                            }
                            (__Field::__field14, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    IssuingDisputeLossReason::TransactionApprovedAfterPriorFraudDispute,
                                )
                            }
                            (__Field::__field15, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    IssuingDisputeLossReason::TransactionAuthorized,
                                )
                            }
                            (__Field::__field16, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    IssuingDisputeLossReason::TransactionElectronicallyRead,
                                )
                            }
                            (__Field::__field17, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    IssuingDisputeLossReason::TransactionQualifiesForVisaEasyPaymentService,
                                )
                            }
                            (__Field::__field18, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    IssuingDisputeLossReason::TransactionThreeDsRequired,
                                )
                            }
                            (__Field::__field19, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    IssuingDisputeLossReason::TransactionUnattended,
                                )
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &[
                    "CardholderAuthenticationIssuerLiability",
                    "EcifiveTokenTransactionWithTavv",
                    "ExcessDisputesInTimeframe",
                    "HasNotMetTheMinimumDisputeAmountRequirements",
                    "InvalidDuplicateDispute",
                    "InvalidIncorrectAmountDispute",
                    "InvalidNoAuthorization",
                    "InvalidUseOfDisputes",
                    "MerchandiseDeliveredOrShipped",
                    "MerchandiseOrServiceAsDescribed",
                    "NotCancelled",
                    "Other",
                    "RefundIssued",
                    "SubmittedBeyondAllowableTimeLimit",
                    "TransactionApprovedAfterPriorFraudDispute",
                    "TransactionAuthorized",
                    "TransactionElectronicallyRead",
                    "TransactionQualifiesForVisaEasyPaymentService",
                    "TransactionThreeDsRequired",
                    "TransactionUnattended",
                ];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "IssuingDisputeLossReason",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<
                            IssuingDisputeLossReason,
                        >,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for IssuingDisputeLossReason {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    IssuingDisputeLossReason::CardholderAuthenticationIssuerLiability => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingDisputeLossReason",
                            0u32,
                            "CardholderAuthenticationIssuerLiability",
                        )
                    }
                    IssuingDisputeLossReason::EcifiveTokenTransactionWithTavv => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingDisputeLossReason",
                            1u32,
                            "EcifiveTokenTransactionWithTavv",
                        )
                    }
                    IssuingDisputeLossReason::ExcessDisputesInTimeframe => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingDisputeLossReason",
                            2u32,
                            "ExcessDisputesInTimeframe",
                        )
                    }
                    IssuingDisputeLossReason::HasNotMetTheMinimumDisputeAmountRequirements => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingDisputeLossReason",
                            3u32,
                            "HasNotMetTheMinimumDisputeAmountRequirements",
                        )
                    }
                    IssuingDisputeLossReason::InvalidDuplicateDispute => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingDisputeLossReason",
                            4u32,
                            "InvalidDuplicateDispute",
                        )
                    }
                    IssuingDisputeLossReason::InvalidIncorrectAmountDispute => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingDisputeLossReason",
                            5u32,
                            "InvalidIncorrectAmountDispute",
                        )
                    }
                    IssuingDisputeLossReason::InvalidNoAuthorization => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingDisputeLossReason",
                            6u32,
                            "InvalidNoAuthorization",
                        )
                    }
                    IssuingDisputeLossReason::InvalidUseOfDisputes => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingDisputeLossReason",
                            7u32,
                            "InvalidUseOfDisputes",
                        )
                    }
                    IssuingDisputeLossReason::MerchandiseDeliveredOrShipped => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingDisputeLossReason",
                            8u32,
                            "MerchandiseDeliveredOrShipped",
                        )
                    }
                    IssuingDisputeLossReason::MerchandiseOrServiceAsDescribed => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingDisputeLossReason",
                            9u32,
                            "MerchandiseOrServiceAsDescribed",
                        )
                    }
                    IssuingDisputeLossReason::NotCancelled => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingDisputeLossReason",
                            10u32,
                            "NotCancelled",
                        )
                    }
                    IssuingDisputeLossReason::Other => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingDisputeLossReason",
                            11u32,
                            "Other",
                        )
                    }
                    IssuingDisputeLossReason::RefundIssued => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingDisputeLossReason",
                            12u32,
                            "RefundIssued",
                        )
                    }
                    IssuingDisputeLossReason::SubmittedBeyondAllowableTimeLimit => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingDisputeLossReason",
                            13u32,
                            "SubmittedBeyondAllowableTimeLimit",
                        )
                    }
                    IssuingDisputeLossReason::TransactionApprovedAfterPriorFraudDispute => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingDisputeLossReason",
                            14u32,
                            "TransactionApprovedAfterPriorFraudDispute",
                        )
                    }
                    IssuingDisputeLossReason::TransactionAuthorized => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingDisputeLossReason",
                            15u32,
                            "TransactionAuthorized",
                        )
                    }
                    IssuingDisputeLossReason::TransactionElectronicallyRead => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingDisputeLossReason",
                            16u32,
                            "TransactionElectronicallyRead",
                        )
                    }
                    IssuingDisputeLossReason::TransactionQualifiesForVisaEasyPaymentService => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingDisputeLossReason",
                            17u32,
                            "TransactionQualifiesForVisaEasyPaymentService",
                        )
                    }
                    IssuingDisputeLossReason::TransactionThreeDsRequired => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingDisputeLossReason",
                            18u32,
                            "TransactionThreeDsRequired",
                        )
                    }
                    IssuingDisputeLossReason::TransactionUnattended => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingDisputeLossReason",
                            19u32,
                            "TransactionUnattended",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for IssuingDisputeLossReason {
        #[inline]
        fn clone(&self) -> IssuingDisputeLossReason {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for IssuingDisputeLossReason {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for IssuingDisputeLossReason {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for IssuingDisputeLossReason {
        #[inline]
        fn eq(&self, other: &IssuingDisputeLossReason) -> bool {
            let __self_discr = ::core::intrinsics::discriminant_value(self);
            let __arg1_discr = ::core::intrinsics::discriminant_value(other);
            __self_discr == __arg1_discr
        }
    }
    impl ::core::fmt::Debug for IssuingDisputeLossReason {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                IssuingDisputeLossReason::CardholderAuthenticationIssuerLiability => {
                    f.debug_tuple(
                            "IssuingDisputeLossReason::CardholderAuthenticationIssuerLiability",
                        )
                        .finish()
                }
                IssuingDisputeLossReason::EcifiveTokenTransactionWithTavv => {
                    f.debug_tuple(
                            "IssuingDisputeLossReason::EcifiveTokenTransactionWithTavv",
                        )
                        .finish()
                }
                IssuingDisputeLossReason::ExcessDisputesInTimeframe => {
                    f.debug_tuple("IssuingDisputeLossReason::ExcessDisputesInTimeframe")
                        .finish()
                }
                IssuingDisputeLossReason::HasNotMetTheMinimumDisputeAmountRequirements => {
                    f.debug_tuple(
                            "IssuingDisputeLossReason::HasNotMetTheMinimumDisputeAmountRequirements",
                        )
                        .finish()
                }
                IssuingDisputeLossReason::InvalidDuplicateDispute => {
                    f.debug_tuple("IssuingDisputeLossReason::InvalidDuplicateDispute")
                        .finish()
                }
                IssuingDisputeLossReason::InvalidIncorrectAmountDispute => {
                    f.debug_tuple(
                            "IssuingDisputeLossReason::InvalidIncorrectAmountDispute",
                        )
                        .finish()
                }
                IssuingDisputeLossReason::InvalidNoAuthorization => {
                    f.debug_tuple("IssuingDisputeLossReason::InvalidNoAuthorization")
                        .finish()
                }
                IssuingDisputeLossReason::InvalidUseOfDisputes => {
                    f.debug_tuple("IssuingDisputeLossReason::InvalidUseOfDisputes")
                        .finish()
                }
                IssuingDisputeLossReason::MerchandiseDeliveredOrShipped => {
                    f.debug_tuple(
                            "IssuingDisputeLossReason::MerchandiseDeliveredOrShipped",
                        )
                        .finish()
                }
                IssuingDisputeLossReason::MerchandiseOrServiceAsDescribed => {
                    f.debug_tuple(
                            "IssuingDisputeLossReason::MerchandiseOrServiceAsDescribed",
                        )
                        .finish()
                }
                IssuingDisputeLossReason::NotCancelled => {
                    f.debug_tuple("IssuingDisputeLossReason::NotCancelled").finish()
                }
                IssuingDisputeLossReason::Other => {
                    f.debug_tuple("IssuingDisputeLossReason::Other").finish()
                }
                IssuingDisputeLossReason::RefundIssued => {
                    f.debug_tuple("IssuingDisputeLossReason::RefundIssued").finish()
                }
                IssuingDisputeLossReason::SubmittedBeyondAllowableTimeLimit => {
                    f.debug_tuple(
                            "IssuingDisputeLossReason::SubmittedBeyondAllowableTimeLimit",
                        )
                        .finish()
                }
                IssuingDisputeLossReason::TransactionApprovedAfterPriorFraudDispute => {
                    f.debug_tuple(
                            "IssuingDisputeLossReason::TransactionApprovedAfterPriorFraudDispute",
                        )
                        .finish()
                }
                IssuingDisputeLossReason::TransactionAuthorized => {
                    f.debug_tuple("IssuingDisputeLossReason::TransactionAuthorized")
                        .finish()
                }
                IssuingDisputeLossReason::TransactionElectronicallyRead => {
                    f.debug_tuple(
                            "IssuingDisputeLossReason::TransactionElectronicallyRead",
                        )
                        .finish()
                }
                IssuingDisputeLossReason::TransactionQualifiesForVisaEasyPaymentService => {
                    f.debug_tuple(
                            "IssuingDisputeLossReason::TransactionQualifiesForVisaEasyPaymentService",
                        )
                        .finish()
                }
                IssuingDisputeLossReason::TransactionThreeDsRequired => {
                    f.debug_tuple("IssuingDisputeLossReason::TransactionThreeDsRequired")
                        .finish()
                }
                IssuingDisputeLossReason::TransactionUnattended => {
                    f.debug_tuple("IssuingDisputeLossReason::TransactionUnattended")
                        .finish()
                }
            }
        }
    }
    pub enum IssuingDisputeReason {
        Canceled,
        Duplicate,
        Fraudulent,
        MerchandiseNotAsDescribed,
        NoValidAuthorization,
        NotReceived,
        Other,
        ServiceNotAsDescribed,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for IssuingDisputeReason {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                    __field7,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            6u64 => _serde::__private::Ok(__Field::__field6),
                            7u64 => _serde::__private::Ok(__Field::__field7),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 8",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "Canceled" => _serde::__private::Ok(__Field::__field0),
                            "Duplicate" => _serde::__private::Ok(__Field::__field1),
                            "Fraudulent" => _serde::__private::Ok(__Field::__field2),
                            "MerchandiseNotAsDescribed" => {
                                _serde::__private::Ok(__Field::__field3)
                            }
                            "NoValidAuthorization" => {
                                _serde::__private::Ok(__Field::__field4)
                            }
                            "NotReceived" => _serde::__private::Ok(__Field::__field5),
                            "Other" => _serde::__private::Ok(__Field::__field6),
                            "ServiceNotAsDescribed" => {
                                _serde::__private::Ok(__Field::__field7)
                            }
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"Canceled" => _serde::__private::Ok(__Field::__field0),
                            b"Duplicate" => _serde::__private::Ok(__Field::__field1),
                            b"Fraudulent" => _serde::__private::Ok(__Field::__field2),
                            b"MerchandiseNotAsDescribed" => {
                                _serde::__private::Ok(__Field::__field3)
                            }
                            b"NoValidAuthorization" => {
                                _serde::__private::Ok(__Field::__field4)
                            }
                            b"NotReceived" => _serde::__private::Ok(__Field::__field5),
                            b"Other" => _serde::__private::Ok(__Field::__field6),
                            b"ServiceNotAsDescribed" => {
                                _serde::__private::Ok(__Field::__field7)
                            }
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<IssuingDisputeReason>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = IssuingDisputeReason;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum IssuingDisputeReason",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(IssuingDisputeReason::Canceled)
                            }
                            (__Field::__field1, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(IssuingDisputeReason::Duplicate)
                            }
                            (__Field::__field2, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(IssuingDisputeReason::Fraudulent)
                            }
                            (__Field::__field3, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    IssuingDisputeReason::MerchandiseNotAsDescribed,
                                )
                            }
                            (__Field::__field4, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    IssuingDisputeReason::NoValidAuthorization,
                                )
                            }
                            (__Field::__field5, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(IssuingDisputeReason::NotReceived)
                            }
                            (__Field::__field6, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(IssuingDisputeReason::Other)
                            }
                            (__Field::__field7, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    IssuingDisputeReason::ServiceNotAsDescribed,
                                )
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &[
                    "Canceled",
                    "Duplicate",
                    "Fraudulent",
                    "MerchandiseNotAsDescribed",
                    "NoValidAuthorization",
                    "NotReceived",
                    "Other",
                    "ServiceNotAsDescribed",
                ];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "IssuingDisputeReason",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<IssuingDisputeReason>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for IssuingDisputeReason {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    IssuingDisputeReason::Canceled => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingDisputeReason",
                            0u32,
                            "Canceled",
                        )
                    }
                    IssuingDisputeReason::Duplicate => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingDisputeReason",
                            1u32,
                            "Duplicate",
                        )
                    }
                    IssuingDisputeReason::Fraudulent => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingDisputeReason",
                            2u32,
                            "Fraudulent",
                        )
                    }
                    IssuingDisputeReason::MerchandiseNotAsDescribed => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingDisputeReason",
                            3u32,
                            "MerchandiseNotAsDescribed",
                        )
                    }
                    IssuingDisputeReason::NoValidAuthorization => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingDisputeReason",
                            4u32,
                            "NoValidAuthorization",
                        )
                    }
                    IssuingDisputeReason::NotReceived => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingDisputeReason",
                            5u32,
                            "NotReceived",
                        )
                    }
                    IssuingDisputeReason::Other => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingDisputeReason",
                            6u32,
                            "Other",
                        )
                    }
                    IssuingDisputeReason::ServiceNotAsDescribed => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingDisputeReason",
                            7u32,
                            "ServiceNotAsDescribed",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for IssuingDisputeReason {
        #[inline]
        fn clone(&self) -> IssuingDisputeReason {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for IssuingDisputeReason {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for IssuingDisputeReason {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for IssuingDisputeReason {
        #[inline]
        fn eq(&self, other: &IssuingDisputeReason) -> bool {
            let __self_discr = ::core::intrinsics::discriminant_value(self);
            let __arg1_discr = ::core::intrinsics::discriminant_value(other);
            __self_discr == __arg1_discr
        }
    }
    impl ::core::fmt::Debug for IssuingDisputeReason {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                IssuingDisputeReason::Canceled => {
                    f.debug_tuple("IssuingDisputeReason::Canceled").finish()
                }
                IssuingDisputeReason::Duplicate => {
                    f.debug_tuple("IssuingDisputeReason::Duplicate").finish()
                }
                IssuingDisputeReason::Fraudulent => {
                    f.debug_tuple("IssuingDisputeReason::Fraudulent").finish()
                }
                IssuingDisputeReason::MerchandiseNotAsDescribed => {
                    f.debug_tuple("IssuingDisputeReason::MerchandiseNotAsDescribed")
                        .finish()
                }
                IssuingDisputeReason::NoValidAuthorization => {
                    f.debug_tuple("IssuingDisputeReason::NoValidAuthorization").finish()
                }
                IssuingDisputeReason::NotReceived => {
                    f.debug_tuple("IssuingDisputeReason::NotReceived").finish()
                }
                IssuingDisputeReason::Other => {
                    f.debug_tuple("IssuingDisputeReason::Other").finish()
                }
                IssuingDisputeReason::ServiceNotAsDescribed => {
                    f.debug_tuple("IssuingDisputeReason::ServiceNotAsDescribed").finish()
                }
            }
        }
    }
    pub enum IssuingDisputeStatus {
        Expired,
        Lost,
        Submitted,
        Unsubmitted,
        Won,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for IssuingDisputeStatus {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 5",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "Expired" => _serde::__private::Ok(__Field::__field0),
                            "Lost" => _serde::__private::Ok(__Field::__field1),
                            "Submitted" => _serde::__private::Ok(__Field::__field2),
                            "Unsubmitted" => _serde::__private::Ok(__Field::__field3),
                            "Won" => _serde::__private::Ok(__Field::__field4),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"Expired" => _serde::__private::Ok(__Field::__field0),
                            b"Lost" => _serde::__private::Ok(__Field::__field1),
                            b"Submitted" => _serde::__private::Ok(__Field::__field2),
                            b"Unsubmitted" => _serde::__private::Ok(__Field::__field3),
                            b"Won" => _serde::__private::Ok(__Field::__field4),
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<IssuingDisputeStatus>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = IssuingDisputeStatus;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum IssuingDisputeStatus",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(IssuingDisputeStatus::Expired)
                            }
                            (__Field::__field1, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(IssuingDisputeStatus::Lost)
                            }
                            (__Field::__field2, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(IssuingDisputeStatus::Submitted)
                            }
                            (__Field::__field3, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(IssuingDisputeStatus::Unsubmitted)
                            }
                            (__Field::__field4, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(IssuingDisputeStatus::Won)
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &[
                    "Expired",
                    "Lost",
                    "Submitted",
                    "Unsubmitted",
                    "Won",
                ];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "IssuingDisputeStatus",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<IssuingDisputeStatus>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for IssuingDisputeStatus {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    IssuingDisputeStatus::Expired => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingDisputeStatus",
                            0u32,
                            "Expired",
                        )
                    }
                    IssuingDisputeStatus::Lost => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingDisputeStatus",
                            1u32,
                            "Lost",
                        )
                    }
                    IssuingDisputeStatus::Submitted => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingDisputeStatus",
                            2u32,
                            "Submitted",
                        )
                    }
                    IssuingDisputeStatus::Unsubmitted => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingDisputeStatus",
                            3u32,
                            "Unsubmitted",
                        )
                    }
                    IssuingDisputeStatus::Won => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "IssuingDisputeStatus",
                            4u32,
                            "Won",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for IssuingDisputeStatus {
        #[inline]
        fn clone(&self) -> IssuingDisputeStatus {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for IssuingDisputeStatus {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for IssuingDisputeStatus {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for IssuingDisputeStatus {
        #[inline]
        fn eq(&self, other: &IssuingDisputeStatus) -> bool {
            let __self_discr = ::core::intrinsics::discriminant_value(self);
            let __arg1_discr = ::core::intrinsics::discriminant_value(other);
            __self_discr == __arg1_discr
        }
    }
    impl ::core::fmt::Debug for IssuingDisputeStatus {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                IssuingDisputeStatus::Expired => {
                    f.debug_tuple("IssuingDisputeStatus::Expired").finish()
                }
                IssuingDisputeStatus::Lost => {
                    f.debug_tuple("IssuingDisputeStatus::Lost").finish()
                }
                IssuingDisputeStatus::Submitted => {
                    f.debug_tuple("IssuingDisputeStatus::Submitted").finish()
                }
                IssuingDisputeStatus::Unsubmitted => {
                    f.debug_tuple("IssuingDisputeStatus::Unsubmitted").finish()
                }
                IssuingDisputeStatus::Won => {
                    f.debug_tuple("IssuingDisputeStatus::Won").finish()
                }
            }
        }
    }
    pub struct IssuingDispute {
        pub amount: i32,
        pub created: i32,
        pub currency: _rt::String,
        pub event_type: IssuingDisputeEventType,
        pub id: _rt::String,
        pub loss_reason: Option<IssuingDisputeLossReason>,
        pub reason: IssuingDisputeReason,
        pub status: IssuingDisputeStatus,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for IssuingDispute {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                    __field7,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            6u64 => _serde::__private::Ok(__Field::__field6),
                            7u64 => _serde::__private::Ok(__Field::__field7),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "amount" => _serde::__private::Ok(__Field::__field0),
                            "created" => _serde::__private::Ok(__Field::__field1),
                            "currency" => _serde::__private::Ok(__Field::__field2),
                            "event_type" => _serde::__private::Ok(__Field::__field3),
                            "id" => _serde::__private::Ok(__Field::__field4),
                            "loss_reason" => _serde::__private::Ok(__Field::__field5),
                            "reason" => _serde::__private::Ok(__Field::__field6),
                            "status" => _serde::__private::Ok(__Field::__field7),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"amount" => _serde::__private::Ok(__Field::__field0),
                            b"created" => _serde::__private::Ok(__Field::__field1),
                            b"currency" => _serde::__private::Ok(__Field::__field2),
                            b"event_type" => _serde::__private::Ok(__Field::__field3),
                            b"id" => _serde::__private::Ok(__Field::__field4),
                            b"loss_reason" => _serde::__private::Ok(__Field::__field5),
                            b"reason" => _serde::__private::Ok(__Field::__field6),
                            b"status" => _serde::__private::Ok(__Field::__field7),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<IssuingDispute>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = IssuingDispute;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct IssuingDispute",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match _serde::de::SeqAccess::next_element::<
                            i32,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct IssuingDispute with 8 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match _serde::de::SeqAccess::next_element::<
                            i32,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct IssuingDispute with 8 elements",
                                    ),
                                );
                            }
                        };
                        let __field2 = match _serde::de::SeqAccess::next_element::<
                            _rt::String,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        2usize,
                                        &"struct IssuingDispute with 8 elements",
                                    ),
                                );
                            }
                        };
                        let __field3 = match _serde::de::SeqAccess::next_element::<
                            IssuingDisputeEventType,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        3usize,
                                        &"struct IssuingDispute with 8 elements",
                                    ),
                                );
                            }
                        };
                        let __field4 = match _serde::de::SeqAccess::next_element::<
                            _rt::String,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        4usize,
                                        &"struct IssuingDispute with 8 elements",
                                    ),
                                );
                            }
                        };
                        let __field5 = match _serde::de::SeqAccess::next_element::<
                            Option<IssuingDisputeLossReason>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        5usize,
                                        &"struct IssuingDispute with 8 elements",
                                    ),
                                );
                            }
                        };
                        let __field6 = match _serde::de::SeqAccess::next_element::<
                            IssuingDisputeReason,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        6usize,
                                        &"struct IssuingDispute with 8 elements",
                                    ),
                                );
                            }
                        };
                        let __field7 = match _serde::de::SeqAccess::next_element::<
                            IssuingDisputeStatus,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        7usize,
                                        &"struct IssuingDispute with 8 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(IssuingDispute {
                            amount: __field0,
                            created: __field1,
                            currency: __field2,
                            event_type: __field3,
                            id: __field4,
                            loss_reason: __field5,
                            reason: __field6,
                            status: __field7,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<i32> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<i32> = _serde::__private::None;
                        let mut __field2: _serde::__private::Option<_rt::String> = _serde::__private::None;
                        let mut __field3: _serde::__private::Option<
                            IssuingDisputeEventType,
                        > = _serde::__private::None;
                        let mut __field4: _serde::__private::Option<_rt::String> = _serde::__private::None;
                        let mut __field5: _serde::__private::Option<
                            Option<IssuingDisputeLossReason>,
                        > = _serde::__private::None;
                        let mut __field6: _serde::__private::Option<
                            IssuingDisputeReason,
                        > = _serde::__private::None;
                        let mut __field7: _serde::__private::Option<
                            IssuingDisputeStatus,
                        > = _serde::__private::None;
                        while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                            __Field,
                        >(&mut __map)? {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("amount"),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "created",
                                            ),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                    );
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "currency",
                                            ),
                                        );
                                    }
                                    __field2 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            _rt::String,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field3 => {
                                    if _serde::__private::Option::is_some(&__field3) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "event_type",
                                            ),
                                        );
                                    }
                                    __field3 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            IssuingDisputeEventType,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field4 => {
                                    if _serde::__private::Option::is_some(&__field4) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                        );
                                    }
                                    __field4 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            _rt::String,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field5 => {
                                    if _serde::__private::Option::is_some(&__field5) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "loss_reason",
                                            ),
                                        );
                                    }
                                    __field5 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<IssuingDisputeLossReason>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field6 => {
                                    if _serde::__private::Option::is_some(&__field6) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("reason"),
                                        );
                                    }
                                    __field6 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            IssuingDisputeReason,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field7 => {
                                    if _serde::__private::Option::is_some(&__field7) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("status"),
                                        );
                                    }
                                    __field7 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            IssuingDisputeStatus,
                                        >(&mut __map)?,
                                    );
                                }
                                _ => {
                                    let _ = _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map)?;
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("amount")?
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("created")?
                            }
                        };
                        let __field2 = match __field2 {
                            _serde::__private::Some(__field2) => __field2,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("currency")?
                            }
                        };
                        let __field3 = match __field3 {
                            _serde::__private::Some(__field3) => __field3,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("event_type")?
                            }
                        };
                        let __field4 = match __field4 {
                            _serde::__private::Some(__field4) => __field4,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("id")?
                            }
                        };
                        let __field5 = match __field5 {
                            _serde::__private::Some(__field5) => __field5,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("loss_reason")?
                            }
                        };
                        let __field6 = match __field6 {
                            _serde::__private::Some(__field6) => __field6,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("reason")?
                            }
                        };
                        let __field7 = match __field7 {
                            _serde::__private::Some(__field7) => __field7,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("status")?
                            }
                        };
                        _serde::__private::Ok(IssuingDispute {
                            amount: __field0,
                            created: __field1,
                            currency: __field2,
                            event_type: __field3,
                            id: __field4,
                            loss_reason: __field5,
                            reason: __field6,
                            status: __field7,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &[
                    "amount",
                    "created",
                    "currency",
                    "event_type",
                    "id",
                    "loss_reason",
                    "reason",
                    "status",
                ];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "IssuingDispute",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<IssuingDispute>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for IssuingDispute {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = _serde::Serializer::serialize_struct(
                    __serializer,
                    "IssuingDispute",
                    false as usize + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "amount",
                    &self.amount,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "created",
                    &self.created,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "currency",
                    &self.currency,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "event_type",
                    &self.event_type,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "loss_reason",
                    &self.loss_reason,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "reason",
                    &self.reason,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "status",
                    &self.status,
                )?;
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for IssuingDispute {
        #[inline]
        fn clone(&self) -> IssuingDispute {
            IssuingDispute {
                amount: ::core::clone::Clone::clone(&self.amount),
                created: ::core::clone::Clone::clone(&self.created),
                currency: ::core::clone::Clone::clone(&self.currency),
                event_type: ::core::clone::Clone::clone(&self.event_type),
                id: ::core::clone::Clone::clone(&self.id),
                loss_reason: ::core::clone::Clone::clone(&self.loss_reason),
                reason: ::core::clone::Clone::clone(&self.reason),
                status: ::core::clone::Clone::clone(&self.status),
            }
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for IssuingDispute {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for IssuingDispute {
        #[inline]
        fn eq(&self, other: &IssuingDispute) -> bool {
            self.amount == other.amount && self.created == other.created
                && self.currency == other.currency && self.event_type == other.event_type
                && self.id == other.id && self.loss_reason == other.loss_reason
                && self.reason == other.reason && self.status == other.status
        }
    }
    impl ::core::fmt::Debug for IssuingDispute {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("IssuingDispute")
                .field("amount", &self.amount)
                .field("created", &self.created)
                .field("currency", &self.currency)
                .field("event-type", &self.event_type)
                .field("id", &self.id)
                .field("loss-reason", &self.loss_reason)
                .field("reason", &self.reason)
                .field("status", &self.status)
                .finish()
        }
    }
    pub struct LineItem {
        pub amount: i32,
        pub currency: _rt::String,
        pub description: _rt::String,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for LineItem {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "amount" => _serde::__private::Ok(__Field::__field0),
                            "currency" => _serde::__private::Ok(__Field::__field1),
                            "description" => _serde::__private::Ok(__Field::__field2),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"amount" => _serde::__private::Ok(__Field::__field0),
                            b"currency" => _serde::__private::Ok(__Field::__field1),
                            b"description" => _serde::__private::Ok(__Field::__field2),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<LineItem>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = LineItem;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct LineItem",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match _serde::de::SeqAccess::next_element::<
                            i32,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct LineItem with 3 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match _serde::de::SeqAccess::next_element::<
                            _rt::String,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct LineItem with 3 elements",
                                    ),
                                );
                            }
                        };
                        let __field2 = match _serde::de::SeqAccess::next_element::<
                            _rt::String,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        2usize,
                                        &"struct LineItem with 3 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(LineItem {
                            amount: __field0,
                            currency: __field1,
                            description: __field2,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<i32> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<_rt::String> = _serde::__private::None;
                        let mut __field2: _serde::__private::Option<_rt::String> = _serde::__private::None;
                        while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                            __Field,
                        >(&mut __map)? {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("amount"),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "currency",
                                            ),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            _rt::String,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "description",
                                            ),
                                        );
                                    }
                                    __field2 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            _rt::String,
                                        >(&mut __map)?,
                                    );
                                }
                                _ => {
                                    let _ = _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map)?;
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("amount")?
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("currency")?
                            }
                        };
                        let __field2 = match __field2 {
                            _serde::__private::Some(__field2) => __field2,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("description")?
                            }
                        };
                        _serde::__private::Ok(LineItem {
                            amount: __field0,
                            currency: __field1,
                            description: __field2,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &[
                    "amount",
                    "currency",
                    "description",
                ];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "LineItem",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<LineItem>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for LineItem {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = _serde::Serializer::serialize_struct(
                    __serializer,
                    "LineItem",
                    false as usize + 1 + 1 + 1,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "amount",
                    &self.amount,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "currency",
                    &self.currency,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "description",
                    &self.description,
                )?;
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for LineItem {
        #[inline]
        fn clone(&self) -> LineItem {
            LineItem {
                amount: ::core::clone::Clone::clone(&self.amount),
                currency: ::core::clone::Clone::clone(&self.currency),
                description: ::core::clone::Clone::clone(&self.description),
            }
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for LineItem {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for LineItem {
        #[inline]
        fn eq(&self, other: &LineItem) -> bool {
            self.amount == other.amount && self.currency == other.currency
                && self.description == other.description
        }
    }
    impl ::core::fmt::Debug for LineItem {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("LineItem")
                .field("amount", &self.amount)
                .field("currency", &self.currency)
                .field("description", &self.description)
                .finish()
        }
    }
    pub type InvoiceLines = _rt::Vec<LineItem>;
    pub struct Invoice {
        pub account_country: Option<_rt::String>,
        pub account_name: Option<_rt::String>,
        pub amount_due: i32,
        pub amount_paid: i32,
        pub amount_remaining: i32,
        pub amount_shipping: i32,
        pub attempt_count: i32,
        pub attempted: bool,
        pub billing_reason: Option<InvoiceBillingReason>,
        pub collection_method: InvoiceCollectionMethod,
        pub created: i32,
        pub currency: _rt::String,
        pub customer: Option<_rt::String>,
        pub customer_email: Option<_rt::String>,
        pub customer_name: Option<_rt::String>,
        pub event_type: InvoiceEventType,
        pub hosted_invoice_url: Option<_rt::String>,
        pub id: Option<_rt::String>,
        pub lines: InvoiceLines,
        pub paid: bool,
        pub paid_out_of_band: bool,
        pub period_end: i32,
        pub period_start: i32,
        pub status: Option<InvoiceStatus>,
        pub subtotal: i32,
        pub total: i32,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for Invoice {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                    __field7,
                    __field8,
                    __field9,
                    __field10,
                    __field11,
                    __field12,
                    __field13,
                    __field14,
                    __field15,
                    __field16,
                    __field17,
                    __field18,
                    __field19,
                    __field20,
                    __field21,
                    __field22,
                    __field23,
                    __field24,
                    __field25,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            6u64 => _serde::__private::Ok(__Field::__field6),
                            7u64 => _serde::__private::Ok(__Field::__field7),
                            8u64 => _serde::__private::Ok(__Field::__field8),
                            9u64 => _serde::__private::Ok(__Field::__field9),
                            10u64 => _serde::__private::Ok(__Field::__field10),
                            11u64 => _serde::__private::Ok(__Field::__field11),
                            12u64 => _serde::__private::Ok(__Field::__field12),
                            13u64 => _serde::__private::Ok(__Field::__field13),
                            14u64 => _serde::__private::Ok(__Field::__field14),
                            15u64 => _serde::__private::Ok(__Field::__field15),
                            16u64 => _serde::__private::Ok(__Field::__field16),
                            17u64 => _serde::__private::Ok(__Field::__field17),
                            18u64 => _serde::__private::Ok(__Field::__field18),
                            19u64 => _serde::__private::Ok(__Field::__field19),
                            20u64 => _serde::__private::Ok(__Field::__field20),
                            21u64 => _serde::__private::Ok(__Field::__field21),
                            22u64 => _serde::__private::Ok(__Field::__field22),
                            23u64 => _serde::__private::Ok(__Field::__field23),
                            24u64 => _serde::__private::Ok(__Field::__field24),
                            25u64 => _serde::__private::Ok(__Field::__field25),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "account_country" => _serde::__private::Ok(__Field::__field0),
                            "account_name" => _serde::__private::Ok(__Field::__field1),
                            "amount_due" => _serde::__private::Ok(__Field::__field2),
                            "amount_paid" => _serde::__private::Ok(__Field::__field3),
                            "amount_remaining" => {
                                _serde::__private::Ok(__Field::__field4)
                            }
                            "amount_shipping" => _serde::__private::Ok(__Field::__field5),
                            "attempt_count" => _serde::__private::Ok(__Field::__field6),
                            "attempted" => _serde::__private::Ok(__Field::__field7),
                            "billing_reason" => _serde::__private::Ok(__Field::__field8),
                            "collection_method" => {
                                _serde::__private::Ok(__Field::__field9)
                            }
                            "created" => _serde::__private::Ok(__Field::__field10),
                            "currency" => _serde::__private::Ok(__Field::__field11),
                            "customer" => _serde::__private::Ok(__Field::__field12),
                            "customer_email" => _serde::__private::Ok(__Field::__field13),
                            "customer_name" => _serde::__private::Ok(__Field::__field14),
                            "event_type" => _serde::__private::Ok(__Field::__field15),
                            "hosted_invoice_url" => {
                                _serde::__private::Ok(__Field::__field16)
                            }
                            "id" => _serde::__private::Ok(__Field::__field17),
                            "lines" => _serde::__private::Ok(__Field::__field18),
                            "paid" => _serde::__private::Ok(__Field::__field19),
                            "paid_out_of_band" => {
                                _serde::__private::Ok(__Field::__field20)
                            }
                            "period_end" => _serde::__private::Ok(__Field::__field21),
                            "period_start" => _serde::__private::Ok(__Field::__field22),
                            "status" => _serde::__private::Ok(__Field::__field23),
                            "subtotal" => _serde::__private::Ok(__Field::__field24),
                            "total" => _serde::__private::Ok(__Field::__field25),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"account_country" => {
                                _serde::__private::Ok(__Field::__field0)
                            }
                            b"account_name" => _serde::__private::Ok(__Field::__field1),
                            b"amount_due" => _serde::__private::Ok(__Field::__field2),
                            b"amount_paid" => _serde::__private::Ok(__Field::__field3),
                            b"amount_remaining" => {
                                _serde::__private::Ok(__Field::__field4)
                            }
                            b"amount_shipping" => {
                                _serde::__private::Ok(__Field::__field5)
                            }
                            b"attempt_count" => _serde::__private::Ok(__Field::__field6),
                            b"attempted" => _serde::__private::Ok(__Field::__field7),
                            b"billing_reason" => _serde::__private::Ok(__Field::__field8),
                            b"collection_method" => {
                                _serde::__private::Ok(__Field::__field9)
                            }
                            b"created" => _serde::__private::Ok(__Field::__field10),
                            b"currency" => _serde::__private::Ok(__Field::__field11),
                            b"customer" => _serde::__private::Ok(__Field::__field12),
                            b"customer_email" => {
                                _serde::__private::Ok(__Field::__field13)
                            }
                            b"customer_name" => _serde::__private::Ok(__Field::__field14),
                            b"event_type" => _serde::__private::Ok(__Field::__field15),
                            b"hosted_invoice_url" => {
                                _serde::__private::Ok(__Field::__field16)
                            }
                            b"id" => _serde::__private::Ok(__Field::__field17),
                            b"lines" => _serde::__private::Ok(__Field::__field18),
                            b"paid" => _serde::__private::Ok(__Field::__field19),
                            b"paid_out_of_band" => {
                                _serde::__private::Ok(__Field::__field20)
                            }
                            b"period_end" => _serde::__private::Ok(__Field::__field21),
                            b"period_start" => _serde::__private::Ok(__Field::__field22),
                            b"status" => _serde::__private::Ok(__Field::__field23),
                            b"subtotal" => _serde::__private::Ok(__Field::__field24),
                            b"total" => _serde::__private::Ok(__Field::__field25),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<Invoice>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = Invoice;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct Invoice",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct Invoice with 26 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct Invoice with 26 elements",
                                    ),
                                );
                            }
                        };
                        let __field2 = match _serde::de::SeqAccess::next_element::<
                            i32,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        2usize,
                                        &"struct Invoice with 26 elements",
                                    ),
                                );
                            }
                        };
                        let __field3 = match _serde::de::SeqAccess::next_element::<
                            i32,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        3usize,
                                        &"struct Invoice with 26 elements",
                                    ),
                                );
                            }
                        };
                        let __field4 = match _serde::de::SeqAccess::next_element::<
                            i32,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        4usize,
                                        &"struct Invoice with 26 elements",
                                    ),
                                );
                            }
                        };
                        let __field5 = match _serde::de::SeqAccess::next_element::<
                            i32,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        5usize,
                                        &"struct Invoice with 26 elements",
                                    ),
                                );
                            }
                        };
                        let __field6 = match _serde::de::SeqAccess::next_element::<
                            i32,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        6usize,
                                        &"struct Invoice with 26 elements",
                                    ),
                                );
                            }
                        };
                        let __field7 = match _serde::de::SeqAccess::next_element::<
                            bool,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        7usize,
                                        &"struct Invoice with 26 elements",
                                    ),
                                );
                            }
                        };
                        let __field8 = match _serde::de::SeqAccess::next_element::<
                            Option<InvoiceBillingReason>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        8usize,
                                        &"struct Invoice with 26 elements",
                                    ),
                                );
                            }
                        };
                        let __field9 = match _serde::de::SeqAccess::next_element::<
                            InvoiceCollectionMethod,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        9usize,
                                        &"struct Invoice with 26 elements",
                                    ),
                                );
                            }
                        };
                        let __field10 = match _serde::de::SeqAccess::next_element::<
                            i32,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        10usize,
                                        &"struct Invoice with 26 elements",
                                    ),
                                );
                            }
                        };
                        let __field11 = match _serde::de::SeqAccess::next_element::<
                            _rt::String,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        11usize,
                                        &"struct Invoice with 26 elements",
                                    ),
                                );
                            }
                        };
                        let __field12 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        12usize,
                                        &"struct Invoice with 26 elements",
                                    ),
                                );
                            }
                        };
                        let __field13 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        13usize,
                                        &"struct Invoice with 26 elements",
                                    ),
                                );
                            }
                        };
                        let __field14 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        14usize,
                                        &"struct Invoice with 26 elements",
                                    ),
                                );
                            }
                        };
                        let __field15 = match _serde::de::SeqAccess::next_element::<
                            InvoiceEventType,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        15usize,
                                        &"struct Invoice with 26 elements",
                                    ),
                                );
                            }
                        };
                        let __field16 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        16usize,
                                        &"struct Invoice with 26 elements",
                                    ),
                                );
                            }
                        };
                        let __field17 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        17usize,
                                        &"struct Invoice with 26 elements",
                                    ),
                                );
                            }
                        };
                        let __field18 = match _serde::de::SeqAccess::next_element::<
                            InvoiceLines,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        18usize,
                                        &"struct Invoice with 26 elements",
                                    ),
                                );
                            }
                        };
                        let __field19 = match _serde::de::SeqAccess::next_element::<
                            bool,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        19usize,
                                        &"struct Invoice with 26 elements",
                                    ),
                                );
                            }
                        };
                        let __field20 = match _serde::de::SeqAccess::next_element::<
                            bool,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        20usize,
                                        &"struct Invoice with 26 elements",
                                    ),
                                );
                            }
                        };
                        let __field21 = match _serde::de::SeqAccess::next_element::<
                            i32,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        21usize,
                                        &"struct Invoice with 26 elements",
                                    ),
                                );
                            }
                        };
                        let __field22 = match _serde::de::SeqAccess::next_element::<
                            i32,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        22usize,
                                        &"struct Invoice with 26 elements",
                                    ),
                                );
                            }
                        };
                        let __field23 = match _serde::de::SeqAccess::next_element::<
                            Option<InvoiceStatus>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        23usize,
                                        &"struct Invoice with 26 elements",
                                    ),
                                );
                            }
                        };
                        let __field24 = match _serde::de::SeqAccess::next_element::<
                            i32,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        24usize,
                                        &"struct Invoice with 26 elements",
                                    ),
                                );
                            }
                        };
                        let __field25 = match _serde::de::SeqAccess::next_element::<
                            i32,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        25usize,
                                        &"struct Invoice with 26 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(Invoice {
                            account_country: __field0,
                            account_name: __field1,
                            amount_due: __field2,
                            amount_paid: __field3,
                            amount_remaining: __field4,
                            amount_shipping: __field5,
                            attempt_count: __field6,
                            attempted: __field7,
                            billing_reason: __field8,
                            collection_method: __field9,
                            created: __field10,
                            currency: __field11,
                            customer: __field12,
                            customer_email: __field13,
                            customer_name: __field14,
                            event_type: __field15,
                            hosted_invoice_url: __field16,
                            id: __field17,
                            lines: __field18,
                            paid: __field19,
                            paid_out_of_band: __field20,
                            period_end: __field21,
                            period_start: __field22,
                            status: __field23,
                            subtotal: __field24,
                            total: __field25,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field2: _serde::__private::Option<i32> = _serde::__private::None;
                        let mut __field3: _serde::__private::Option<i32> = _serde::__private::None;
                        let mut __field4: _serde::__private::Option<i32> = _serde::__private::None;
                        let mut __field5: _serde::__private::Option<i32> = _serde::__private::None;
                        let mut __field6: _serde::__private::Option<i32> = _serde::__private::None;
                        let mut __field7: _serde::__private::Option<bool> = _serde::__private::None;
                        let mut __field8: _serde::__private::Option<
                            Option<InvoiceBillingReason>,
                        > = _serde::__private::None;
                        let mut __field9: _serde::__private::Option<
                            InvoiceCollectionMethod,
                        > = _serde::__private::None;
                        let mut __field10: _serde::__private::Option<i32> = _serde::__private::None;
                        let mut __field11: _serde::__private::Option<_rt::String> = _serde::__private::None;
                        let mut __field12: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field13: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field14: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field15: _serde::__private::Option<InvoiceEventType> = _serde::__private::None;
                        let mut __field16: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field17: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field18: _serde::__private::Option<InvoiceLines> = _serde::__private::None;
                        let mut __field19: _serde::__private::Option<bool> = _serde::__private::None;
                        let mut __field20: _serde::__private::Option<bool> = _serde::__private::None;
                        let mut __field21: _serde::__private::Option<i32> = _serde::__private::None;
                        let mut __field22: _serde::__private::Option<i32> = _serde::__private::None;
                        let mut __field23: _serde::__private::Option<
                            Option<InvoiceStatus>,
                        > = _serde::__private::None;
                        let mut __field24: _serde::__private::Option<i32> = _serde::__private::None;
                        let mut __field25: _serde::__private::Option<i32> = _serde::__private::None;
                        while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                            __Field,
                        >(&mut __map)? {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "account_country",
                                            ),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "account_name",
                                            ),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "amount_due",
                                            ),
                                        );
                                    }
                                    __field2 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                    );
                                }
                                __Field::__field3 => {
                                    if _serde::__private::Option::is_some(&__field3) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "amount_paid",
                                            ),
                                        );
                                    }
                                    __field3 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                    );
                                }
                                __Field::__field4 => {
                                    if _serde::__private::Option::is_some(&__field4) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "amount_remaining",
                                            ),
                                        );
                                    }
                                    __field4 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                    );
                                }
                                __Field::__field5 => {
                                    if _serde::__private::Option::is_some(&__field5) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "amount_shipping",
                                            ),
                                        );
                                    }
                                    __field5 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                    );
                                }
                                __Field::__field6 => {
                                    if _serde::__private::Option::is_some(&__field6) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "attempt_count",
                                            ),
                                        );
                                    }
                                    __field6 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                    );
                                }
                                __Field::__field7 => {
                                    if _serde::__private::Option::is_some(&__field7) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "attempted",
                                            ),
                                        );
                                    }
                                    __field7 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<bool>(&mut __map)?,
                                    );
                                }
                                __Field::__field8 => {
                                    if _serde::__private::Option::is_some(&__field8) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "billing_reason",
                                            ),
                                        );
                                    }
                                    __field8 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<InvoiceBillingReason>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field9 => {
                                    if _serde::__private::Option::is_some(&__field9) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "collection_method",
                                            ),
                                        );
                                    }
                                    __field9 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            InvoiceCollectionMethod,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field10 => {
                                    if _serde::__private::Option::is_some(&__field10) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "created",
                                            ),
                                        );
                                    }
                                    __field10 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                    );
                                }
                                __Field::__field11 => {
                                    if _serde::__private::Option::is_some(&__field11) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "currency",
                                            ),
                                        );
                                    }
                                    __field11 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            _rt::String,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field12 => {
                                    if _serde::__private::Option::is_some(&__field12) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "customer",
                                            ),
                                        );
                                    }
                                    __field12 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field13 => {
                                    if _serde::__private::Option::is_some(&__field13) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "customer_email",
                                            ),
                                        );
                                    }
                                    __field13 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field14 => {
                                    if _serde::__private::Option::is_some(&__field14) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "customer_name",
                                            ),
                                        );
                                    }
                                    __field14 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field15 => {
                                    if _serde::__private::Option::is_some(&__field15) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "event_type",
                                            ),
                                        );
                                    }
                                    __field15 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            InvoiceEventType,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field16 => {
                                    if _serde::__private::Option::is_some(&__field16) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "hosted_invoice_url",
                                            ),
                                        );
                                    }
                                    __field16 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field17 => {
                                    if _serde::__private::Option::is_some(&__field17) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                        );
                                    }
                                    __field17 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field18 => {
                                    if _serde::__private::Option::is_some(&__field18) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("lines"),
                                        );
                                    }
                                    __field18 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            InvoiceLines,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field19 => {
                                    if _serde::__private::Option::is_some(&__field19) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("paid"),
                                        );
                                    }
                                    __field19 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<bool>(&mut __map)?,
                                    );
                                }
                                __Field::__field20 => {
                                    if _serde::__private::Option::is_some(&__field20) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "paid_out_of_band",
                                            ),
                                        );
                                    }
                                    __field20 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<bool>(&mut __map)?,
                                    );
                                }
                                __Field::__field21 => {
                                    if _serde::__private::Option::is_some(&__field21) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "period_end",
                                            ),
                                        );
                                    }
                                    __field21 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                    );
                                }
                                __Field::__field22 => {
                                    if _serde::__private::Option::is_some(&__field22) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "period_start",
                                            ),
                                        );
                                    }
                                    __field22 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                    );
                                }
                                __Field::__field23 => {
                                    if _serde::__private::Option::is_some(&__field23) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("status"),
                                        );
                                    }
                                    __field23 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<InvoiceStatus>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field24 => {
                                    if _serde::__private::Option::is_some(&__field24) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "subtotal",
                                            ),
                                        );
                                    }
                                    __field24 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                    );
                                }
                                __Field::__field25 => {
                                    if _serde::__private::Option::is_some(&__field25) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("total"),
                                        );
                                    }
                                    __field25 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                    );
                                }
                                _ => {
                                    let _ = _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map)?;
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("account_country")?
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("account_name")?
                            }
                        };
                        let __field2 = match __field2 {
                            _serde::__private::Some(__field2) => __field2,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("amount_due")?
                            }
                        };
                        let __field3 = match __field3 {
                            _serde::__private::Some(__field3) => __field3,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("amount_paid")?
                            }
                        };
                        let __field4 = match __field4 {
                            _serde::__private::Some(__field4) => __field4,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("amount_remaining")?
                            }
                        };
                        let __field5 = match __field5 {
                            _serde::__private::Some(__field5) => __field5,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("amount_shipping")?
                            }
                        };
                        let __field6 = match __field6 {
                            _serde::__private::Some(__field6) => __field6,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("attempt_count")?
                            }
                        };
                        let __field7 = match __field7 {
                            _serde::__private::Some(__field7) => __field7,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("attempted")?
                            }
                        };
                        let __field8 = match __field8 {
                            _serde::__private::Some(__field8) => __field8,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("billing_reason")?
                            }
                        };
                        let __field9 = match __field9 {
                            _serde::__private::Some(__field9) => __field9,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("collection_method")?
                            }
                        };
                        let __field10 = match __field10 {
                            _serde::__private::Some(__field10) => __field10,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("created")?
                            }
                        };
                        let __field11 = match __field11 {
                            _serde::__private::Some(__field11) => __field11,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("currency")?
                            }
                        };
                        let __field12 = match __field12 {
                            _serde::__private::Some(__field12) => __field12,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("customer")?
                            }
                        };
                        let __field13 = match __field13 {
                            _serde::__private::Some(__field13) => __field13,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("customer_email")?
                            }
                        };
                        let __field14 = match __field14 {
                            _serde::__private::Some(__field14) => __field14,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("customer_name")?
                            }
                        };
                        let __field15 = match __field15 {
                            _serde::__private::Some(__field15) => __field15,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("event_type")?
                            }
                        };
                        let __field16 = match __field16 {
                            _serde::__private::Some(__field16) => __field16,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("hosted_invoice_url")?
                            }
                        };
                        let __field17 = match __field17 {
                            _serde::__private::Some(__field17) => __field17,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("id")?
                            }
                        };
                        let __field18 = match __field18 {
                            _serde::__private::Some(__field18) => __field18,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("lines")?
                            }
                        };
                        let __field19 = match __field19 {
                            _serde::__private::Some(__field19) => __field19,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("paid")?
                            }
                        };
                        let __field20 = match __field20 {
                            _serde::__private::Some(__field20) => __field20,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("paid_out_of_band")?
                            }
                        };
                        let __field21 = match __field21 {
                            _serde::__private::Some(__field21) => __field21,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("period_end")?
                            }
                        };
                        let __field22 = match __field22 {
                            _serde::__private::Some(__field22) => __field22,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("period_start")?
                            }
                        };
                        let __field23 = match __field23 {
                            _serde::__private::Some(__field23) => __field23,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("status")?
                            }
                        };
                        let __field24 = match __field24 {
                            _serde::__private::Some(__field24) => __field24,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("subtotal")?
                            }
                        };
                        let __field25 = match __field25 {
                            _serde::__private::Some(__field25) => __field25,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("total")?
                            }
                        };
                        _serde::__private::Ok(Invoice {
                            account_country: __field0,
                            account_name: __field1,
                            amount_due: __field2,
                            amount_paid: __field3,
                            amount_remaining: __field4,
                            amount_shipping: __field5,
                            attempt_count: __field6,
                            attempted: __field7,
                            billing_reason: __field8,
                            collection_method: __field9,
                            created: __field10,
                            currency: __field11,
                            customer: __field12,
                            customer_email: __field13,
                            customer_name: __field14,
                            event_type: __field15,
                            hosted_invoice_url: __field16,
                            id: __field17,
                            lines: __field18,
                            paid: __field19,
                            paid_out_of_band: __field20,
                            period_end: __field21,
                            period_start: __field22,
                            status: __field23,
                            subtotal: __field24,
                            total: __field25,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &[
                    "account_country",
                    "account_name",
                    "amount_due",
                    "amount_paid",
                    "amount_remaining",
                    "amount_shipping",
                    "attempt_count",
                    "attempted",
                    "billing_reason",
                    "collection_method",
                    "created",
                    "currency",
                    "customer",
                    "customer_email",
                    "customer_name",
                    "event_type",
                    "hosted_invoice_url",
                    "id",
                    "lines",
                    "paid",
                    "paid_out_of_band",
                    "period_end",
                    "period_start",
                    "status",
                    "subtotal",
                    "total",
                ];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "Invoice",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<Invoice>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for Invoice {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = _serde::Serializer::serialize_struct(
                    __serializer,
                    "Invoice",
                    false as usize + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
                        + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "account_country",
                    &self.account_country,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "account_name",
                    &self.account_name,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "amount_due",
                    &self.amount_due,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "amount_paid",
                    &self.amount_paid,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "amount_remaining",
                    &self.amount_remaining,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "amount_shipping",
                    &self.amount_shipping,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "attempt_count",
                    &self.attempt_count,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "attempted",
                    &self.attempted,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "billing_reason",
                    &self.billing_reason,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "collection_method",
                    &self.collection_method,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "created",
                    &self.created,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "currency",
                    &self.currency,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "customer",
                    &self.customer,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "customer_email",
                    &self.customer_email,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "customer_name",
                    &self.customer_name,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "event_type",
                    &self.event_type,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "hosted_invoice_url",
                    &self.hosted_invoice_url,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "lines",
                    &self.lines,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "paid",
                    &self.paid,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "paid_out_of_band",
                    &self.paid_out_of_band,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "period_end",
                    &self.period_end,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "period_start",
                    &self.period_start,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "status",
                    &self.status,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "subtotal",
                    &self.subtotal,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "total",
                    &self.total,
                )?;
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for Invoice {
        #[inline]
        fn clone(&self) -> Invoice {
            Invoice {
                account_country: ::core::clone::Clone::clone(&self.account_country),
                account_name: ::core::clone::Clone::clone(&self.account_name),
                amount_due: ::core::clone::Clone::clone(&self.amount_due),
                amount_paid: ::core::clone::Clone::clone(&self.amount_paid),
                amount_remaining: ::core::clone::Clone::clone(&self.amount_remaining),
                amount_shipping: ::core::clone::Clone::clone(&self.amount_shipping),
                attempt_count: ::core::clone::Clone::clone(&self.attempt_count),
                attempted: ::core::clone::Clone::clone(&self.attempted),
                billing_reason: ::core::clone::Clone::clone(&self.billing_reason),
                collection_method: ::core::clone::Clone::clone(&self.collection_method),
                created: ::core::clone::Clone::clone(&self.created),
                currency: ::core::clone::Clone::clone(&self.currency),
                customer: ::core::clone::Clone::clone(&self.customer),
                customer_email: ::core::clone::Clone::clone(&self.customer_email),
                customer_name: ::core::clone::Clone::clone(&self.customer_name),
                event_type: ::core::clone::Clone::clone(&self.event_type),
                hosted_invoice_url: ::core::clone::Clone::clone(
                    &self.hosted_invoice_url,
                ),
                id: ::core::clone::Clone::clone(&self.id),
                lines: ::core::clone::Clone::clone(&self.lines),
                paid: ::core::clone::Clone::clone(&self.paid),
                paid_out_of_band: ::core::clone::Clone::clone(&self.paid_out_of_band),
                period_end: ::core::clone::Clone::clone(&self.period_end),
                period_start: ::core::clone::Clone::clone(&self.period_start),
                status: ::core::clone::Clone::clone(&self.status),
                subtotal: ::core::clone::Clone::clone(&self.subtotal),
                total: ::core::clone::Clone::clone(&self.total),
            }
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for Invoice {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for Invoice {
        #[inline]
        fn eq(&self, other: &Invoice) -> bool {
            self.account_country == other.account_country
                && self.account_name == other.account_name
                && self.amount_due == other.amount_due
                && self.amount_paid == other.amount_paid
                && self.amount_remaining == other.amount_remaining
                && self.amount_shipping == other.amount_shipping
                && self.attempt_count == other.attempt_count
                && self.attempted == other.attempted
                && self.billing_reason == other.billing_reason
                && self.collection_method == other.collection_method
                && self.created == other.created && self.currency == other.currency
                && self.customer == other.customer
                && self.customer_email == other.customer_email
                && self.customer_name == other.customer_name
                && self.event_type == other.event_type
                && self.hosted_invoice_url == other.hosted_invoice_url
                && self.id == other.id && self.lines == other.lines
                && self.paid == other.paid
                && self.paid_out_of_band == other.paid_out_of_band
                && self.period_end == other.period_end
                && self.period_start == other.period_start && self.status == other.status
                && self.subtotal == other.subtotal && self.total == other.total
        }
    }
    impl ::core::fmt::Debug for Invoice {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("Invoice")
                .field("account-country", &self.account_country)
                .field("account-name", &self.account_name)
                .field("amount-due", &self.amount_due)
                .field("amount-paid", &self.amount_paid)
                .field("amount-remaining", &self.amount_remaining)
                .field("amount-shipping", &self.amount_shipping)
                .field("attempt-count", &self.attempt_count)
                .field("attempted", &self.attempted)
                .field("billing-reason", &self.billing_reason)
                .field("collection-method", &self.collection_method)
                .field("created", &self.created)
                .field("currency", &self.currency)
                .field("customer", &self.customer)
                .field("customer-email", &self.customer_email)
                .field("customer-name", &self.customer_name)
                .field("event-type", &self.event_type)
                .field("hosted-invoice-url", &self.hosted_invoice_url)
                .field("id", &self.id)
                .field("lines", &self.lines)
                .field("paid", &self.paid)
                .field("paid-out-of-band", &self.paid_out_of_band)
                .field("period-end", &self.period_end)
                .field("period-start", &self.period_start)
                .field("status", &self.status)
                .field("subtotal", &self.subtotal)
                .field("total", &self.total)
                .finish()
        }
    }
    pub struct MerchantData {
        pub category: _rt::String,
        pub category_code: _rt::String,
        pub city: Option<_rt::String>,
        pub country: Option<_rt::String>,
        pub name: Option<_rt::String>,
        pub network_id: _rt::String,
        pub postal_code: Option<_rt::String>,
        pub state: Option<_rt::String>,
        pub tax_id: Option<_rt::String>,
        pub terminal_id: Option<_rt::String>,
        pub url: Option<_rt::String>,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for MerchantData {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                    __field7,
                    __field8,
                    __field9,
                    __field10,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            6u64 => _serde::__private::Ok(__Field::__field6),
                            7u64 => _serde::__private::Ok(__Field::__field7),
                            8u64 => _serde::__private::Ok(__Field::__field8),
                            9u64 => _serde::__private::Ok(__Field::__field9),
                            10u64 => _serde::__private::Ok(__Field::__field10),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "category" => _serde::__private::Ok(__Field::__field0),
                            "category_code" => _serde::__private::Ok(__Field::__field1),
                            "city" => _serde::__private::Ok(__Field::__field2),
                            "country" => _serde::__private::Ok(__Field::__field3),
                            "name" => _serde::__private::Ok(__Field::__field4),
                            "network_id" => _serde::__private::Ok(__Field::__field5),
                            "postal_code" => _serde::__private::Ok(__Field::__field6),
                            "state" => _serde::__private::Ok(__Field::__field7),
                            "tax_id" => _serde::__private::Ok(__Field::__field8),
                            "terminal_id" => _serde::__private::Ok(__Field::__field9),
                            "url" => _serde::__private::Ok(__Field::__field10),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"category" => _serde::__private::Ok(__Field::__field0),
                            b"category_code" => _serde::__private::Ok(__Field::__field1),
                            b"city" => _serde::__private::Ok(__Field::__field2),
                            b"country" => _serde::__private::Ok(__Field::__field3),
                            b"name" => _serde::__private::Ok(__Field::__field4),
                            b"network_id" => _serde::__private::Ok(__Field::__field5),
                            b"postal_code" => _serde::__private::Ok(__Field::__field6),
                            b"state" => _serde::__private::Ok(__Field::__field7),
                            b"tax_id" => _serde::__private::Ok(__Field::__field8),
                            b"terminal_id" => _serde::__private::Ok(__Field::__field9),
                            b"url" => _serde::__private::Ok(__Field::__field10),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<MerchantData>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = MerchantData;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct MerchantData",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match _serde::de::SeqAccess::next_element::<
                            _rt::String,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct MerchantData with 11 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match _serde::de::SeqAccess::next_element::<
                            _rt::String,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct MerchantData with 11 elements",
                                    ),
                                );
                            }
                        };
                        let __field2 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        2usize,
                                        &"struct MerchantData with 11 elements",
                                    ),
                                );
                            }
                        };
                        let __field3 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        3usize,
                                        &"struct MerchantData with 11 elements",
                                    ),
                                );
                            }
                        };
                        let __field4 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        4usize,
                                        &"struct MerchantData with 11 elements",
                                    ),
                                );
                            }
                        };
                        let __field5 = match _serde::de::SeqAccess::next_element::<
                            _rt::String,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        5usize,
                                        &"struct MerchantData with 11 elements",
                                    ),
                                );
                            }
                        };
                        let __field6 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        6usize,
                                        &"struct MerchantData with 11 elements",
                                    ),
                                );
                            }
                        };
                        let __field7 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        7usize,
                                        &"struct MerchantData with 11 elements",
                                    ),
                                );
                            }
                        };
                        let __field8 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        8usize,
                                        &"struct MerchantData with 11 elements",
                                    ),
                                );
                            }
                        };
                        let __field9 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        9usize,
                                        &"struct MerchantData with 11 elements",
                                    ),
                                );
                            }
                        };
                        let __field10 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        10usize,
                                        &"struct MerchantData with 11 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(MerchantData {
                            category: __field0,
                            category_code: __field1,
                            city: __field2,
                            country: __field3,
                            name: __field4,
                            network_id: __field5,
                            postal_code: __field6,
                            state: __field7,
                            tax_id: __field8,
                            terminal_id: __field9,
                            url: __field10,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<_rt::String> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<_rt::String> = _serde::__private::None;
                        let mut __field2: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field3: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field4: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field5: _serde::__private::Option<_rt::String> = _serde::__private::None;
                        let mut __field6: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field7: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field8: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field9: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field10: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                            __Field,
                        >(&mut __map)? {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "category",
                                            ),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            _rt::String,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "category_code",
                                            ),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            _rt::String,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("city"),
                                        );
                                    }
                                    __field2 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field3 => {
                                    if _serde::__private::Option::is_some(&__field3) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "country",
                                            ),
                                        );
                                    }
                                    __field3 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field4 => {
                                    if _serde::__private::Option::is_some(&__field4) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("name"),
                                        );
                                    }
                                    __field4 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field5 => {
                                    if _serde::__private::Option::is_some(&__field5) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "network_id",
                                            ),
                                        );
                                    }
                                    __field5 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            _rt::String,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field6 => {
                                    if _serde::__private::Option::is_some(&__field6) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "postal_code",
                                            ),
                                        );
                                    }
                                    __field6 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field7 => {
                                    if _serde::__private::Option::is_some(&__field7) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("state"),
                                        );
                                    }
                                    __field7 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field8 => {
                                    if _serde::__private::Option::is_some(&__field8) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("tax_id"),
                                        );
                                    }
                                    __field8 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field9 => {
                                    if _serde::__private::Option::is_some(&__field9) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "terminal_id",
                                            ),
                                        );
                                    }
                                    __field9 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field10 => {
                                    if _serde::__private::Option::is_some(&__field10) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("url"),
                                        );
                                    }
                                    __field10 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                _ => {
                                    let _ = _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map)?;
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("category")?
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("category_code")?
                            }
                        };
                        let __field2 = match __field2 {
                            _serde::__private::Some(__field2) => __field2,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("city")?
                            }
                        };
                        let __field3 = match __field3 {
                            _serde::__private::Some(__field3) => __field3,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("country")?
                            }
                        };
                        let __field4 = match __field4 {
                            _serde::__private::Some(__field4) => __field4,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("name")?
                            }
                        };
                        let __field5 = match __field5 {
                            _serde::__private::Some(__field5) => __field5,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("network_id")?
                            }
                        };
                        let __field6 = match __field6 {
                            _serde::__private::Some(__field6) => __field6,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("postal_code")?
                            }
                        };
                        let __field7 = match __field7 {
                            _serde::__private::Some(__field7) => __field7,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("state")?
                            }
                        };
                        let __field8 = match __field8 {
                            _serde::__private::Some(__field8) => __field8,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("tax_id")?
                            }
                        };
                        let __field9 = match __field9 {
                            _serde::__private::Some(__field9) => __field9,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("terminal_id")?
                            }
                        };
                        let __field10 = match __field10 {
                            _serde::__private::Some(__field10) => __field10,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("url")?
                            }
                        };
                        _serde::__private::Ok(MerchantData {
                            category: __field0,
                            category_code: __field1,
                            city: __field2,
                            country: __field3,
                            name: __field4,
                            network_id: __field5,
                            postal_code: __field6,
                            state: __field7,
                            tax_id: __field8,
                            terminal_id: __field9,
                            url: __field10,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &[
                    "category",
                    "category_code",
                    "city",
                    "country",
                    "name",
                    "network_id",
                    "postal_code",
                    "state",
                    "tax_id",
                    "terminal_id",
                    "url",
                ];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "MerchantData",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<MerchantData>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for MerchantData {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = _serde::Serializer::serialize_struct(
                    __serializer,
                    "MerchantData",
                    false as usize + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "category",
                    &self.category,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "category_code",
                    &self.category_code,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "city",
                    &self.city,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "country",
                    &self.country,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "name",
                    &self.name,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "network_id",
                    &self.network_id,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "postal_code",
                    &self.postal_code,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "state",
                    &self.state,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "tax_id",
                    &self.tax_id,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "terminal_id",
                    &self.terminal_id,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "url",
                    &self.url,
                )?;
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for MerchantData {
        #[inline]
        fn clone(&self) -> MerchantData {
            MerchantData {
                category: ::core::clone::Clone::clone(&self.category),
                category_code: ::core::clone::Clone::clone(&self.category_code),
                city: ::core::clone::Clone::clone(&self.city),
                country: ::core::clone::Clone::clone(&self.country),
                name: ::core::clone::Clone::clone(&self.name),
                network_id: ::core::clone::Clone::clone(&self.network_id),
                postal_code: ::core::clone::Clone::clone(&self.postal_code),
                state: ::core::clone::Clone::clone(&self.state),
                tax_id: ::core::clone::Clone::clone(&self.tax_id),
                terminal_id: ::core::clone::Clone::clone(&self.terminal_id),
                url: ::core::clone::Clone::clone(&self.url),
            }
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for MerchantData {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for MerchantData {
        #[inline]
        fn eq(&self, other: &MerchantData) -> bool {
            self.category == other.category && self.category_code == other.category_code
                && self.city == other.city && self.country == other.country
                && self.name == other.name && self.network_id == other.network_id
                && self.postal_code == other.postal_code && self.state == other.state
                && self.tax_id == other.tax_id && self.terminal_id == other.terminal_id
                && self.url == other.url
        }
    }
    impl ::core::fmt::Debug for MerchantData {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("MerchantData")
                .field("category", &self.category)
                .field("category-code", &self.category_code)
                .field("city", &self.city)
                .field("country", &self.country)
                .field("name", &self.name)
                .field("network-id", &self.network_id)
                .field("postal-code", &self.postal_code)
                .field("state", &self.state)
                .field("tax-id", &self.tax_id)
                .field("terminal-id", &self.terminal_id)
                .field("url", &self.url)
                .finish()
        }
    }
    pub struct IssuingAuthorization {
        pub amount: i32,
        pub amount_details: Option<IssuingAuthorizationAmountDetails>,
        pub approved: bool,
        pub authorization_method: IssuingAuthorizationAuthorizationMethod,
        pub card: _rt::String,
        pub cardholder: Option<_rt::String>,
        pub created: i32,
        pub currency: _rt::String,
        pub event_type: IssuingAuthorizationEventType,
        pub id: _rt::String,
        pub merchant_amount: i32,
        pub merchant_currency: _rt::String,
        pub merchant_data: MerchantData,
        pub status: IssuingAuthorizationStatus,
        pub wallet: Option<_rt::String>,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for IssuingAuthorization {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                    __field7,
                    __field8,
                    __field9,
                    __field10,
                    __field11,
                    __field12,
                    __field13,
                    __field14,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            6u64 => _serde::__private::Ok(__Field::__field6),
                            7u64 => _serde::__private::Ok(__Field::__field7),
                            8u64 => _serde::__private::Ok(__Field::__field8),
                            9u64 => _serde::__private::Ok(__Field::__field9),
                            10u64 => _serde::__private::Ok(__Field::__field10),
                            11u64 => _serde::__private::Ok(__Field::__field11),
                            12u64 => _serde::__private::Ok(__Field::__field12),
                            13u64 => _serde::__private::Ok(__Field::__field13),
                            14u64 => _serde::__private::Ok(__Field::__field14),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "amount" => _serde::__private::Ok(__Field::__field0),
                            "amount_details" => _serde::__private::Ok(__Field::__field1),
                            "approved" => _serde::__private::Ok(__Field::__field2),
                            "authorization_method" => {
                                _serde::__private::Ok(__Field::__field3)
                            }
                            "card" => _serde::__private::Ok(__Field::__field4),
                            "cardholder" => _serde::__private::Ok(__Field::__field5),
                            "created" => _serde::__private::Ok(__Field::__field6),
                            "currency" => _serde::__private::Ok(__Field::__field7),
                            "event_type" => _serde::__private::Ok(__Field::__field8),
                            "id" => _serde::__private::Ok(__Field::__field9),
                            "merchant_amount" => {
                                _serde::__private::Ok(__Field::__field10)
                            }
                            "merchant_currency" => {
                                _serde::__private::Ok(__Field::__field11)
                            }
                            "merchant_data" => _serde::__private::Ok(__Field::__field12),
                            "status" => _serde::__private::Ok(__Field::__field13),
                            "wallet" => _serde::__private::Ok(__Field::__field14),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"amount" => _serde::__private::Ok(__Field::__field0),
                            b"amount_details" => _serde::__private::Ok(__Field::__field1),
                            b"approved" => _serde::__private::Ok(__Field::__field2),
                            b"authorization_method" => {
                                _serde::__private::Ok(__Field::__field3)
                            }
                            b"card" => _serde::__private::Ok(__Field::__field4),
                            b"cardholder" => _serde::__private::Ok(__Field::__field5),
                            b"created" => _serde::__private::Ok(__Field::__field6),
                            b"currency" => _serde::__private::Ok(__Field::__field7),
                            b"event_type" => _serde::__private::Ok(__Field::__field8),
                            b"id" => _serde::__private::Ok(__Field::__field9),
                            b"merchant_amount" => {
                                _serde::__private::Ok(__Field::__field10)
                            }
                            b"merchant_currency" => {
                                _serde::__private::Ok(__Field::__field11)
                            }
                            b"merchant_data" => _serde::__private::Ok(__Field::__field12),
                            b"status" => _serde::__private::Ok(__Field::__field13),
                            b"wallet" => _serde::__private::Ok(__Field::__field14),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<IssuingAuthorization>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = IssuingAuthorization;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct IssuingAuthorization",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match _serde::de::SeqAccess::next_element::<
                            i32,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct IssuingAuthorization with 15 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match _serde::de::SeqAccess::next_element::<
                            Option<IssuingAuthorizationAmountDetails>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct IssuingAuthorization with 15 elements",
                                    ),
                                );
                            }
                        };
                        let __field2 = match _serde::de::SeqAccess::next_element::<
                            bool,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        2usize,
                                        &"struct IssuingAuthorization with 15 elements",
                                    ),
                                );
                            }
                        };
                        let __field3 = match _serde::de::SeqAccess::next_element::<
                            IssuingAuthorizationAuthorizationMethod,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        3usize,
                                        &"struct IssuingAuthorization with 15 elements",
                                    ),
                                );
                            }
                        };
                        let __field4 = match _serde::de::SeqAccess::next_element::<
                            _rt::String,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        4usize,
                                        &"struct IssuingAuthorization with 15 elements",
                                    ),
                                );
                            }
                        };
                        let __field5 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        5usize,
                                        &"struct IssuingAuthorization with 15 elements",
                                    ),
                                );
                            }
                        };
                        let __field6 = match _serde::de::SeqAccess::next_element::<
                            i32,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        6usize,
                                        &"struct IssuingAuthorization with 15 elements",
                                    ),
                                );
                            }
                        };
                        let __field7 = match _serde::de::SeqAccess::next_element::<
                            _rt::String,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        7usize,
                                        &"struct IssuingAuthorization with 15 elements",
                                    ),
                                );
                            }
                        };
                        let __field8 = match _serde::de::SeqAccess::next_element::<
                            IssuingAuthorizationEventType,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        8usize,
                                        &"struct IssuingAuthorization with 15 elements",
                                    ),
                                );
                            }
                        };
                        let __field9 = match _serde::de::SeqAccess::next_element::<
                            _rt::String,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        9usize,
                                        &"struct IssuingAuthorization with 15 elements",
                                    ),
                                );
                            }
                        };
                        let __field10 = match _serde::de::SeqAccess::next_element::<
                            i32,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        10usize,
                                        &"struct IssuingAuthorization with 15 elements",
                                    ),
                                );
                            }
                        };
                        let __field11 = match _serde::de::SeqAccess::next_element::<
                            _rt::String,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        11usize,
                                        &"struct IssuingAuthorization with 15 elements",
                                    ),
                                );
                            }
                        };
                        let __field12 = match _serde::de::SeqAccess::next_element::<
                            MerchantData,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        12usize,
                                        &"struct IssuingAuthorization with 15 elements",
                                    ),
                                );
                            }
                        };
                        let __field13 = match _serde::de::SeqAccess::next_element::<
                            IssuingAuthorizationStatus,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        13usize,
                                        &"struct IssuingAuthorization with 15 elements",
                                    ),
                                );
                            }
                        };
                        let __field14 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        14usize,
                                        &"struct IssuingAuthorization with 15 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(IssuingAuthorization {
                            amount: __field0,
                            amount_details: __field1,
                            approved: __field2,
                            authorization_method: __field3,
                            card: __field4,
                            cardholder: __field5,
                            created: __field6,
                            currency: __field7,
                            event_type: __field8,
                            id: __field9,
                            merchant_amount: __field10,
                            merchant_currency: __field11,
                            merchant_data: __field12,
                            status: __field13,
                            wallet: __field14,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<i32> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<
                            Option<IssuingAuthorizationAmountDetails>,
                        > = _serde::__private::None;
                        let mut __field2: _serde::__private::Option<bool> = _serde::__private::None;
                        let mut __field3: _serde::__private::Option<
                            IssuingAuthorizationAuthorizationMethod,
                        > = _serde::__private::None;
                        let mut __field4: _serde::__private::Option<_rt::String> = _serde::__private::None;
                        let mut __field5: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field6: _serde::__private::Option<i32> = _serde::__private::None;
                        let mut __field7: _serde::__private::Option<_rt::String> = _serde::__private::None;
                        let mut __field8: _serde::__private::Option<
                            IssuingAuthorizationEventType,
                        > = _serde::__private::None;
                        let mut __field9: _serde::__private::Option<_rt::String> = _serde::__private::None;
                        let mut __field10: _serde::__private::Option<i32> = _serde::__private::None;
                        let mut __field11: _serde::__private::Option<_rt::String> = _serde::__private::None;
                        let mut __field12: _serde::__private::Option<MerchantData> = _serde::__private::None;
                        let mut __field13: _serde::__private::Option<
                            IssuingAuthorizationStatus,
                        > = _serde::__private::None;
                        let mut __field14: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                            __Field,
                        >(&mut __map)? {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("amount"),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "amount_details",
                                            ),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<IssuingAuthorizationAmountDetails>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "approved",
                                            ),
                                        );
                                    }
                                    __field2 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<bool>(&mut __map)?,
                                    );
                                }
                                __Field::__field3 => {
                                    if _serde::__private::Option::is_some(&__field3) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "authorization_method",
                                            ),
                                        );
                                    }
                                    __field3 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            IssuingAuthorizationAuthorizationMethod,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field4 => {
                                    if _serde::__private::Option::is_some(&__field4) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("card"),
                                        );
                                    }
                                    __field4 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            _rt::String,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field5 => {
                                    if _serde::__private::Option::is_some(&__field5) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "cardholder",
                                            ),
                                        );
                                    }
                                    __field5 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field6 => {
                                    if _serde::__private::Option::is_some(&__field6) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "created",
                                            ),
                                        );
                                    }
                                    __field6 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                    );
                                }
                                __Field::__field7 => {
                                    if _serde::__private::Option::is_some(&__field7) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "currency",
                                            ),
                                        );
                                    }
                                    __field7 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            _rt::String,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field8 => {
                                    if _serde::__private::Option::is_some(&__field8) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "event_type",
                                            ),
                                        );
                                    }
                                    __field8 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            IssuingAuthorizationEventType,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field9 => {
                                    if _serde::__private::Option::is_some(&__field9) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                        );
                                    }
                                    __field9 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            _rt::String,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field10 => {
                                    if _serde::__private::Option::is_some(&__field10) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "merchant_amount",
                                            ),
                                        );
                                    }
                                    __field10 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                    );
                                }
                                __Field::__field11 => {
                                    if _serde::__private::Option::is_some(&__field11) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "merchant_currency",
                                            ),
                                        );
                                    }
                                    __field11 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            _rt::String,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field12 => {
                                    if _serde::__private::Option::is_some(&__field12) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "merchant_data",
                                            ),
                                        );
                                    }
                                    __field12 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            MerchantData,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field13 => {
                                    if _serde::__private::Option::is_some(&__field13) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("status"),
                                        );
                                    }
                                    __field13 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            IssuingAuthorizationStatus,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field14 => {
                                    if _serde::__private::Option::is_some(&__field14) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("wallet"),
                                        );
                                    }
                                    __field14 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                _ => {
                                    let _ = _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map)?;
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("amount")?
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("amount_details")?
                            }
                        };
                        let __field2 = match __field2 {
                            _serde::__private::Some(__field2) => __field2,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("approved")?
                            }
                        };
                        let __field3 = match __field3 {
                            _serde::__private::Some(__field3) => __field3,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field(
                                    "authorization_method",
                                )?
                            }
                        };
                        let __field4 = match __field4 {
                            _serde::__private::Some(__field4) => __field4,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("card")?
                            }
                        };
                        let __field5 = match __field5 {
                            _serde::__private::Some(__field5) => __field5,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("cardholder")?
                            }
                        };
                        let __field6 = match __field6 {
                            _serde::__private::Some(__field6) => __field6,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("created")?
                            }
                        };
                        let __field7 = match __field7 {
                            _serde::__private::Some(__field7) => __field7,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("currency")?
                            }
                        };
                        let __field8 = match __field8 {
                            _serde::__private::Some(__field8) => __field8,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("event_type")?
                            }
                        };
                        let __field9 = match __field9 {
                            _serde::__private::Some(__field9) => __field9,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("id")?
                            }
                        };
                        let __field10 = match __field10 {
                            _serde::__private::Some(__field10) => __field10,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("merchant_amount")?
                            }
                        };
                        let __field11 = match __field11 {
                            _serde::__private::Some(__field11) => __field11,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("merchant_currency")?
                            }
                        };
                        let __field12 = match __field12 {
                            _serde::__private::Some(__field12) => __field12,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("merchant_data")?
                            }
                        };
                        let __field13 = match __field13 {
                            _serde::__private::Some(__field13) => __field13,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("status")?
                            }
                        };
                        let __field14 = match __field14 {
                            _serde::__private::Some(__field14) => __field14,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("wallet")?
                            }
                        };
                        _serde::__private::Ok(IssuingAuthorization {
                            amount: __field0,
                            amount_details: __field1,
                            approved: __field2,
                            authorization_method: __field3,
                            card: __field4,
                            cardholder: __field5,
                            created: __field6,
                            currency: __field7,
                            event_type: __field8,
                            id: __field9,
                            merchant_amount: __field10,
                            merchant_currency: __field11,
                            merchant_data: __field12,
                            status: __field13,
                            wallet: __field14,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &[
                    "amount",
                    "amount_details",
                    "approved",
                    "authorization_method",
                    "card",
                    "cardholder",
                    "created",
                    "currency",
                    "event_type",
                    "id",
                    "merchant_amount",
                    "merchant_currency",
                    "merchant_data",
                    "status",
                    "wallet",
                ];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "IssuingAuthorization",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<IssuingAuthorization>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for IssuingAuthorization {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = _serde::Serializer::serialize_struct(
                    __serializer,
                    "IssuingAuthorization",
                    false as usize + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
                        + 1 + 1,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "amount",
                    &self.amount,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "amount_details",
                    &self.amount_details,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "approved",
                    &self.approved,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "authorization_method",
                    &self.authorization_method,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "card",
                    &self.card,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "cardholder",
                    &self.cardholder,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "created",
                    &self.created,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "currency",
                    &self.currency,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "event_type",
                    &self.event_type,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "merchant_amount",
                    &self.merchant_amount,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "merchant_currency",
                    &self.merchant_currency,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "merchant_data",
                    &self.merchant_data,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "status",
                    &self.status,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "wallet",
                    &self.wallet,
                )?;
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for IssuingAuthorization {
        #[inline]
        fn clone(&self) -> IssuingAuthorization {
            IssuingAuthorization {
                amount: ::core::clone::Clone::clone(&self.amount),
                amount_details: ::core::clone::Clone::clone(&self.amount_details),
                approved: ::core::clone::Clone::clone(&self.approved),
                authorization_method: ::core::clone::Clone::clone(
                    &self.authorization_method,
                ),
                card: ::core::clone::Clone::clone(&self.card),
                cardholder: ::core::clone::Clone::clone(&self.cardholder),
                created: ::core::clone::Clone::clone(&self.created),
                currency: ::core::clone::Clone::clone(&self.currency),
                event_type: ::core::clone::Clone::clone(&self.event_type),
                id: ::core::clone::Clone::clone(&self.id),
                merchant_amount: ::core::clone::Clone::clone(&self.merchant_amount),
                merchant_currency: ::core::clone::Clone::clone(&self.merchant_currency),
                merchant_data: ::core::clone::Clone::clone(&self.merchant_data),
                status: ::core::clone::Clone::clone(&self.status),
                wallet: ::core::clone::Clone::clone(&self.wallet),
            }
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for IssuingAuthorization {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for IssuingAuthorization {
        #[inline]
        fn eq(&self, other: &IssuingAuthorization) -> bool {
            self.amount == other.amount && self.amount_details == other.amount_details
                && self.approved == other.approved
                && self.authorization_method == other.authorization_method
                && self.card == other.card && self.cardholder == other.cardholder
                && self.created == other.created && self.currency == other.currency
                && self.event_type == other.event_type && self.id == other.id
                && self.merchant_amount == other.merchant_amount
                && self.merchant_currency == other.merchant_currency
                && self.merchant_data == other.merchant_data
                && self.status == other.status && self.wallet == other.wallet
        }
    }
    impl ::core::fmt::Debug for IssuingAuthorization {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("IssuingAuthorization")
                .field("amount", &self.amount)
                .field("amount-details", &self.amount_details)
                .field("approved", &self.approved)
                .field("authorization-method", &self.authorization_method)
                .field("card", &self.card)
                .field("cardholder", &self.cardholder)
                .field("created", &self.created)
                .field("currency", &self.currency)
                .field("event-type", &self.event_type)
                .field("id", &self.id)
                .field("merchant-amount", &self.merchant_amount)
                .field("merchant-currency", &self.merchant_currency)
                .field("merchant-data", &self.merchant_data)
                .field("status", &self.status)
                .field("wallet", &self.wallet)
                .finish()
        }
    }
    pub enum PaymentIntentCancellationReason {
        Abandoned,
        Automatic,
        Duplicate,
        FailedInvoice,
        Fraudulent,
        RequestedByCustomer,
        VoidInvoice,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for PaymentIntentCancellationReason {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            6u64 => _serde::__private::Ok(__Field::__field6),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 7",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "Abandoned" => _serde::__private::Ok(__Field::__field0),
                            "Automatic" => _serde::__private::Ok(__Field::__field1),
                            "Duplicate" => _serde::__private::Ok(__Field::__field2),
                            "FailedInvoice" => _serde::__private::Ok(__Field::__field3),
                            "Fraudulent" => _serde::__private::Ok(__Field::__field4),
                            "RequestedByCustomer" => {
                                _serde::__private::Ok(__Field::__field5)
                            }
                            "VoidInvoice" => _serde::__private::Ok(__Field::__field6),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"Abandoned" => _serde::__private::Ok(__Field::__field0),
                            b"Automatic" => _serde::__private::Ok(__Field::__field1),
                            b"Duplicate" => _serde::__private::Ok(__Field::__field2),
                            b"FailedInvoice" => _serde::__private::Ok(__Field::__field3),
                            b"Fraudulent" => _serde::__private::Ok(__Field::__field4),
                            b"RequestedByCustomer" => {
                                _serde::__private::Ok(__Field::__field5)
                            }
                            b"VoidInvoice" => _serde::__private::Ok(__Field::__field6),
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<
                        PaymentIntentCancellationReason,
                    >,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = PaymentIntentCancellationReason;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum PaymentIntentCancellationReason",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    PaymentIntentCancellationReason::Abandoned,
                                )
                            }
                            (__Field::__field1, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    PaymentIntentCancellationReason::Automatic,
                                )
                            }
                            (__Field::__field2, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    PaymentIntentCancellationReason::Duplicate,
                                )
                            }
                            (__Field::__field3, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    PaymentIntentCancellationReason::FailedInvoice,
                                )
                            }
                            (__Field::__field4, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    PaymentIntentCancellationReason::Fraudulent,
                                )
                            }
                            (__Field::__field5, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    PaymentIntentCancellationReason::RequestedByCustomer,
                                )
                            }
                            (__Field::__field6, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    PaymentIntentCancellationReason::VoidInvoice,
                                )
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &[
                    "Abandoned",
                    "Automatic",
                    "Duplicate",
                    "FailedInvoice",
                    "Fraudulent",
                    "RequestedByCustomer",
                    "VoidInvoice",
                ];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "PaymentIntentCancellationReason",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<
                            PaymentIntentCancellationReason,
                        >,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for PaymentIntentCancellationReason {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    PaymentIntentCancellationReason::Abandoned => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "PaymentIntentCancellationReason",
                            0u32,
                            "Abandoned",
                        )
                    }
                    PaymentIntentCancellationReason::Automatic => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "PaymentIntentCancellationReason",
                            1u32,
                            "Automatic",
                        )
                    }
                    PaymentIntentCancellationReason::Duplicate => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "PaymentIntentCancellationReason",
                            2u32,
                            "Duplicate",
                        )
                    }
                    PaymentIntentCancellationReason::FailedInvoice => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "PaymentIntentCancellationReason",
                            3u32,
                            "FailedInvoice",
                        )
                    }
                    PaymentIntentCancellationReason::Fraudulent => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "PaymentIntentCancellationReason",
                            4u32,
                            "Fraudulent",
                        )
                    }
                    PaymentIntentCancellationReason::RequestedByCustomer => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "PaymentIntentCancellationReason",
                            5u32,
                            "RequestedByCustomer",
                        )
                    }
                    PaymentIntentCancellationReason::VoidInvoice => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "PaymentIntentCancellationReason",
                            6u32,
                            "VoidInvoice",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for PaymentIntentCancellationReason {
        #[inline]
        fn clone(&self) -> PaymentIntentCancellationReason {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for PaymentIntentCancellationReason {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for PaymentIntentCancellationReason {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for PaymentIntentCancellationReason {
        #[inline]
        fn eq(&self, other: &PaymentIntentCancellationReason) -> bool {
            let __self_discr = ::core::intrinsics::discriminant_value(self);
            let __arg1_discr = ::core::intrinsics::discriminant_value(other);
            __self_discr == __arg1_discr
        }
    }
    impl ::core::fmt::Debug for PaymentIntentCancellationReason {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                PaymentIntentCancellationReason::Abandoned => {
                    f.debug_tuple("PaymentIntentCancellationReason::Abandoned").finish()
                }
                PaymentIntentCancellationReason::Automatic => {
                    f.debug_tuple("PaymentIntentCancellationReason::Automatic").finish()
                }
                PaymentIntentCancellationReason::Duplicate => {
                    f.debug_tuple("PaymentIntentCancellationReason::Duplicate").finish()
                }
                PaymentIntentCancellationReason::FailedInvoice => {
                    f.debug_tuple("PaymentIntentCancellationReason::FailedInvoice")
                        .finish()
                }
                PaymentIntentCancellationReason::Fraudulent => {
                    f.debug_tuple("PaymentIntentCancellationReason::Fraudulent").finish()
                }
                PaymentIntentCancellationReason::RequestedByCustomer => {
                    f.debug_tuple("PaymentIntentCancellationReason::RequestedByCustomer")
                        .finish()
                }
                PaymentIntentCancellationReason::VoidInvoice => {
                    f.debug_tuple("PaymentIntentCancellationReason::VoidInvoice")
                        .finish()
                }
            }
        }
    }
    pub enum PaymentIntentCaptureMethod {
        Automatic,
        AutomaticAsync,
        Manual,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for PaymentIntentCaptureMethod {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 3",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "Automatic" => _serde::__private::Ok(__Field::__field0),
                            "AutomaticAsync" => _serde::__private::Ok(__Field::__field1),
                            "Manual" => _serde::__private::Ok(__Field::__field2),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"Automatic" => _serde::__private::Ok(__Field::__field0),
                            b"AutomaticAsync" => _serde::__private::Ok(__Field::__field1),
                            b"Manual" => _serde::__private::Ok(__Field::__field2),
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<PaymentIntentCaptureMethod>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = PaymentIntentCaptureMethod;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum PaymentIntentCaptureMethod",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(PaymentIntentCaptureMethod::Automatic)
                            }
                            (__Field::__field1, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    PaymentIntentCaptureMethod::AutomaticAsync,
                                )
                            }
                            (__Field::__field2, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(PaymentIntentCaptureMethod::Manual)
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &[
                    "Automatic",
                    "AutomaticAsync",
                    "Manual",
                ];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "PaymentIntentCaptureMethod",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<
                            PaymentIntentCaptureMethod,
                        >,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for PaymentIntentCaptureMethod {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    PaymentIntentCaptureMethod::Automatic => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "PaymentIntentCaptureMethod",
                            0u32,
                            "Automatic",
                        )
                    }
                    PaymentIntentCaptureMethod::AutomaticAsync => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "PaymentIntentCaptureMethod",
                            1u32,
                            "AutomaticAsync",
                        )
                    }
                    PaymentIntentCaptureMethod::Manual => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "PaymentIntentCaptureMethod",
                            2u32,
                            "Manual",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for PaymentIntentCaptureMethod {
        #[inline]
        fn clone(&self) -> PaymentIntentCaptureMethod {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for PaymentIntentCaptureMethod {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for PaymentIntentCaptureMethod {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for PaymentIntentCaptureMethod {
        #[inline]
        fn eq(&self, other: &PaymentIntentCaptureMethod) -> bool {
            let __self_discr = ::core::intrinsics::discriminant_value(self);
            let __arg1_discr = ::core::intrinsics::discriminant_value(other);
            __self_discr == __arg1_discr
        }
    }
    impl ::core::fmt::Debug for PaymentIntentCaptureMethod {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                PaymentIntentCaptureMethod::Automatic => {
                    f.debug_tuple("PaymentIntentCaptureMethod::Automatic").finish()
                }
                PaymentIntentCaptureMethod::AutomaticAsync => {
                    f.debug_tuple("PaymentIntentCaptureMethod::AutomaticAsync").finish()
                }
                PaymentIntentCaptureMethod::Manual => {
                    f.debug_tuple("PaymentIntentCaptureMethod::Manual").finish()
                }
            }
        }
    }
    pub enum PaymentIntentConfirmationMethod {
        Automatic,
        Manual,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for PaymentIntentConfirmationMethod {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 2",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "Automatic" => _serde::__private::Ok(__Field::__field0),
                            "Manual" => _serde::__private::Ok(__Field::__field1),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"Automatic" => _serde::__private::Ok(__Field::__field0),
                            b"Manual" => _serde::__private::Ok(__Field::__field1),
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<
                        PaymentIntentConfirmationMethod,
                    >,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = PaymentIntentConfirmationMethod;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum PaymentIntentConfirmationMethod",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    PaymentIntentConfirmationMethod::Automatic,
                                )
                            }
                            (__Field::__field1, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    PaymentIntentConfirmationMethod::Manual,
                                )
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &["Automatic", "Manual"];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "PaymentIntentConfirmationMethod",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<
                            PaymentIntentConfirmationMethod,
                        >,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for PaymentIntentConfirmationMethod {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    PaymentIntentConfirmationMethod::Automatic => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "PaymentIntentConfirmationMethod",
                            0u32,
                            "Automatic",
                        )
                    }
                    PaymentIntentConfirmationMethod::Manual => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "PaymentIntentConfirmationMethod",
                            1u32,
                            "Manual",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for PaymentIntentConfirmationMethod {
        #[inline]
        fn clone(&self) -> PaymentIntentConfirmationMethod {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for PaymentIntentConfirmationMethod {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for PaymentIntentConfirmationMethod {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for PaymentIntentConfirmationMethod {
        #[inline]
        fn eq(&self, other: &PaymentIntentConfirmationMethod) -> bool {
            let __self_discr = ::core::intrinsics::discriminant_value(self);
            let __arg1_discr = ::core::intrinsics::discriminant_value(other);
            __self_discr == __arg1_discr
        }
    }
    impl ::core::fmt::Debug for PaymentIntentConfirmationMethod {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                PaymentIntentConfirmationMethod::Automatic => {
                    f.debug_tuple("PaymentIntentConfirmationMethod::Automatic").finish()
                }
                PaymentIntentConfirmationMethod::Manual => {
                    f.debug_tuple("PaymentIntentConfirmationMethod::Manual").finish()
                }
            }
        }
    }
    pub enum PaymentIntentEventType {
        PaymentIntentAmountCapturableUpdated,
        PaymentIntentCanceled,
        PaymentIntentCreated,
        PaymentIntentPartiallyFunded,
        PaymentIntentPaymentFailed,
        PaymentIntentProcessing,
        PaymentIntentRequiresAction,
        PaymentIntentSucceeded,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for PaymentIntentEventType {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                    __field7,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            6u64 => _serde::__private::Ok(__Field::__field6),
                            7u64 => _serde::__private::Ok(__Field::__field7),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 8",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "PaymentIntentAmountCapturableUpdated" => {
                                _serde::__private::Ok(__Field::__field0)
                            }
                            "PaymentIntentCanceled" => {
                                _serde::__private::Ok(__Field::__field1)
                            }
                            "PaymentIntentCreated" => {
                                _serde::__private::Ok(__Field::__field2)
                            }
                            "PaymentIntentPartiallyFunded" => {
                                _serde::__private::Ok(__Field::__field3)
                            }
                            "PaymentIntentPaymentFailed" => {
                                _serde::__private::Ok(__Field::__field4)
                            }
                            "PaymentIntentProcessing" => {
                                _serde::__private::Ok(__Field::__field5)
                            }
                            "PaymentIntentRequiresAction" => {
                                _serde::__private::Ok(__Field::__field6)
                            }
                            "PaymentIntentSucceeded" => {
                                _serde::__private::Ok(__Field::__field7)
                            }
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"PaymentIntentAmountCapturableUpdated" => {
                                _serde::__private::Ok(__Field::__field0)
                            }
                            b"PaymentIntentCanceled" => {
                                _serde::__private::Ok(__Field::__field1)
                            }
                            b"PaymentIntentCreated" => {
                                _serde::__private::Ok(__Field::__field2)
                            }
                            b"PaymentIntentPartiallyFunded" => {
                                _serde::__private::Ok(__Field::__field3)
                            }
                            b"PaymentIntentPaymentFailed" => {
                                _serde::__private::Ok(__Field::__field4)
                            }
                            b"PaymentIntentProcessing" => {
                                _serde::__private::Ok(__Field::__field5)
                            }
                            b"PaymentIntentRequiresAction" => {
                                _serde::__private::Ok(__Field::__field6)
                            }
                            b"PaymentIntentSucceeded" => {
                                _serde::__private::Ok(__Field::__field7)
                            }
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<PaymentIntentEventType>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = PaymentIntentEventType;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum PaymentIntentEventType",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    PaymentIntentEventType::PaymentIntentAmountCapturableUpdated,
                                )
                            }
                            (__Field::__field1, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    PaymentIntentEventType::PaymentIntentCanceled,
                                )
                            }
                            (__Field::__field2, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    PaymentIntentEventType::PaymentIntentCreated,
                                )
                            }
                            (__Field::__field3, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    PaymentIntentEventType::PaymentIntentPartiallyFunded,
                                )
                            }
                            (__Field::__field4, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    PaymentIntentEventType::PaymentIntentPaymentFailed,
                                )
                            }
                            (__Field::__field5, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    PaymentIntentEventType::PaymentIntentProcessing,
                                )
                            }
                            (__Field::__field6, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    PaymentIntentEventType::PaymentIntentRequiresAction,
                                )
                            }
                            (__Field::__field7, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    PaymentIntentEventType::PaymentIntentSucceeded,
                                )
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &[
                    "PaymentIntentAmountCapturableUpdated",
                    "PaymentIntentCanceled",
                    "PaymentIntentCreated",
                    "PaymentIntentPartiallyFunded",
                    "PaymentIntentPaymentFailed",
                    "PaymentIntentProcessing",
                    "PaymentIntentRequiresAction",
                    "PaymentIntentSucceeded",
                ];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "PaymentIntentEventType",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<PaymentIntentEventType>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for PaymentIntentEventType {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    PaymentIntentEventType::PaymentIntentAmountCapturableUpdated => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "PaymentIntentEventType",
                            0u32,
                            "PaymentIntentAmountCapturableUpdated",
                        )
                    }
                    PaymentIntentEventType::PaymentIntentCanceled => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "PaymentIntentEventType",
                            1u32,
                            "PaymentIntentCanceled",
                        )
                    }
                    PaymentIntentEventType::PaymentIntentCreated => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "PaymentIntentEventType",
                            2u32,
                            "PaymentIntentCreated",
                        )
                    }
                    PaymentIntentEventType::PaymentIntentPartiallyFunded => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "PaymentIntentEventType",
                            3u32,
                            "PaymentIntentPartiallyFunded",
                        )
                    }
                    PaymentIntentEventType::PaymentIntentPaymentFailed => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "PaymentIntentEventType",
                            4u32,
                            "PaymentIntentPaymentFailed",
                        )
                    }
                    PaymentIntentEventType::PaymentIntentProcessing => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "PaymentIntentEventType",
                            5u32,
                            "PaymentIntentProcessing",
                        )
                    }
                    PaymentIntentEventType::PaymentIntentRequiresAction => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "PaymentIntentEventType",
                            6u32,
                            "PaymentIntentRequiresAction",
                        )
                    }
                    PaymentIntentEventType::PaymentIntentSucceeded => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "PaymentIntentEventType",
                            7u32,
                            "PaymentIntentSucceeded",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for PaymentIntentEventType {
        #[inline]
        fn clone(&self) -> PaymentIntentEventType {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for PaymentIntentEventType {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for PaymentIntentEventType {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for PaymentIntentEventType {
        #[inline]
        fn eq(&self, other: &PaymentIntentEventType) -> bool {
            let __self_discr = ::core::intrinsics::discriminant_value(self);
            let __arg1_discr = ::core::intrinsics::discriminant_value(other);
            __self_discr == __arg1_discr
        }
    }
    impl ::core::fmt::Debug for PaymentIntentEventType {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                PaymentIntentEventType::PaymentIntentAmountCapturableUpdated => {
                    f.debug_tuple(
                            "PaymentIntentEventType::PaymentIntentAmountCapturableUpdated",
                        )
                        .finish()
                }
                PaymentIntentEventType::PaymentIntentCanceled => {
                    f.debug_tuple("PaymentIntentEventType::PaymentIntentCanceled")
                        .finish()
                }
                PaymentIntentEventType::PaymentIntentCreated => {
                    f.debug_tuple("PaymentIntentEventType::PaymentIntentCreated")
                        .finish()
                }
                PaymentIntentEventType::PaymentIntentPartiallyFunded => {
                    f.debug_tuple("PaymentIntentEventType::PaymentIntentPartiallyFunded")
                        .finish()
                }
                PaymentIntentEventType::PaymentIntentPaymentFailed => {
                    f.debug_tuple("PaymentIntentEventType::PaymentIntentPaymentFailed")
                        .finish()
                }
                PaymentIntentEventType::PaymentIntentProcessing => {
                    f.debug_tuple("PaymentIntentEventType::PaymentIntentProcessing")
                        .finish()
                }
                PaymentIntentEventType::PaymentIntentRequiresAction => {
                    f.debug_tuple("PaymentIntentEventType::PaymentIntentRequiresAction")
                        .finish()
                }
                PaymentIntentEventType::PaymentIntentSucceeded => {
                    f.debug_tuple("PaymentIntentEventType::PaymentIntentSucceeded")
                        .finish()
                }
            }
        }
    }
    pub type PaymentIntentPaymentMethodTypes = _rt::Vec<_rt::String>;
    pub enum PaymentIntentStatus {
        Canceled,
        Processing,
        RequiresAction,
        RequiresCapture,
        RequiresConfirmation,
        RequiresPaymentMethod,
        Succeeded,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for PaymentIntentStatus {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            6u64 => _serde::__private::Ok(__Field::__field6),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 7",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "Canceled" => _serde::__private::Ok(__Field::__field0),
                            "Processing" => _serde::__private::Ok(__Field::__field1),
                            "RequiresAction" => _serde::__private::Ok(__Field::__field2),
                            "RequiresCapture" => _serde::__private::Ok(__Field::__field3),
                            "RequiresConfirmation" => {
                                _serde::__private::Ok(__Field::__field4)
                            }
                            "RequiresPaymentMethod" => {
                                _serde::__private::Ok(__Field::__field5)
                            }
                            "Succeeded" => _serde::__private::Ok(__Field::__field6),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"Canceled" => _serde::__private::Ok(__Field::__field0),
                            b"Processing" => _serde::__private::Ok(__Field::__field1),
                            b"RequiresAction" => _serde::__private::Ok(__Field::__field2),
                            b"RequiresCapture" => {
                                _serde::__private::Ok(__Field::__field3)
                            }
                            b"RequiresConfirmation" => {
                                _serde::__private::Ok(__Field::__field4)
                            }
                            b"RequiresPaymentMethod" => {
                                _serde::__private::Ok(__Field::__field5)
                            }
                            b"Succeeded" => _serde::__private::Ok(__Field::__field6),
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<PaymentIntentStatus>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = PaymentIntentStatus;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum PaymentIntentStatus",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(PaymentIntentStatus::Canceled)
                            }
                            (__Field::__field1, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(PaymentIntentStatus::Processing)
                            }
                            (__Field::__field2, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(PaymentIntentStatus::RequiresAction)
                            }
                            (__Field::__field3, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(PaymentIntentStatus::RequiresCapture)
                            }
                            (__Field::__field4, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    PaymentIntentStatus::RequiresConfirmation,
                                )
                            }
                            (__Field::__field5, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    PaymentIntentStatus::RequiresPaymentMethod,
                                )
                            }
                            (__Field::__field6, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(PaymentIntentStatus::Succeeded)
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &[
                    "Canceled",
                    "Processing",
                    "RequiresAction",
                    "RequiresCapture",
                    "RequiresConfirmation",
                    "RequiresPaymentMethod",
                    "Succeeded",
                ];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "PaymentIntentStatus",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<PaymentIntentStatus>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for PaymentIntentStatus {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    PaymentIntentStatus::Canceled => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "PaymentIntentStatus",
                            0u32,
                            "Canceled",
                        )
                    }
                    PaymentIntentStatus::Processing => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "PaymentIntentStatus",
                            1u32,
                            "Processing",
                        )
                    }
                    PaymentIntentStatus::RequiresAction => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "PaymentIntentStatus",
                            2u32,
                            "RequiresAction",
                        )
                    }
                    PaymentIntentStatus::RequiresCapture => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "PaymentIntentStatus",
                            3u32,
                            "RequiresCapture",
                        )
                    }
                    PaymentIntentStatus::RequiresConfirmation => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "PaymentIntentStatus",
                            4u32,
                            "RequiresConfirmation",
                        )
                    }
                    PaymentIntentStatus::RequiresPaymentMethod => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "PaymentIntentStatus",
                            5u32,
                            "RequiresPaymentMethod",
                        )
                    }
                    PaymentIntentStatus::Succeeded => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "PaymentIntentStatus",
                            6u32,
                            "Succeeded",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for PaymentIntentStatus {
        #[inline]
        fn clone(&self) -> PaymentIntentStatus {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for PaymentIntentStatus {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for PaymentIntentStatus {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for PaymentIntentStatus {
        #[inline]
        fn eq(&self, other: &PaymentIntentStatus) -> bool {
            let __self_discr = ::core::intrinsics::discriminant_value(self);
            let __arg1_discr = ::core::intrinsics::discriminant_value(other);
            __self_discr == __arg1_discr
        }
    }
    impl ::core::fmt::Debug for PaymentIntentStatus {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                PaymentIntentStatus::Canceled => {
                    f.debug_tuple("PaymentIntentStatus::Canceled").finish()
                }
                PaymentIntentStatus::Processing => {
                    f.debug_tuple("PaymentIntentStatus::Processing").finish()
                }
                PaymentIntentStatus::RequiresAction => {
                    f.debug_tuple("PaymentIntentStatus::RequiresAction").finish()
                }
                PaymentIntentStatus::RequiresCapture => {
                    f.debug_tuple("PaymentIntentStatus::RequiresCapture").finish()
                }
                PaymentIntentStatus::RequiresConfirmation => {
                    f.debug_tuple("PaymentIntentStatus::RequiresConfirmation").finish()
                }
                PaymentIntentStatus::RequiresPaymentMethod => {
                    f.debug_tuple("PaymentIntentStatus::RequiresPaymentMethod").finish()
                }
                PaymentIntentStatus::Succeeded => {
                    f.debug_tuple("PaymentIntentStatus::Succeeded").finish()
                }
            }
        }
    }
    pub struct PaymentIntent {
        pub amount: i32,
        pub amount_received: Option<i32>,
        pub canceled_at: Option<i32>,
        pub cancellation_reason: Option<PaymentIntentCancellationReason>,
        pub capture_method: PaymentIntentCaptureMethod,
        pub confirmation_method: PaymentIntentConfirmationMethod,
        pub created: i32,
        pub currency: _rt::String,
        pub customer: Option<_rt::String>,
        pub description: Option<_rt::String>,
        pub event_type: PaymentIntentEventType,
        pub id: _rt::String,
        pub invoice: Option<_rt::String>,
        pub payment_method_types: PaymentIntentPaymentMethodTypes,
        pub receipt_email: Option<_rt::String>,
        pub status: PaymentIntentStatus,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for PaymentIntent {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                    __field7,
                    __field8,
                    __field9,
                    __field10,
                    __field11,
                    __field12,
                    __field13,
                    __field14,
                    __field15,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            6u64 => _serde::__private::Ok(__Field::__field6),
                            7u64 => _serde::__private::Ok(__Field::__field7),
                            8u64 => _serde::__private::Ok(__Field::__field8),
                            9u64 => _serde::__private::Ok(__Field::__field9),
                            10u64 => _serde::__private::Ok(__Field::__field10),
                            11u64 => _serde::__private::Ok(__Field::__field11),
                            12u64 => _serde::__private::Ok(__Field::__field12),
                            13u64 => _serde::__private::Ok(__Field::__field13),
                            14u64 => _serde::__private::Ok(__Field::__field14),
                            15u64 => _serde::__private::Ok(__Field::__field15),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "amount" => _serde::__private::Ok(__Field::__field0),
                            "amount_received" => _serde::__private::Ok(__Field::__field1),
                            "canceled_at" => _serde::__private::Ok(__Field::__field2),
                            "cancellation_reason" => {
                                _serde::__private::Ok(__Field::__field3)
                            }
                            "capture_method" => _serde::__private::Ok(__Field::__field4),
                            "confirmation_method" => {
                                _serde::__private::Ok(__Field::__field5)
                            }
                            "created" => _serde::__private::Ok(__Field::__field6),
                            "currency" => _serde::__private::Ok(__Field::__field7),
                            "customer" => _serde::__private::Ok(__Field::__field8),
                            "description" => _serde::__private::Ok(__Field::__field9),
                            "event_type" => _serde::__private::Ok(__Field::__field10),
                            "id" => _serde::__private::Ok(__Field::__field11),
                            "invoice" => _serde::__private::Ok(__Field::__field12),
                            "payment_method_types" => {
                                _serde::__private::Ok(__Field::__field13)
                            }
                            "receipt_email" => _serde::__private::Ok(__Field::__field14),
                            "status" => _serde::__private::Ok(__Field::__field15),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"amount" => _serde::__private::Ok(__Field::__field0),
                            b"amount_received" => {
                                _serde::__private::Ok(__Field::__field1)
                            }
                            b"canceled_at" => _serde::__private::Ok(__Field::__field2),
                            b"cancellation_reason" => {
                                _serde::__private::Ok(__Field::__field3)
                            }
                            b"capture_method" => _serde::__private::Ok(__Field::__field4),
                            b"confirmation_method" => {
                                _serde::__private::Ok(__Field::__field5)
                            }
                            b"created" => _serde::__private::Ok(__Field::__field6),
                            b"currency" => _serde::__private::Ok(__Field::__field7),
                            b"customer" => _serde::__private::Ok(__Field::__field8),
                            b"description" => _serde::__private::Ok(__Field::__field9),
                            b"event_type" => _serde::__private::Ok(__Field::__field10),
                            b"id" => _serde::__private::Ok(__Field::__field11),
                            b"invoice" => _serde::__private::Ok(__Field::__field12),
                            b"payment_method_types" => {
                                _serde::__private::Ok(__Field::__field13)
                            }
                            b"receipt_email" => _serde::__private::Ok(__Field::__field14),
                            b"status" => _serde::__private::Ok(__Field::__field15),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<PaymentIntent>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = PaymentIntent;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct PaymentIntent",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match _serde::de::SeqAccess::next_element::<
                            i32,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct PaymentIntent with 16 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match _serde::de::SeqAccess::next_element::<
                            Option<i32>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct PaymentIntent with 16 elements",
                                    ),
                                );
                            }
                        };
                        let __field2 = match _serde::de::SeqAccess::next_element::<
                            Option<i32>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        2usize,
                                        &"struct PaymentIntent with 16 elements",
                                    ),
                                );
                            }
                        };
                        let __field3 = match _serde::de::SeqAccess::next_element::<
                            Option<PaymentIntentCancellationReason>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        3usize,
                                        &"struct PaymentIntent with 16 elements",
                                    ),
                                );
                            }
                        };
                        let __field4 = match _serde::de::SeqAccess::next_element::<
                            PaymentIntentCaptureMethod,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        4usize,
                                        &"struct PaymentIntent with 16 elements",
                                    ),
                                );
                            }
                        };
                        let __field5 = match _serde::de::SeqAccess::next_element::<
                            PaymentIntentConfirmationMethod,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        5usize,
                                        &"struct PaymentIntent with 16 elements",
                                    ),
                                );
                            }
                        };
                        let __field6 = match _serde::de::SeqAccess::next_element::<
                            i32,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        6usize,
                                        &"struct PaymentIntent with 16 elements",
                                    ),
                                );
                            }
                        };
                        let __field7 = match _serde::de::SeqAccess::next_element::<
                            _rt::String,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        7usize,
                                        &"struct PaymentIntent with 16 elements",
                                    ),
                                );
                            }
                        };
                        let __field8 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        8usize,
                                        &"struct PaymentIntent with 16 elements",
                                    ),
                                );
                            }
                        };
                        let __field9 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        9usize,
                                        &"struct PaymentIntent with 16 elements",
                                    ),
                                );
                            }
                        };
                        let __field10 = match _serde::de::SeqAccess::next_element::<
                            PaymentIntentEventType,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        10usize,
                                        &"struct PaymentIntent with 16 elements",
                                    ),
                                );
                            }
                        };
                        let __field11 = match _serde::de::SeqAccess::next_element::<
                            _rt::String,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        11usize,
                                        &"struct PaymentIntent with 16 elements",
                                    ),
                                );
                            }
                        };
                        let __field12 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        12usize,
                                        &"struct PaymentIntent with 16 elements",
                                    ),
                                );
                            }
                        };
                        let __field13 = match _serde::de::SeqAccess::next_element::<
                            PaymentIntentPaymentMethodTypes,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        13usize,
                                        &"struct PaymentIntent with 16 elements",
                                    ),
                                );
                            }
                        };
                        let __field14 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        14usize,
                                        &"struct PaymentIntent with 16 elements",
                                    ),
                                );
                            }
                        };
                        let __field15 = match _serde::de::SeqAccess::next_element::<
                            PaymentIntentStatus,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        15usize,
                                        &"struct PaymentIntent with 16 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(PaymentIntent {
                            amount: __field0,
                            amount_received: __field1,
                            canceled_at: __field2,
                            cancellation_reason: __field3,
                            capture_method: __field4,
                            confirmation_method: __field5,
                            created: __field6,
                            currency: __field7,
                            customer: __field8,
                            description: __field9,
                            event_type: __field10,
                            id: __field11,
                            invoice: __field12,
                            payment_method_types: __field13,
                            receipt_email: __field14,
                            status: __field15,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<i32> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<Option<i32>> = _serde::__private::None;
                        let mut __field2: _serde::__private::Option<Option<i32>> = _serde::__private::None;
                        let mut __field3: _serde::__private::Option<
                            Option<PaymentIntentCancellationReason>,
                        > = _serde::__private::None;
                        let mut __field4: _serde::__private::Option<
                            PaymentIntentCaptureMethod,
                        > = _serde::__private::None;
                        let mut __field5: _serde::__private::Option<
                            PaymentIntentConfirmationMethod,
                        > = _serde::__private::None;
                        let mut __field6: _serde::__private::Option<i32> = _serde::__private::None;
                        let mut __field7: _serde::__private::Option<_rt::String> = _serde::__private::None;
                        let mut __field8: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field9: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field10: _serde::__private::Option<
                            PaymentIntentEventType,
                        > = _serde::__private::None;
                        let mut __field11: _serde::__private::Option<_rt::String> = _serde::__private::None;
                        let mut __field12: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field13: _serde::__private::Option<
                            PaymentIntentPaymentMethodTypes,
                        > = _serde::__private::None;
                        let mut __field14: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field15: _serde::__private::Option<
                            PaymentIntentStatus,
                        > = _serde::__private::None;
                        while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                            __Field,
                        >(&mut __map)? {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("amount"),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "amount_received",
                                            ),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<i32>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "canceled_at",
                                            ),
                                        );
                                    }
                                    __field2 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<i32>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field3 => {
                                    if _serde::__private::Option::is_some(&__field3) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "cancellation_reason",
                                            ),
                                        );
                                    }
                                    __field3 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<PaymentIntentCancellationReason>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field4 => {
                                    if _serde::__private::Option::is_some(&__field4) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "capture_method",
                                            ),
                                        );
                                    }
                                    __field4 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            PaymentIntentCaptureMethod,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field5 => {
                                    if _serde::__private::Option::is_some(&__field5) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "confirmation_method",
                                            ),
                                        );
                                    }
                                    __field5 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            PaymentIntentConfirmationMethod,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field6 => {
                                    if _serde::__private::Option::is_some(&__field6) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "created",
                                            ),
                                        );
                                    }
                                    __field6 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                    );
                                }
                                __Field::__field7 => {
                                    if _serde::__private::Option::is_some(&__field7) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "currency",
                                            ),
                                        );
                                    }
                                    __field7 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            _rt::String,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field8 => {
                                    if _serde::__private::Option::is_some(&__field8) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "customer",
                                            ),
                                        );
                                    }
                                    __field8 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field9 => {
                                    if _serde::__private::Option::is_some(&__field9) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "description",
                                            ),
                                        );
                                    }
                                    __field9 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field10 => {
                                    if _serde::__private::Option::is_some(&__field10) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "event_type",
                                            ),
                                        );
                                    }
                                    __field10 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            PaymentIntentEventType,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field11 => {
                                    if _serde::__private::Option::is_some(&__field11) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                        );
                                    }
                                    __field11 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            _rt::String,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field12 => {
                                    if _serde::__private::Option::is_some(&__field12) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "invoice",
                                            ),
                                        );
                                    }
                                    __field12 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field13 => {
                                    if _serde::__private::Option::is_some(&__field13) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "payment_method_types",
                                            ),
                                        );
                                    }
                                    __field13 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            PaymentIntentPaymentMethodTypes,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field14 => {
                                    if _serde::__private::Option::is_some(&__field14) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "receipt_email",
                                            ),
                                        );
                                    }
                                    __field14 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field15 => {
                                    if _serde::__private::Option::is_some(&__field15) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("status"),
                                        );
                                    }
                                    __field15 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            PaymentIntentStatus,
                                        >(&mut __map)?,
                                    );
                                }
                                _ => {
                                    let _ = _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map)?;
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("amount")?
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("amount_received")?
                            }
                        };
                        let __field2 = match __field2 {
                            _serde::__private::Some(__field2) => __field2,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("canceled_at")?
                            }
                        };
                        let __field3 = match __field3 {
                            _serde::__private::Some(__field3) => __field3,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("cancellation_reason")?
                            }
                        };
                        let __field4 = match __field4 {
                            _serde::__private::Some(__field4) => __field4,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("capture_method")?
                            }
                        };
                        let __field5 = match __field5 {
                            _serde::__private::Some(__field5) => __field5,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("confirmation_method")?
                            }
                        };
                        let __field6 = match __field6 {
                            _serde::__private::Some(__field6) => __field6,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("created")?
                            }
                        };
                        let __field7 = match __field7 {
                            _serde::__private::Some(__field7) => __field7,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("currency")?
                            }
                        };
                        let __field8 = match __field8 {
                            _serde::__private::Some(__field8) => __field8,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("customer")?
                            }
                        };
                        let __field9 = match __field9 {
                            _serde::__private::Some(__field9) => __field9,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("description")?
                            }
                        };
                        let __field10 = match __field10 {
                            _serde::__private::Some(__field10) => __field10,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("event_type")?
                            }
                        };
                        let __field11 = match __field11 {
                            _serde::__private::Some(__field11) => __field11,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("id")?
                            }
                        };
                        let __field12 = match __field12 {
                            _serde::__private::Some(__field12) => __field12,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("invoice")?
                            }
                        };
                        let __field13 = match __field13 {
                            _serde::__private::Some(__field13) => __field13,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field(
                                    "payment_method_types",
                                )?
                            }
                        };
                        let __field14 = match __field14 {
                            _serde::__private::Some(__field14) => __field14,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("receipt_email")?
                            }
                        };
                        let __field15 = match __field15 {
                            _serde::__private::Some(__field15) => __field15,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("status")?
                            }
                        };
                        _serde::__private::Ok(PaymentIntent {
                            amount: __field0,
                            amount_received: __field1,
                            canceled_at: __field2,
                            cancellation_reason: __field3,
                            capture_method: __field4,
                            confirmation_method: __field5,
                            created: __field6,
                            currency: __field7,
                            customer: __field8,
                            description: __field9,
                            event_type: __field10,
                            id: __field11,
                            invoice: __field12,
                            payment_method_types: __field13,
                            receipt_email: __field14,
                            status: __field15,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &[
                    "amount",
                    "amount_received",
                    "canceled_at",
                    "cancellation_reason",
                    "capture_method",
                    "confirmation_method",
                    "created",
                    "currency",
                    "customer",
                    "description",
                    "event_type",
                    "id",
                    "invoice",
                    "payment_method_types",
                    "receipt_email",
                    "status",
                ];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "PaymentIntent",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<PaymentIntent>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for PaymentIntent {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = _serde::Serializer::serialize_struct(
                    __serializer,
                    "PaymentIntent",
                    false as usize + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
                        + 1 + 1 + 1,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "amount",
                    &self.amount,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "amount_received",
                    &self.amount_received,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "canceled_at",
                    &self.canceled_at,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "cancellation_reason",
                    &self.cancellation_reason,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "capture_method",
                    &self.capture_method,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "confirmation_method",
                    &self.confirmation_method,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "created",
                    &self.created,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "currency",
                    &self.currency,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "customer",
                    &self.customer,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "description",
                    &self.description,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "event_type",
                    &self.event_type,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "invoice",
                    &self.invoice,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "payment_method_types",
                    &self.payment_method_types,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "receipt_email",
                    &self.receipt_email,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "status",
                    &self.status,
                )?;
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for PaymentIntent {
        #[inline]
        fn clone(&self) -> PaymentIntent {
            PaymentIntent {
                amount: ::core::clone::Clone::clone(&self.amount),
                amount_received: ::core::clone::Clone::clone(&self.amount_received),
                canceled_at: ::core::clone::Clone::clone(&self.canceled_at),
                cancellation_reason: ::core::clone::Clone::clone(
                    &self.cancellation_reason,
                ),
                capture_method: ::core::clone::Clone::clone(&self.capture_method),
                confirmation_method: ::core::clone::Clone::clone(
                    &self.confirmation_method,
                ),
                created: ::core::clone::Clone::clone(&self.created),
                currency: ::core::clone::Clone::clone(&self.currency),
                customer: ::core::clone::Clone::clone(&self.customer),
                description: ::core::clone::Clone::clone(&self.description),
                event_type: ::core::clone::Clone::clone(&self.event_type),
                id: ::core::clone::Clone::clone(&self.id),
                invoice: ::core::clone::Clone::clone(&self.invoice),
                payment_method_types: ::core::clone::Clone::clone(
                    &self.payment_method_types,
                ),
                receipt_email: ::core::clone::Clone::clone(&self.receipt_email),
                status: ::core::clone::Clone::clone(&self.status),
            }
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for PaymentIntent {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for PaymentIntent {
        #[inline]
        fn eq(&self, other: &PaymentIntent) -> bool {
            self.amount == other.amount && self.amount_received == other.amount_received
                && self.canceled_at == other.canceled_at
                && self.cancellation_reason == other.cancellation_reason
                && self.capture_method == other.capture_method
                && self.confirmation_method == other.confirmation_method
                && self.created == other.created && self.currency == other.currency
                && self.customer == other.customer
                && self.description == other.description
                && self.event_type == other.event_type && self.id == other.id
                && self.invoice == other.invoice
                && self.payment_method_types == other.payment_method_types
                && self.receipt_email == other.receipt_email
                && self.status == other.status
        }
    }
    impl ::core::fmt::Debug for PaymentIntent {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("PaymentIntent")
                .field("amount", &self.amount)
                .field("amount-received", &self.amount_received)
                .field("canceled-at", &self.canceled_at)
                .field("cancellation-reason", &self.cancellation_reason)
                .field("capture-method", &self.capture_method)
                .field("confirmation-method", &self.confirmation_method)
                .field("created", &self.created)
                .field("currency", &self.currency)
                .field("customer", &self.customer)
                .field("description", &self.description)
                .field("event-type", &self.event_type)
                .field("id", &self.id)
                .field("invoice", &self.invoice)
                .field("payment-method-types", &self.payment_method_types)
                .field("receipt-email", &self.receipt_email)
                .field("status", &self.status)
                .finish()
        }
    }
    pub enum PayoutEventType {
        PayoutCanceled,
        PayoutCreated,
        PayoutFailed,
        PayoutPaid,
        PayoutReconciliationCompleted,
        PayoutUpdated,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for PayoutEventType {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 6",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "PayoutCanceled" => _serde::__private::Ok(__Field::__field0),
                            "PayoutCreated" => _serde::__private::Ok(__Field::__field1),
                            "PayoutFailed" => _serde::__private::Ok(__Field::__field2),
                            "PayoutPaid" => _serde::__private::Ok(__Field::__field3),
                            "PayoutReconciliationCompleted" => {
                                _serde::__private::Ok(__Field::__field4)
                            }
                            "PayoutUpdated" => _serde::__private::Ok(__Field::__field5),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"PayoutCanceled" => _serde::__private::Ok(__Field::__field0),
                            b"PayoutCreated" => _serde::__private::Ok(__Field::__field1),
                            b"PayoutFailed" => _serde::__private::Ok(__Field::__field2),
                            b"PayoutPaid" => _serde::__private::Ok(__Field::__field3),
                            b"PayoutReconciliationCompleted" => {
                                _serde::__private::Ok(__Field::__field4)
                            }
                            b"PayoutUpdated" => _serde::__private::Ok(__Field::__field5),
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<PayoutEventType>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = PayoutEventType;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum PayoutEventType",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(PayoutEventType::PayoutCanceled)
                            }
                            (__Field::__field1, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(PayoutEventType::PayoutCreated)
                            }
                            (__Field::__field2, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(PayoutEventType::PayoutFailed)
                            }
                            (__Field::__field3, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(PayoutEventType::PayoutPaid)
                            }
                            (__Field::__field4, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    PayoutEventType::PayoutReconciliationCompleted,
                                )
                            }
                            (__Field::__field5, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(PayoutEventType::PayoutUpdated)
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &[
                    "PayoutCanceled",
                    "PayoutCreated",
                    "PayoutFailed",
                    "PayoutPaid",
                    "PayoutReconciliationCompleted",
                    "PayoutUpdated",
                ];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "PayoutEventType",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<PayoutEventType>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for PayoutEventType {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    PayoutEventType::PayoutCanceled => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "PayoutEventType",
                            0u32,
                            "PayoutCanceled",
                        )
                    }
                    PayoutEventType::PayoutCreated => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "PayoutEventType",
                            1u32,
                            "PayoutCreated",
                        )
                    }
                    PayoutEventType::PayoutFailed => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "PayoutEventType",
                            2u32,
                            "PayoutFailed",
                        )
                    }
                    PayoutEventType::PayoutPaid => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "PayoutEventType",
                            3u32,
                            "PayoutPaid",
                        )
                    }
                    PayoutEventType::PayoutReconciliationCompleted => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "PayoutEventType",
                            4u32,
                            "PayoutReconciliationCompleted",
                        )
                    }
                    PayoutEventType::PayoutUpdated => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "PayoutEventType",
                            5u32,
                            "PayoutUpdated",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for PayoutEventType {
        #[inline]
        fn clone(&self) -> PayoutEventType {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for PayoutEventType {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for PayoutEventType {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for PayoutEventType {
        #[inline]
        fn eq(&self, other: &PayoutEventType) -> bool {
            let __self_discr = ::core::intrinsics::discriminant_value(self);
            let __arg1_discr = ::core::intrinsics::discriminant_value(other);
            __self_discr == __arg1_discr
        }
    }
    impl ::core::fmt::Debug for PayoutEventType {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                PayoutEventType::PayoutCanceled => {
                    f.debug_tuple("PayoutEventType::PayoutCanceled").finish()
                }
                PayoutEventType::PayoutCreated => {
                    f.debug_tuple("PayoutEventType::PayoutCreated").finish()
                }
                PayoutEventType::PayoutFailed => {
                    f.debug_tuple("PayoutEventType::PayoutFailed").finish()
                }
                PayoutEventType::PayoutPaid => {
                    f.debug_tuple("PayoutEventType::PayoutPaid").finish()
                }
                PayoutEventType::PayoutReconciliationCompleted => {
                    f.debug_tuple("PayoutEventType::PayoutReconciliationCompleted")
                        .finish()
                }
                PayoutEventType::PayoutUpdated => {
                    f.debug_tuple("PayoutEventType::PayoutUpdated").finish()
                }
            }
        }
    }
    pub enum PayoutReconciliationStatus {
        Completed,
        InProgress,
        NotApplicable,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for PayoutReconciliationStatus {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 3",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "Completed" => _serde::__private::Ok(__Field::__field0),
                            "InProgress" => _serde::__private::Ok(__Field::__field1),
                            "NotApplicable" => _serde::__private::Ok(__Field::__field2),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"Completed" => _serde::__private::Ok(__Field::__field0),
                            b"InProgress" => _serde::__private::Ok(__Field::__field1),
                            b"NotApplicable" => _serde::__private::Ok(__Field::__field2),
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<PayoutReconciliationStatus>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = PayoutReconciliationStatus;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum PayoutReconciliationStatus",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(PayoutReconciliationStatus::Completed)
                            }
                            (__Field::__field1, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    PayoutReconciliationStatus::InProgress,
                                )
                            }
                            (__Field::__field2, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    PayoutReconciliationStatus::NotApplicable,
                                )
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &[
                    "Completed",
                    "InProgress",
                    "NotApplicable",
                ];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "PayoutReconciliationStatus",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<
                            PayoutReconciliationStatus,
                        >,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for PayoutReconciliationStatus {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    PayoutReconciliationStatus::Completed => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "PayoutReconciliationStatus",
                            0u32,
                            "Completed",
                        )
                    }
                    PayoutReconciliationStatus::InProgress => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "PayoutReconciliationStatus",
                            1u32,
                            "InProgress",
                        )
                    }
                    PayoutReconciliationStatus::NotApplicable => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "PayoutReconciliationStatus",
                            2u32,
                            "NotApplicable",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for PayoutReconciliationStatus {
        #[inline]
        fn clone(&self) -> PayoutReconciliationStatus {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for PayoutReconciliationStatus {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for PayoutReconciliationStatus {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for PayoutReconciliationStatus {
        #[inline]
        fn eq(&self, other: &PayoutReconciliationStatus) -> bool {
            let __self_discr = ::core::intrinsics::discriminant_value(self);
            let __arg1_discr = ::core::intrinsics::discriminant_value(other);
            __self_discr == __arg1_discr
        }
    }
    impl ::core::fmt::Debug for PayoutReconciliationStatus {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                PayoutReconciliationStatus::Completed => {
                    f.debug_tuple("PayoutReconciliationStatus::Completed").finish()
                }
                PayoutReconciliationStatus::InProgress => {
                    f.debug_tuple("PayoutReconciliationStatus::InProgress").finish()
                }
                PayoutReconciliationStatus::NotApplicable => {
                    f.debug_tuple("PayoutReconciliationStatus::NotApplicable").finish()
                }
            }
        }
    }
    pub enum PayoutType {
        BankAccount,
        Card,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for PayoutType {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 2",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "BankAccount" => _serde::__private::Ok(__Field::__field0),
                            "Card" => _serde::__private::Ok(__Field::__field1),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"BankAccount" => _serde::__private::Ok(__Field::__field0),
                            b"Card" => _serde::__private::Ok(__Field::__field1),
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<PayoutType>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = PayoutType;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum PayoutType",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(PayoutType::BankAccount)
                            }
                            (__Field::__field1, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(PayoutType::Card)
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &["BankAccount", "Card"];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "PayoutType",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<PayoutType>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for PayoutType {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    PayoutType::BankAccount => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "PayoutType",
                            0u32,
                            "BankAccount",
                        )
                    }
                    PayoutType::Card => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "PayoutType",
                            1u32,
                            "Card",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for PayoutType {
        #[inline]
        fn clone(&self) -> PayoutType {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for PayoutType {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for PayoutType {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for PayoutType {
        #[inline]
        fn eq(&self, other: &PayoutType) -> bool {
            let __self_discr = ::core::intrinsics::discriminant_value(self);
            let __arg1_discr = ::core::intrinsics::discriminant_value(other);
            __self_discr == __arg1_discr
        }
    }
    impl ::core::fmt::Debug for PayoutType {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                PayoutType::BankAccount => {
                    f.debug_tuple("PayoutType::BankAccount").finish()
                }
                PayoutType::Card => f.debug_tuple("PayoutType::Card").finish(),
            }
        }
    }
    pub struct Payout {
        pub amount: i32,
        pub arrival_date: i32,
        pub automatic: bool,
        pub balance_transaction: Option<_rt::String>,
        pub created: i32,
        pub currency: _rt::String,
        pub description: Option<_rt::String>,
        pub event_type: PayoutEventType,
        pub failure_code: Option<_rt::String>,
        pub failure_message: Option<_rt::String>,
        pub id: _rt::String,
        pub method: _rt::String,
        pub reconciliation_status: PayoutReconciliationStatus,
        pub source_type: _rt::String,
        pub statement_descriptor: Option<_rt::String>,
        pub status: _rt::String,
        pub type_: PayoutType,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for Payout {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                    __field7,
                    __field8,
                    __field9,
                    __field10,
                    __field11,
                    __field12,
                    __field13,
                    __field14,
                    __field15,
                    __field16,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            6u64 => _serde::__private::Ok(__Field::__field6),
                            7u64 => _serde::__private::Ok(__Field::__field7),
                            8u64 => _serde::__private::Ok(__Field::__field8),
                            9u64 => _serde::__private::Ok(__Field::__field9),
                            10u64 => _serde::__private::Ok(__Field::__field10),
                            11u64 => _serde::__private::Ok(__Field::__field11),
                            12u64 => _serde::__private::Ok(__Field::__field12),
                            13u64 => _serde::__private::Ok(__Field::__field13),
                            14u64 => _serde::__private::Ok(__Field::__field14),
                            15u64 => _serde::__private::Ok(__Field::__field15),
                            16u64 => _serde::__private::Ok(__Field::__field16),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "amount" => _serde::__private::Ok(__Field::__field0),
                            "arrival_date" => _serde::__private::Ok(__Field::__field1),
                            "automatic" => _serde::__private::Ok(__Field::__field2),
                            "balance_transaction" => {
                                _serde::__private::Ok(__Field::__field3)
                            }
                            "created" => _serde::__private::Ok(__Field::__field4),
                            "currency" => _serde::__private::Ok(__Field::__field5),
                            "description" => _serde::__private::Ok(__Field::__field6),
                            "event_type" => _serde::__private::Ok(__Field::__field7),
                            "failure_code" => _serde::__private::Ok(__Field::__field8),
                            "failure_message" => _serde::__private::Ok(__Field::__field9),
                            "id" => _serde::__private::Ok(__Field::__field10),
                            "method" => _serde::__private::Ok(__Field::__field11),
                            "reconciliation_status" => {
                                _serde::__private::Ok(__Field::__field12)
                            }
                            "source_type" => _serde::__private::Ok(__Field::__field13),
                            "statement_descriptor" => {
                                _serde::__private::Ok(__Field::__field14)
                            }
                            "status" => _serde::__private::Ok(__Field::__field15),
                            "type_" => _serde::__private::Ok(__Field::__field16),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"amount" => _serde::__private::Ok(__Field::__field0),
                            b"arrival_date" => _serde::__private::Ok(__Field::__field1),
                            b"automatic" => _serde::__private::Ok(__Field::__field2),
                            b"balance_transaction" => {
                                _serde::__private::Ok(__Field::__field3)
                            }
                            b"created" => _serde::__private::Ok(__Field::__field4),
                            b"currency" => _serde::__private::Ok(__Field::__field5),
                            b"description" => _serde::__private::Ok(__Field::__field6),
                            b"event_type" => _serde::__private::Ok(__Field::__field7),
                            b"failure_code" => _serde::__private::Ok(__Field::__field8),
                            b"failure_message" => {
                                _serde::__private::Ok(__Field::__field9)
                            }
                            b"id" => _serde::__private::Ok(__Field::__field10),
                            b"method" => _serde::__private::Ok(__Field::__field11),
                            b"reconciliation_status" => {
                                _serde::__private::Ok(__Field::__field12)
                            }
                            b"source_type" => _serde::__private::Ok(__Field::__field13),
                            b"statement_descriptor" => {
                                _serde::__private::Ok(__Field::__field14)
                            }
                            b"status" => _serde::__private::Ok(__Field::__field15),
                            b"type_" => _serde::__private::Ok(__Field::__field16),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<Payout>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = Payout;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct Payout",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match _serde::de::SeqAccess::next_element::<
                            i32,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct Payout with 17 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match _serde::de::SeqAccess::next_element::<
                            i32,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct Payout with 17 elements",
                                    ),
                                );
                            }
                        };
                        let __field2 = match _serde::de::SeqAccess::next_element::<
                            bool,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        2usize,
                                        &"struct Payout with 17 elements",
                                    ),
                                );
                            }
                        };
                        let __field3 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        3usize,
                                        &"struct Payout with 17 elements",
                                    ),
                                );
                            }
                        };
                        let __field4 = match _serde::de::SeqAccess::next_element::<
                            i32,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        4usize,
                                        &"struct Payout with 17 elements",
                                    ),
                                );
                            }
                        };
                        let __field5 = match _serde::de::SeqAccess::next_element::<
                            _rt::String,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        5usize,
                                        &"struct Payout with 17 elements",
                                    ),
                                );
                            }
                        };
                        let __field6 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        6usize,
                                        &"struct Payout with 17 elements",
                                    ),
                                );
                            }
                        };
                        let __field7 = match _serde::de::SeqAccess::next_element::<
                            PayoutEventType,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        7usize,
                                        &"struct Payout with 17 elements",
                                    ),
                                );
                            }
                        };
                        let __field8 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        8usize,
                                        &"struct Payout with 17 elements",
                                    ),
                                );
                            }
                        };
                        let __field9 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        9usize,
                                        &"struct Payout with 17 elements",
                                    ),
                                );
                            }
                        };
                        let __field10 = match _serde::de::SeqAccess::next_element::<
                            _rt::String,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        10usize,
                                        &"struct Payout with 17 elements",
                                    ),
                                );
                            }
                        };
                        let __field11 = match _serde::de::SeqAccess::next_element::<
                            _rt::String,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        11usize,
                                        &"struct Payout with 17 elements",
                                    ),
                                );
                            }
                        };
                        let __field12 = match _serde::de::SeqAccess::next_element::<
                            PayoutReconciliationStatus,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        12usize,
                                        &"struct Payout with 17 elements",
                                    ),
                                );
                            }
                        };
                        let __field13 = match _serde::de::SeqAccess::next_element::<
                            _rt::String,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        13usize,
                                        &"struct Payout with 17 elements",
                                    ),
                                );
                            }
                        };
                        let __field14 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        14usize,
                                        &"struct Payout with 17 elements",
                                    ),
                                );
                            }
                        };
                        let __field15 = match _serde::de::SeqAccess::next_element::<
                            _rt::String,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        15usize,
                                        &"struct Payout with 17 elements",
                                    ),
                                );
                            }
                        };
                        let __field16 = match _serde::de::SeqAccess::next_element::<
                            PayoutType,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        16usize,
                                        &"struct Payout with 17 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(Payout {
                            amount: __field0,
                            arrival_date: __field1,
                            automatic: __field2,
                            balance_transaction: __field3,
                            created: __field4,
                            currency: __field5,
                            description: __field6,
                            event_type: __field7,
                            failure_code: __field8,
                            failure_message: __field9,
                            id: __field10,
                            method: __field11,
                            reconciliation_status: __field12,
                            source_type: __field13,
                            statement_descriptor: __field14,
                            status: __field15,
                            type_: __field16,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<i32> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<i32> = _serde::__private::None;
                        let mut __field2: _serde::__private::Option<bool> = _serde::__private::None;
                        let mut __field3: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field4: _serde::__private::Option<i32> = _serde::__private::None;
                        let mut __field5: _serde::__private::Option<_rt::String> = _serde::__private::None;
                        let mut __field6: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field7: _serde::__private::Option<PayoutEventType> = _serde::__private::None;
                        let mut __field8: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field9: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field10: _serde::__private::Option<_rt::String> = _serde::__private::None;
                        let mut __field11: _serde::__private::Option<_rt::String> = _serde::__private::None;
                        let mut __field12: _serde::__private::Option<
                            PayoutReconciliationStatus,
                        > = _serde::__private::None;
                        let mut __field13: _serde::__private::Option<_rt::String> = _serde::__private::None;
                        let mut __field14: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field15: _serde::__private::Option<_rt::String> = _serde::__private::None;
                        let mut __field16: _serde::__private::Option<PayoutType> = _serde::__private::None;
                        while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                            __Field,
                        >(&mut __map)? {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("amount"),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "arrival_date",
                                            ),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                    );
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "automatic",
                                            ),
                                        );
                                    }
                                    __field2 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<bool>(&mut __map)?,
                                    );
                                }
                                __Field::__field3 => {
                                    if _serde::__private::Option::is_some(&__field3) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "balance_transaction",
                                            ),
                                        );
                                    }
                                    __field3 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field4 => {
                                    if _serde::__private::Option::is_some(&__field4) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "created",
                                            ),
                                        );
                                    }
                                    __field4 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                    );
                                }
                                __Field::__field5 => {
                                    if _serde::__private::Option::is_some(&__field5) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "currency",
                                            ),
                                        );
                                    }
                                    __field5 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            _rt::String,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field6 => {
                                    if _serde::__private::Option::is_some(&__field6) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "description",
                                            ),
                                        );
                                    }
                                    __field6 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field7 => {
                                    if _serde::__private::Option::is_some(&__field7) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "event_type",
                                            ),
                                        );
                                    }
                                    __field7 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            PayoutEventType,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field8 => {
                                    if _serde::__private::Option::is_some(&__field8) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "failure_code",
                                            ),
                                        );
                                    }
                                    __field8 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field9 => {
                                    if _serde::__private::Option::is_some(&__field9) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "failure_message",
                                            ),
                                        );
                                    }
                                    __field9 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field10 => {
                                    if _serde::__private::Option::is_some(&__field10) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                        );
                                    }
                                    __field10 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            _rt::String,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field11 => {
                                    if _serde::__private::Option::is_some(&__field11) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("method"),
                                        );
                                    }
                                    __field11 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            _rt::String,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field12 => {
                                    if _serde::__private::Option::is_some(&__field12) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "reconciliation_status",
                                            ),
                                        );
                                    }
                                    __field12 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            PayoutReconciliationStatus,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field13 => {
                                    if _serde::__private::Option::is_some(&__field13) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "source_type",
                                            ),
                                        );
                                    }
                                    __field13 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            _rt::String,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field14 => {
                                    if _serde::__private::Option::is_some(&__field14) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "statement_descriptor",
                                            ),
                                        );
                                    }
                                    __field14 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field15 => {
                                    if _serde::__private::Option::is_some(&__field15) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("status"),
                                        );
                                    }
                                    __field15 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            _rt::String,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field16 => {
                                    if _serde::__private::Option::is_some(&__field16) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("type_"),
                                        );
                                    }
                                    __field16 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<PayoutType>(&mut __map)?,
                                    );
                                }
                                _ => {
                                    let _ = _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map)?;
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("amount")?
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("arrival_date")?
                            }
                        };
                        let __field2 = match __field2 {
                            _serde::__private::Some(__field2) => __field2,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("automatic")?
                            }
                        };
                        let __field3 = match __field3 {
                            _serde::__private::Some(__field3) => __field3,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("balance_transaction")?
                            }
                        };
                        let __field4 = match __field4 {
                            _serde::__private::Some(__field4) => __field4,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("created")?
                            }
                        };
                        let __field5 = match __field5 {
                            _serde::__private::Some(__field5) => __field5,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("currency")?
                            }
                        };
                        let __field6 = match __field6 {
                            _serde::__private::Some(__field6) => __field6,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("description")?
                            }
                        };
                        let __field7 = match __field7 {
                            _serde::__private::Some(__field7) => __field7,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("event_type")?
                            }
                        };
                        let __field8 = match __field8 {
                            _serde::__private::Some(__field8) => __field8,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("failure_code")?
                            }
                        };
                        let __field9 = match __field9 {
                            _serde::__private::Some(__field9) => __field9,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("failure_message")?
                            }
                        };
                        let __field10 = match __field10 {
                            _serde::__private::Some(__field10) => __field10,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("id")?
                            }
                        };
                        let __field11 = match __field11 {
                            _serde::__private::Some(__field11) => __field11,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("method")?
                            }
                        };
                        let __field12 = match __field12 {
                            _serde::__private::Some(__field12) => __field12,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field(
                                    "reconciliation_status",
                                )?
                            }
                        };
                        let __field13 = match __field13 {
                            _serde::__private::Some(__field13) => __field13,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("source_type")?
                            }
                        };
                        let __field14 = match __field14 {
                            _serde::__private::Some(__field14) => __field14,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field(
                                    "statement_descriptor",
                                )?
                            }
                        };
                        let __field15 = match __field15 {
                            _serde::__private::Some(__field15) => __field15,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("status")?
                            }
                        };
                        let __field16 = match __field16 {
                            _serde::__private::Some(__field16) => __field16,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("type_")?
                            }
                        };
                        _serde::__private::Ok(Payout {
                            amount: __field0,
                            arrival_date: __field1,
                            automatic: __field2,
                            balance_transaction: __field3,
                            created: __field4,
                            currency: __field5,
                            description: __field6,
                            event_type: __field7,
                            failure_code: __field8,
                            failure_message: __field9,
                            id: __field10,
                            method: __field11,
                            reconciliation_status: __field12,
                            source_type: __field13,
                            statement_descriptor: __field14,
                            status: __field15,
                            type_: __field16,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &[
                    "amount",
                    "arrival_date",
                    "automatic",
                    "balance_transaction",
                    "created",
                    "currency",
                    "description",
                    "event_type",
                    "failure_code",
                    "failure_message",
                    "id",
                    "method",
                    "reconciliation_status",
                    "source_type",
                    "statement_descriptor",
                    "status",
                    "type_",
                ];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "Payout",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<Payout>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for Payout {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = _serde::Serializer::serialize_struct(
                    __serializer,
                    "Payout",
                    false as usize + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
                        + 1 + 1 + 1 + 1,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "amount",
                    &self.amount,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "arrival_date",
                    &self.arrival_date,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "automatic",
                    &self.automatic,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "balance_transaction",
                    &self.balance_transaction,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "created",
                    &self.created,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "currency",
                    &self.currency,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "description",
                    &self.description,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "event_type",
                    &self.event_type,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "failure_code",
                    &self.failure_code,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "failure_message",
                    &self.failure_message,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "method",
                    &self.method,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "reconciliation_status",
                    &self.reconciliation_status,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "source_type",
                    &self.source_type,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "statement_descriptor",
                    &self.statement_descriptor,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "status",
                    &self.status,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "type_",
                    &self.type_,
                )?;
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for Payout {
        #[inline]
        fn clone(&self) -> Payout {
            Payout {
                amount: ::core::clone::Clone::clone(&self.amount),
                arrival_date: ::core::clone::Clone::clone(&self.arrival_date),
                automatic: ::core::clone::Clone::clone(&self.automatic),
                balance_transaction: ::core::clone::Clone::clone(
                    &self.balance_transaction,
                ),
                created: ::core::clone::Clone::clone(&self.created),
                currency: ::core::clone::Clone::clone(&self.currency),
                description: ::core::clone::Clone::clone(&self.description),
                event_type: ::core::clone::Clone::clone(&self.event_type),
                failure_code: ::core::clone::Clone::clone(&self.failure_code),
                failure_message: ::core::clone::Clone::clone(&self.failure_message),
                id: ::core::clone::Clone::clone(&self.id),
                method: ::core::clone::Clone::clone(&self.method),
                reconciliation_status: ::core::clone::Clone::clone(
                    &self.reconciliation_status,
                ),
                source_type: ::core::clone::Clone::clone(&self.source_type),
                statement_descriptor: ::core::clone::Clone::clone(
                    &self.statement_descriptor,
                ),
                status: ::core::clone::Clone::clone(&self.status),
                type_: ::core::clone::Clone::clone(&self.type_),
            }
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for Payout {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for Payout {
        #[inline]
        fn eq(&self, other: &Payout) -> bool {
            self.amount == other.amount && self.arrival_date == other.arrival_date
                && self.automatic == other.automatic
                && self.balance_transaction == other.balance_transaction
                && self.created == other.created && self.currency == other.currency
                && self.description == other.description
                && self.event_type == other.event_type
                && self.failure_code == other.failure_code
                && self.failure_message == other.failure_message && self.id == other.id
                && self.method == other.method
                && self.reconciliation_status == other.reconciliation_status
                && self.source_type == other.source_type
                && self.statement_descriptor == other.statement_descriptor
                && self.status == other.status && self.type_ == other.type_
        }
    }
    impl ::core::fmt::Debug for Payout {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("Payout")
                .field("amount", &self.amount)
                .field("arrival-date", &self.arrival_date)
                .field("automatic", &self.automatic)
                .field("balance-transaction", &self.balance_transaction)
                .field("created", &self.created)
                .field("currency", &self.currency)
                .field("description", &self.description)
                .field("event-type", &self.event_type)
                .field("failure-code", &self.failure_code)
                .field("failure-message", &self.failure_message)
                .field("id", &self.id)
                .field("method", &self.method)
                .field("reconciliation-status", &self.reconciliation_status)
                .field("source-type", &self.source_type)
                .field("statement-descriptor", &self.statement_descriptor)
                .field("status", &self.status)
                .field("type", &self.type_)
                .finish()
        }
    }
    #[repr(C)]
    pub struct Period {
        pub end: i32,
        pub start: i32,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for Period {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "end" => _serde::__private::Ok(__Field::__field0),
                            "start" => _serde::__private::Ok(__Field::__field1),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"end" => _serde::__private::Ok(__Field::__field0),
                            b"start" => _serde::__private::Ok(__Field::__field1),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<Period>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = Period;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct Period",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match _serde::de::SeqAccess::next_element::<
                            i32,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct Period with 2 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match _serde::de::SeqAccess::next_element::<
                            i32,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct Period with 2 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(Period {
                            end: __field0,
                            start: __field1,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<i32> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<i32> = _serde::__private::None;
                        while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                            __Field,
                        >(&mut __map)? {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("end"),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("start"),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                    );
                                }
                                _ => {
                                    let _ = _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map)?;
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("end")?
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("start")?
                            }
                        };
                        _serde::__private::Ok(Period {
                            end: __field0,
                            start: __field1,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &["end", "start"];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "Period",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<Period>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for Period {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = _serde::Serializer::serialize_struct(
                    __serializer,
                    "Period",
                    false as usize + 1 + 1,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "end",
                    &self.end,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "start",
                    &self.start,
                )?;
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for Period {
        #[inline]
        fn clone(&self) -> Period {
            let _: ::core::clone::AssertParamIsClone<i32>;
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for Period {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for Period {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for Period {
        #[inline]
        fn eq(&self, other: &Period) -> bool {
            self.end == other.end && self.start == other.start
        }
    }
    impl ::core::fmt::Debug for Period {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("Period")
                .field("end", &self.end)
                .field("start", &self.start)
                .finish()
        }
    }
    pub struct Invoiceitem {
        pub amount: i32,
        pub currency: _rt::String,
        pub customer: _rt::String,
        pub date: i32,
        pub description: Option<_rt::String>,
        pub event_type: InvoiceitemEventType,
        pub id: _rt::String,
        pub period: Period,
        pub quantity: i32,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for Invoiceitem {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                    __field7,
                    __field8,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            6u64 => _serde::__private::Ok(__Field::__field6),
                            7u64 => _serde::__private::Ok(__Field::__field7),
                            8u64 => _serde::__private::Ok(__Field::__field8),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "amount" => _serde::__private::Ok(__Field::__field0),
                            "currency" => _serde::__private::Ok(__Field::__field1),
                            "customer" => _serde::__private::Ok(__Field::__field2),
                            "date" => _serde::__private::Ok(__Field::__field3),
                            "description" => _serde::__private::Ok(__Field::__field4),
                            "event_type" => _serde::__private::Ok(__Field::__field5),
                            "id" => _serde::__private::Ok(__Field::__field6),
                            "period" => _serde::__private::Ok(__Field::__field7),
                            "quantity" => _serde::__private::Ok(__Field::__field8),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"amount" => _serde::__private::Ok(__Field::__field0),
                            b"currency" => _serde::__private::Ok(__Field::__field1),
                            b"customer" => _serde::__private::Ok(__Field::__field2),
                            b"date" => _serde::__private::Ok(__Field::__field3),
                            b"description" => _serde::__private::Ok(__Field::__field4),
                            b"event_type" => _serde::__private::Ok(__Field::__field5),
                            b"id" => _serde::__private::Ok(__Field::__field6),
                            b"period" => _serde::__private::Ok(__Field::__field7),
                            b"quantity" => _serde::__private::Ok(__Field::__field8),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<Invoiceitem>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = Invoiceitem;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct Invoiceitem",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match _serde::de::SeqAccess::next_element::<
                            i32,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct Invoiceitem with 9 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match _serde::de::SeqAccess::next_element::<
                            _rt::String,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct Invoiceitem with 9 elements",
                                    ),
                                );
                            }
                        };
                        let __field2 = match _serde::de::SeqAccess::next_element::<
                            _rt::String,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        2usize,
                                        &"struct Invoiceitem with 9 elements",
                                    ),
                                );
                            }
                        };
                        let __field3 = match _serde::de::SeqAccess::next_element::<
                            i32,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        3usize,
                                        &"struct Invoiceitem with 9 elements",
                                    ),
                                );
                            }
                        };
                        let __field4 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        4usize,
                                        &"struct Invoiceitem with 9 elements",
                                    ),
                                );
                            }
                        };
                        let __field5 = match _serde::de::SeqAccess::next_element::<
                            InvoiceitemEventType,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        5usize,
                                        &"struct Invoiceitem with 9 elements",
                                    ),
                                );
                            }
                        };
                        let __field6 = match _serde::de::SeqAccess::next_element::<
                            _rt::String,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        6usize,
                                        &"struct Invoiceitem with 9 elements",
                                    ),
                                );
                            }
                        };
                        let __field7 = match _serde::de::SeqAccess::next_element::<
                            Period,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        7usize,
                                        &"struct Invoiceitem with 9 elements",
                                    ),
                                );
                            }
                        };
                        let __field8 = match _serde::de::SeqAccess::next_element::<
                            i32,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        8usize,
                                        &"struct Invoiceitem with 9 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(Invoiceitem {
                            amount: __field0,
                            currency: __field1,
                            customer: __field2,
                            date: __field3,
                            description: __field4,
                            event_type: __field5,
                            id: __field6,
                            period: __field7,
                            quantity: __field8,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<i32> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<_rt::String> = _serde::__private::None;
                        let mut __field2: _serde::__private::Option<_rt::String> = _serde::__private::None;
                        let mut __field3: _serde::__private::Option<i32> = _serde::__private::None;
                        let mut __field4: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field5: _serde::__private::Option<
                            InvoiceitemEventType,
                        > = _serde::__private::None;
                        let mut __field6: _serde::__private::Option<_rt::String> = _serde::__private::None;
                        let mut __field7: _serde::__private::Option<Period> = _serde::__private::None;
                        let mut __field8: _serde::__private::Option<i32> = _serde::__private::None;
                        while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                            __Field,
                        >(&mut __map)? {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("amount"),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "currency",
                                            ),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            _rt::String,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "customer",
                                            ),
                                        );
                                    }
                                    __field2 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            _rt::String,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field3 => {
                                    if _serde::__private::Option::is_some(&__field3) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("date"),
                                        );
                                    }
                                    __field3 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                    );
                                }
                                __Field::__field4 => {
                                    if _serde::__private::Option::is_some(&__field4) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "description",
                                            ),
                                        );
                                    }
                                    __field4 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field5 => {
                                    if _serde::__private::Option::is_some(&__field5) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "event_type",
                                            ),
                                        );
                                    }
                                    __field5 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            InvoiceitemEventType,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field6 => {
                                    if _serde::__private::Option::is_some(&__field6) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                        );
                                    }
                                    __field6 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            _rt::String,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field7 => {
                                    if _serde::__private::Option::is_some(&__field7) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("period"),
                                        );
                                    }
                                    __field7 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<Period>(&mut __map)?,
                                    );
                                }
                                __Field::__field8 => {
                                    if _serde::__private::Option::is_some(&__field8) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "quantity",
                                            ),
                                        );
                                    }
                                    __field8 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                    );
                                }
                                _ => {
                                    let _ = _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map)?;
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("amount")?
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("currency")?
                            }
                        };
                        let __field2 = match __field2 {
                            _serde::__private::Some(__field2) => __field2,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("customer")?
                            }
                        };
                        let __field3 = match __field3 {
                            _serde::__private::Some(__field3) => __field3,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("date")?
                            }
                        };
                        let __field4 = match __field4 {
                            _serde::__private::Some(__field4) => __field4,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("description")?
                            }
                        };
                        let __field5 = match __field5 {
                            _serde::__private::Some(__field5) => __field5,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("event_type")?
                            }
                        };
                        let __field6 = match __field6 {
                            _serde::__private::Some(__field6) => __field6,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("id")?
                            }
                        };
                        let __field7 = match __field7 {
                            _serde::__private::Some(__field7) => __field7,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("period")?
                            }
                        };
                        let __field8 = match __field8 {
                            _serde::__private::Some(__field8) => __field8,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("quantity")?
                            }
                        };
                        _serde::__private::Ok(Invoiceitem {
                            amount: __field0,
                            currency: __field1,
                            customer: __field2,
                            date: __field3,
                            description: __field4,
                            event_type: __field5,
                            id: __field6,
                            period: __field7,
                            quantity: __field8,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &[
                    "amount",
                    "currency",
                    "customer",
                    "date",
                    "description",
                    "event_type",
                    "id",
                    "period",
                    "quantity",
                ];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "Invoiceitem",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<Invoiceitem>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for Invoiceitem {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = _serde::Serializer::serialize_struct(
                    __serializer,
                    "Invoiceitem",
                    false as usize + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "amount",
                    &self.amount,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "currency",
                    &self.currency,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "customer",
                    &self.customer,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "date",
                    &self.date,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "description",
                    &self.description,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "event_type",
                    &self.event_type,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "period",
                    &self.period,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "quantity",
                    &self.quantity,
                )?;
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for Invoiceitem {
        #[inline]
        fn clone(&self) -> Invoiceitem {
            Invoiceitem {
                amount: ::core::clone::Clone::clone(&self.amount),
                currency: ::core::clone::Clone::clone(&self.currency),
                customer: ::core::clone::Clone::clone(&self.customer),
                date: ::core::clone::Clone::clone(&self.date),
                description: ::core::clone::Clone::clone(&self.description),
                event_type: ::core::clone::Clone::clone(&self.event_type),
                id: ::core::clone::Clone::clone(&self.id),
                period: ::core::clone::Clone::clone(&self.period),
                quantity: ::core::clone::Clone::clone(&self.quantity),
            }
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for Invoiceitem {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for Invoiceitem {
        #[inline]
        fn eq(&self, other: &Invoiceitem) -> bool {
            self.amount == other.amount && self.currency == other.currency
                && self.customer == other.customer && self.date == other.date
                && self.description == other.description
                && self.event_type == other.event_type && self.id == other.id
                && self.period == other.period && self.quantity == other.quantity
        }
    }
    impl ::core::fmt::Debug for Invoiceitem {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("Invoiceitem")
                .field("amount", &self.amount)
                .field("currency", &self.currency)
                .field("customer", &self.customer)
                .field("date", &self.date)
                .field("description", &self.description)
                .field("event-type", &self.event_type)
                .field("id", &self.id)
                .field("period", &self.period)
                .field("quantity", &self.quantity)
                .finish()
        }
    }
    pub enum SourceEventType {
        SourceCanceled,
        SourceChargeable,
        SourceFailed,
        SourceMandateNotification,
        SourceRefundAttributesRequired,
        SourceTransactionCreated,
        SourceTransactionUpdated,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for SourceEventType {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            6u64 => _serde::__private::Ok(__Field::__field6),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 7",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "SourceCanceled" => _serde::__private::Ok(__Field::__field0),
                            "SourceChargeable" => {
                                _serde::__private::Ok(__Field::__field1)
                            }
                            "SourceFailed" => _serde::__private::Ok(__Field::__field2),
                            "SourceMandateNotification" => {
                                _serde::__private::Ok(__Field::__field3)
                            }
                            "SourceRefundAttributesRequired" => {
                                _serde::__private::Ok(__Field::__field4)
                            }
                            "SourceTransactionCreated" => {
                                _serde::__private::Ok(__Field::__field5)
                            }
                            "SourceTransactionUpdated" => {
                                _serde::__private::Ok(__Field::__field6)
                            }
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"SourceCanceled" => _serde::__private::Ok(__Field::__field0),
                            b"SourceChargeable" => {
                                _serde::__private::Ok(__Field::__field1)
                            }
                            b"SourceFailed" => _serde::__private::Ok(__Field::__field2),
                            b"SourceMandateNotification" => {
                                _serde::__private::Ok(__Field::__field3)
                            }
                            b"SourceRefundAttributesRequired" => {
                                _serde::__private::Ok(__Field::__field4)
                            }
                            b"SourceTransactionCreated" => {
                                _serde::__private::Ok(__Field::__field5)
                            }
                            b"SourceTransactionUpdated" => {
                                _serde::__private::Ok(__Field::__field6)
                            }
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<SourceEventType>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = SourceEventType;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum SourceEventType",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(SourceEventType::SourceCanceled)
                            }
                            (__Field::__field1, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(SourceEventType::SourceChargeable)
                            }
                            (__Field::__field2, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(SourceEventType::SourceFailed)
                            }
                            (__Field::__field3, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    SourceEventType::SourceMandateNotification,
                                )
                            }
                            (__Field::__field4, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    SourceEventType::SourceRefundAttributesRequired,
                                )
                            }
                            (__Field::__field5, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    SourceEventType::SourceTransactionCreated,
                                )
                            }
                            (__Field::__field6, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    SourceEventType::SourceTransactionUpdated,
                                )
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &[
                    "SourceCanceled",
                    "SourceChargeable",
                    "SourceFailed",
                    "SourceMandateNotification",
                    "SourceRefundAttributesRequired",
                    "SourceTransactionCreated",
                    "SourceTransactionUpdated",
                ];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "SourceEventType",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<SourceEventType>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for SourceEventType {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    SourceEventType::SourceCanceled => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SourceEventType",
                            0u32,
                            "SourceCanceled",
                        )
                    }
                    SourceEventType::SourceChargeable => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SourceEventType",
                            1u32,
                            "SourceChargeable",
                        )
                    }
                    SourceEventType::SourceFailed => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SourceEventType",
                            2u32,
                            "SourceFailed",
                        )
                    }
                    SourceEventType::SourceMandateNotification => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SourceEventType",
                            3u32,
                            "SourceMandateNotification",
                        )
                    }
                    SourceEventType::SourceRefundAttributesRequired => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SourceEventType",
                            4u32,
                            "SourceRefundAttributesRequired",
                        )
                    }
                    SourceEventType::SourceTransactionCreated => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SourceEventType",
                            5u32,
                            "SourceTransactionCreated",
                        )
                    }
                    SourceEventType::SourceTransactionUpdated => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SourceEventType",
                            6u32,
                            "SourceTransactionUpdated",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for SourceEventType {
        #[inline]
        fn clone(&self) -> SourceEventType {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for SourceEventType {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for SourceEventType {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for SourceEventType {
        #[inline]
        fn eq(&self, other: &SourceEventType) -> bool {
            let __self_discr = ::core::intrinsics::discriminant_value(self);
            let __arg1_discr = ::core::intrinsics::discriminant_value(other);
            __self_discr == __arg1_discr
        }
    }
    impl ::core::fmt::Debug for SourceEventType {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                SourceEventType::SourceCanceled => {
                    f.debug_tuple("SourceEventType::SourceCanceled").finish()
                }
                SourceEventType::SourceChargeable => {
                    f.debug_tuple("SourceEventType::SourceChargeable").finish()
                }
                SourceEventType::SourceFailed => {
                    f.debug_tuple("SourceEventType::SourceFailed").finish()
                }
                SourceEventType::SourceMandateNotification => {
                    f.debug_tuple("SourceEventType::SourceMandateNotification").finish()
                }
                SourceEventType::SourceRefundAttributesRequired => {
                    f.debug_tuple("SourceEventType::SourceRefundAttributesRequired")
                        .finish()
                }
                SourceEventType::SourceTransactionCreated => {
                    f.debug_tuple("SourceEventType::SourceTransactionCreated").finish()
                }
                SourceEventType::SourceTransactionUpdated => {
                    f.debug_tuple("SourceEventType::SourceTransactionUpdated").finish()
                }
            }
        }
    }
    pub struct SourceOwner {
        pub address: Option<Address>,
        pub email: Option<_rt::String>,
        pub name: Option<_rt::String>,
        pub phone: Option<_rt::String>,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for SourceOwner {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "address" => _serde::__private::Ok(__Field::__field0),
                            "email" => _serde::__private::Ok(__Field::__field1),
                            "name" => _serde::__private::Ok(__Field::__field2),
                            "phone" => _serde::__private::Ok(__Field::__field3),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"address" => _serde::__private::Ok(__Field::__field0),
                            b"email" => _serde::__private::Ok(__Field::__field1),
                            b"name" => _serde::__private::Ok(__Field::__field2),
                            b"phone" => _serde::__private::Ok(__Field::__field3),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<SourceOwner>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = SourceOwner;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct SourceOwner",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match _serde::de::SeqAccess::next_element::<
                            Option<Address>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct SourceOwner with 4 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct SourceOwner with 4 elements",
                                    ),
                                );
                            }
                        };
                        let __field2 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        2usize,
                                        &"struct SourceOwner with 4 elements",
                                    ),
                                );
                            }
                        };
                        let __field3 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        3usize,
                                        &"struct SourceOwner with 4 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(SourceOwner {
                            address: __field0,
                            email: __field1,
                            name: __field2,
                            phone: __field3,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<Option<Address>> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field2: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field3: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                            __Field,
                        >(&mut __map)? {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "address",
                                            ),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<Address>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("email"),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("name"),
                                        );
                                    }
                                    __field2 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field3 => {
                                    if _serde::__private::Option::is_some(&__field3) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("phone"),
                                        );
                                    }
                                    __field3 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                _ => {
                                    let _ = _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map)?;
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("address")?
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("email")?
                            }
                        };
                        let __field2 = match __field2 {
                            _serde::__private::Some(__field2) => __field2,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("name")?
                            }
                        };
                        let __field3 = match __field3 {
                            _serde::__private::Some(__field3) => __field3,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("phone")?
                            }
                        };
                        _serde::__private::Ok(SourceOwner {
                            address: __field0,
                            email: __field1,
                            name: __field2,
                            phone: __field3,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &[
                    "address",
                    "email",
                    "name",
                    "phone",
                ];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "SourceOwner",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<SourceOwner>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for SourceOwner {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = _serde::Serializer::serialize_struct(
                    __serializer,
                    "SourceOwner",
                    false as usize + 1 + 1 + 1 + 1,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "address",
                    &self.address,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "email",
                    &self.email,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "name",
                    &self.name,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "phone",
                    &self.phone,
                )?;
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for SourceOwner {
        #[inline]
        fn clone(&self) -> SourceOwner {
            SourceOwner {
                address: ::core::clone::Clone::clone(&self.address),
                email: ::core::clone::Clone::clone(&self.email),
                name: ::core::clone::Clone::clone(&self.name),
                phone: ::core::clone::Clone::clone(&self.phone),
            }
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for SourceOwner {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for SourceOwner {
        #[inline]
        fn eq(&self, other: &SourceOwner) -> bool {
            self.address == other.address && self.email == other.email
                && self.name == other.name && self.phone == other.phone
        }
    }
    impl ::core::fmt::Debug for SourceOwner {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("SourceOwner")
                .field("address", &self.address)
                .field("email", &self.email)
                .field("name", &self.name)
                .field("phone", &self.phone)
                .finish()
        }
    }
    pub enum SourceType {
        AchCreditTransfer,
        AchDebit,
        AcssDebit,
        Alipay,
        AuBecsDebit,
        Bancontact,
        Card,
        CardPresent,
        Eps,
        Giropay,
        Ideal,
        Klarna,
        Multibanco,
        PtwentyFour,
        SepaDebit,
        Sofort,
        ThreeDSecure,
        Wechat,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for SourceType {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                    __field7,
                    __field8,
                    __field9,
                    __field10,
                    __field11,
                    __field12,
                    __field13,
                    __field14,
                    __field15,
                    __field16,
                    __field17,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            6u64 => _serde::__private::Ok(__Field::__field6),
                            7u64 => _serde::__private::Ok(__Field::__field7),
                            8u64 => _serde::__private::Ok(__Field::__field8),
                            9u64 => _serde::__private::Ok(__Field::__field9),
                            10u64 => _serde::__private::Ok(__Field::__field10),
                            11u64 => _serde::__private::Ok(__Field::__field11),
                            12u64 => _serde::__private::Ok(__Field::__field12),
                            13u64 => _serde::__private::Ok(__Field::__field13),
                            14u64 => _serde::__private::Ok(__Field::__field14),
                            15u64 => _serde::__private::Ok(__Field::__field15),
                            16u64 => _serde::__private::Ok(__Field::__field16),
                            17u64 => _serde::__private::Ok(__Field::__field17),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 18",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "AchCreditTransfer" => {
                                _serde::__private::Ok(__Field::__field0)
                            }
                            "AchDebit" => _serde::__private::Ok(__Field::__field1),
                            "AcssDebit" => _serde::__private::Ok(__Field::__field2),
                            "Alipay" => _serde::__private::Ok(__Field::__field3),
                            "AuBecsDebit" => _serde::__private::Ok(__Field::__field4),
                            "Bancontact" => _serde::__private::Ok(__Field::__field5),
                            "Card" => _serde::__private::Ok(__Field::__field6),
                            "CardPresent" => _serde::__private::Ok(__Field::__field7),
                            "Eps" => _serde::__private::Ok(__Field::__field8),
                            "Giropay" => _serde::__private::Ok(__Field::__field9),
                            "Ideal" => _serde::__private::Ok(__Field::__field10),
                            "Klarna" => _serde::__private::Ok(__Field::__field11),
                            "Multibanco" => _serde::__private::Ok(__Field::__field12),
                            "PtwentyFour" => _serde::__private::Ok(__Field::__field13),
                            "SepaDebit" => _serde::__private::Ok(__Field::__field14),
                            "Sofort" => _serde::__private::Ok(__Field::__field15),
                            "ThreeDSecure" => _serde::__private::Ok(__Field::__field16),
                            "Wechat" => _serde::__private::Ok(__Field::__field17),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"AchCreditTransfer" => {
                                _serde::__private::Ok(__Field::__field0)
                            }
                            b"AchDebit" => _serde::__private::Ok(__Field::__field1),
                            b"AcssDebit" => _serde::__private::Ok(__Field::__field2),
                            b"Alipay" => _serde::__private::Ok(__Field::__field3),
                            b"AuBecsDebit" => _serde::__private::Ok(__Field::__field4),
                            b"Bancontact" => _serde::__private::Ok(__Field::__field5),
                            b"Card" => _serde::__private::Ok(__Field::__field6),
                            b"CardPresent" => _serde::__private::Ok(__Field::__field7),
                            b"Eps" => _serde::__private::Ok(__Field::__field8),
                            b"Giropay" => _serde::__private::Ok(__Field::__field9),
                            b"Ideal" => _serde::__private::Ok(__Field::__field10),
                            b"Klarna" => _serde::__private::Ok(__Field::__field11),
                            b"Multibanco" => _serde::__private::Ok(__Field::__field12),
                            b"PtwentyFour" => _serde::__private::Ok(__Field::__field13),
                            b"SepaDebit" => _serde::__private::Ok(__Field::__field14),
                            b"Sofort" => _serde::__private::Ok(__Field::__field15),
                            b"ThreeDSecure" => _serde::__private::Ok(__Field::__field16),
                            b"Wechat" => _serde::__private::Ok(__Field::__field17),
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<SourceType>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = SourceType;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum SourceType",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(SourceType::AchCreditTransfer)
                            }
                            (__Field::__field1, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(SourceType::AchDebit)
                            }
                            (__Field::__field2, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(SourceType::AcssDebit)
                            }
                            (__Field::__field3, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(SourceType::Alipay)
                            }
                            (__Field::__field4, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(SourceType::AuBecsDebit)
                            }
                            (__Field::__field5, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(SourceType::Bancontact)
                            }
                            (__Field::__field6, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(SourceType::Card)
                            }
                            (__Field::__field7, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(SourceType::CardPresent)
                            }
                            (__Field::__field8, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(SourceType::Eps)
                            }
                            (__Field::__field9, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(SourceType::Giropay)
                            }
                            (__Field::__field10, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(SourceType::Ideal)
                            }
                            (__Field::__field11, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(SourceType::Klarna)
                            }
                            (__Field::__field12, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(SourceType::Multibanco)
                            }
                            (__Field::__field13, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(SourceType::PtwentyFour)
                            }
                            (__Field::__field14, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(SourceType::SepaDebit)
                            }
                            (__Field::__field15, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(SourceType::Sofort)
                            }
                            (__Field::__field16, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(SourceType::ThreeDSecure)
                            }
                            (__Field::__field17, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(SourceType::Wechat)
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &[
                    "AchCreditTransfer",
                    "AchDebit",
                    "AcssDebit",
                    "Alipay",
                    "AuBecsDebit",
                    "Bancontact",
                    "Card",
                    "CardPresent",
                    "Eps",
                    "Giropay",
                    "Ideal",
                    "Klarna",
                    "Multibanco",
                    "PtwentyFour",
                    "SepaDebit",
                    "Sofort",
                    "ThreeDSecure",
                    "Wechat",
                ];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "SourceType",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<SourceType>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for SourceType {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    SourceType::AchCreditTransfer => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SourceType",
                            0u32,
                            "AchCreditTransfer",
                        )
                    }
                    SourceType::AchDebit => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SourceType",
                            1u32,
                            "AchDebit",
                        )
                    }
                    SourceType::AcssDebit => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SourceType",
                            2u32,
                            "AcssDebit",
                        )
                    }
                    SourceType::Alipay => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SourceType",
                            3u32,
                            "Alipay",
                        )
                    }
                    SourceType::AuBecsDebit => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SourceType",
                            4u32,
                            "AuBecsDebit",
                        )
                    }
                    SourceType::Bancontact => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SourceType",
                            5u32,
                            "Bancontact",
                        )
                    }
                    SourceType::Card => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SourceType",
                            6u32,
                            "Card",
                        )
                    }
                    SourceType::CardPresent => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SourceType",
                            7u32,
                            "CardPresent",
                        )
                    }
                    SourceType::Eps => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SourceType",
                            8u32,
                            "Eps",
                        )
                    }
                    SourceType::Giropay => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SourceType",
                            9u32,
                            "Giropay",
                        )
                    }
                    SourceType::Ideal => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SourceType",
                            10u32,
                            "Ideal",
                        )
                    }
                    SourceType::Klarna => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SourceType",
                            11u32,
                            "Klarna",
                        )
                    }
                    SourceType::Multibanco => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SourceType",
                            12u32,
                            "Multibanco",
                        )
                    }
                    SourceType::PtwentyFour => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SourceType",
                            13u32,
                            "PtwentyFour",
                        )
                    }
                    SourceType::SepaDebit => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SourceType",
                            14u32,
                            "SepaDebit",
                        )
                    }
                    SourceType::Sofort => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SourceType",
                            15u32,
                            "Sofort",
                        )
                    }
                    SourceType::ThreeDSecure => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SourceType",
                            16u32,
                            "ThreeDSecure",
                        )
                    }
                    SourceType::Wechat => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SourceType",
                            17u32,
                            "Wechat",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for SourceType {
        #[inline]
        fn clone(&self) -> SourceType {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for SourceType {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for SourceType {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for SourceType {
        #[inline]
        fn eq(&self, other: &SourceType) -> bool {
            let __self_discr = ::core::intrinsics::discriminant_value(self);
            let __arg1_discr = ::core::intrinsics::discriminant_value(other);
            __self_discr == __arg1_discr
        }
    }
    impl ::core::fmt::Debug for SourceType {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                SourceType::AchCreditTransfer => {
                    f.debug_tuple("SourceType::AchCreditTransfer").finish()
                }
                SourceType::AchDebit => f.debug_tuple("SourceType::AchDebit").finish(),
                SourceType::AcssDebit => f.debug_tuple("SourceType::AcssDebit").finish(),
                SourceType::Alipay => f.debug_tuple("SourceType::Alipay").finish(),
                SourceType::AuBecsDebit => {
                    f.debug_tuple("SourceType::AuBecsDebit").finish()
                }
                SourceType::Bancontact => {
                    f.debug_tuple("SourceType::Bancontact").finish()
                }
                SourceType::Card => f.debug_tuple("SourceType::Card").finish(),
                SourceType::CardPresent => {
                    f.debug_tuple("SourceType::CardPresent").finish()
                }
                SourceType::Eps => f.debug_tuple("SourceType::Eps").finish(),
                SourceType::Giropay => f.debug_tuple("SourceType::Giropay").finish(),
                SourceType::Ideal => f.debug_tuple("SourceType::Ideal").finish(),
                SourceType::Klarna => f.debug_tuple("SourceType::Klarna").finish(),
                SourceType::Multibanco => {
                    f.debug_tuple("SourceType::Multibanco").finish()
                }
                SourceType::PtwentyFour => {
                    f.debug_tuple("SourceType::PtwentyFour").finish()
                }
                SourceType::SepaDebit => f.debug_tuple("SourceType::SepaDebit").finish(),
                SourceType::Sofort => f.debug_tuple("SourceType::Sofort").finish(),
                SourceType::ThreeDSecure => {
                    f.debug_tuple("SourceType::ThreeDSecure").finish()
                }
                SourceType::Wechat => f.debug_tuple("SourceType::Wechat").finish(),
            }
        }
    }
    pub struct Source {
        pub amount: Option<i32>,
        pub client_secret: _rt::String,
        pub created: i32,
        pub currency: Option<_rt::String>,
        pub customer: Option<_rt::String>,
        pub event_type: SourceEventType,
        pub id: _rt::String,
        pub owner: Option<SourceOwner>,
        pub statement_descriptor: Option<_rt::String>,
        pub status: _rt::String,
        pub type_: SourceType,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for Source {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                    __field7,
                    __field8,
                    __field9,
                    __field10,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            6u64 => _serde::__private::Ok(__Field::__field6),
                            7u64 => _serde::__private::Ok(__Field::__field7),
                            8u64 => _serde::__private::Ok(__Field::__field8),
                            9u64 => _serde::__private::Ok(__Field::__field9),
                            10u64 => _serde::__private::Ok(__Field::__field10),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "amount" => _serde::__private::Ok(__Field::__field0),
                            "client_secret" => _serde::__private::Ok(__Field::__field1),
                            "created" => _serde::__private::Ok(__Field::__field2),
                            "currency" => _serde::__private::Ok(__Field::__field3),
                            "customer" => _serde::__private::Ok(__Field::__field4),
                            "event_type" => _serde::__private::Ok(__Field::__field5),
                            "id" => _serde::__private::Ok(__Field::__field6),
                            "owner" => _serde::__private::Ok(__Field::__field7),
                            "statement_descriptor" => {
                                _serde::__private::Ok(__Field::__field8)
                            }
                            "status" => _serde::__private::Ok(__Field::__field9),
                            "type_" => _serde::__private::Ok(__Field::__field10),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"amount" => _serde::__private::Ok(__Field::__field0),
                            b"client_secret" => _serde::__private::Ok(__Field::__field1),
                            b"created" => _serde::__private::Ok(__Field::__field2),
                            b"currency" => _serde::__private::Ok(__Field::__field3),
                            b"customer" => _serde::__private::Ok(__Field::__field4),
                            b"event_type" => _serde::__private::Ok(__Field::__field5),
                            b"id" => _serde::__private::Ok(__Field::__field6),
                            b"owner" => _serde::__private::Ok(__Field::__field7),
                            b"statement_descriptor" => {
                                _serde::__private::Ok(__Field::__field8)
                            }
                            b"status" => _serde::__private::Ok(__Field::__field9),
                            b"type_" => _serde::__private::Ok(__Field::__field10),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<Source>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = Source;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct Source",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match _serde::de::SeqAccess::next_element::<
                            Option<i32>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct Source with 11 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match _serde::de::SeqAccess::next_element::<
                            _rt::String,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct Source with 11 elements",
                                    ),
                                );
                            }
                        };
                        let __field2 = match _serde::de::SeqAccess::next_element::<
                            i32,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        2usize,
                                        &"struct Source with 11 elements",
                                    ),
                                );
                            }
                        };
                        let __field3 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        3usize,
                                        &"struct Source with 11 elements",
                                    ),
                                );
                            }
                        };
                        let __field4 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        4usize,
                                        &"struct Source with 11 elements",
                                    ),
                                );
                            }
                        };
                        let __field5 = match _serde::de::SeqAccess::next_element::<
                            SourceEventType,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        5usize,
                                        &"struct Source with 11 elements",
                                    ),
                                );
                            }
                        };
                        let __field6 = match _serde::de::SeqAccess::next_element::<
                            _rt::String,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        6usize,
                                        &"struct Source with 11 elements",
                                    ),
                                );
                            }
                        };
                        let __field7 = match _serde::de::SeqAccess::next_element::<
                            Option<SourceOwner>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        7usize,
                                        &"struct Source with 11 elements",
                                    ),
                                );
                            }
                        };
                        let __field8 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        8usize,
                                        &"struct Source with 11 elements",
                                    ),
                                );
                            }
                        };
                        let __field9 = match _serde::de::SeqAccess::next_element::<
                            _rt::String,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        9usize,
                                        &"struct Source with 11 elements",
                                    ),
                                );
                            }
                        };
                        let __field10 = match _serde::de::SeqAccess::next_element::<
                            SourceType,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        10usize,
                                        &"struct Source with 11 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(Source {
                            amount: __field0,
                            client_secret: __field1,
                            created: __field2,
                            currency: __field3,
                            customer: __field4,
                            event_type: __field5,
                            id: __field6,
                            owner: __field7,
                            statement_descriptor: __field8,
                            status: __field9,
                            type_: __field10,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<Option<i32>> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<_rt::String> = _serde::__private::None;
                        let mut __field2: _serde::__private::Option<i32> = _serde::__private::None;
                        let mut __field3: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field4: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field5: _serde::__private::Option<SourceEventType> = _serde::__private::None;
                        let mut __field6: _serde::__private::Option<_rt::String> = _serde::__private::None;
                        let mut __field7: _serde::__private::Option<
                            Option<SourceOwner>,
                        > = _serde::__private::None;
                        let mut __field8: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field9: _serde::__private::Option<_rt::String> = _serde::__private::None;
                        let mut __field10: _serde::__private::Option<SourceType> = _serde::__private::None;
                        while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                            __Field,
                        >(&mut __map)? {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("amount"),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<i32>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "client_secret",
                                            ),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            _rt::String,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "created",
                                            ),
                                        );
                                    }
                                    __field2 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                    );
                                }
                                __Field::__field3 => {
                                    if _serde::__private::Option::is_some(&__field3) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "currency",
                                            ),
                                        );
                                    }
                                    __field3 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field4 => {
                                    if _serde::__private::Option::is_some(&__field4) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "customer",
                                            ),
                                        );
                                    }
                                    __field4 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field5 => {
                                    if _serde::__private::Option::is_some(&__field5) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "event_type",
                                            ),
                                        );
                                    }
                                    __field5 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            SourceEventType,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field6 => {
                                    if _serde::__private::Option::is_some(&__field6) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                        );
                                    }
                                    __field6 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            _rt::String,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field7 => {
                                    if _serde::__private::Option::is_some(&__field7) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("owner"),
                                        );
                                    }
                                    __field7 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<SourceOwner>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field8 => {
                                    if _serde::__private::Option::is_some(&__field8) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "statement_descriptor",
                                            ),
                                        );
                                    }
                                    __field8 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field9 => {
                                    if _serde::__private::Option::is_some(&__field9) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("status"),
                                        );
                                    }
                                    __field9 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            _rt::String,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field10 => {
                                    if _serde::__private::Option::is_some(&__field10) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("type_"),
                                        );
                                    }
                                    __field10 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<SourceType>(&mut __map)?,
                                    );
                                }
                                _ => {
                                    let _ = _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map)?;
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("amount")?
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("client_secret")?
                            }
                        };
                        let __field2 = match __field2 {
                            _serde::__private::Some(__field2) => __field2,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("created")?
                            }
                        };
                        let __field3 = match __field3 {
                            _serde::__private::Some(__field3) => __field3,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("currency")?
                            }
                        };
                        let __field4 = match __field4 {
                            _serde::__private::Some(__field4) => __field4,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("customer")?
                            }
                        };
                        let __field5 = match __field5 {
                            _serde::__private::Some(__field5) => __field5,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("event_type")?
                            }
                        };
                        let __field6 = match __field6 {
                            _serde::__private::Some(__field6) => __field6,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("id")?
                            }
                        };
                        let __field7 = match __field7 {
                            _serde::__private::Some(__field7) => __field7,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("owner")?
                            }
                        };
                        let __field8 = match __field8 {
                            _serde::__private::Some(__field8) => __field8,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field(
                                    "statement_descriptor",
                                )?
                            }
                        };
                        let __field9 = match __field9 {
                            _serde::__private::Some(__field9) => __field9,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("status")?
                            }
                        };
                        let __field10 = match __field10 {
                            _serde::__private::Some(__field10) => __field10,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("type_")?
                            }
                        };
                        _serde::__private::Ok(Source {
                            amount: __field0,
                            client_secret: __field1,
                            created: __field2,
                            currency: __field3,
                            customer: __field4,
                            event_type: __field5,
                            id: __field6,
                            owner: __field7,
                            statement_descriptor: __field8,
                            status: __field9,
                            type_: __field10,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &[
                    "amount",
                    "client_secret",
                    "created",
                    "currency",
                    "customer",
                    "event_type",
                    "id",
                    "owner",
                    "statement_descriptor",
                    "status",
                    "type_",
                ];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "Source",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<Source>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for Source {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = _serde::Serializer::serialize_struct(
                    __serializer,
                    "Source",
                    false as usize + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "amount",
                    &self.amount,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "client_secret",
                    &self.client_secret,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "created",
                    &self.created,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "currency",
                    &self.currency,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "customer",
                    &self.customer,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "event_type",
                    &self.event_type,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "owner",
                    &self.owner,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "statement_descriptor",
                    &self.statement_descriptor,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "status",
                    &self.status,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "type_",
                    &self.type_,
                )?;
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for Source {
        #[inline]
        fn clone(&self) -> Source {
            Source {
                amount: ::core::clone::Clone::clone(&self.amount),
                client_secret: ::core::clone::Clone::clone(&self.client_secret),
                created: ::core::clone::Clone::clone(&self.created),
                currency: ::core::clone::Clone::clone(&self.currency),
                customer: ::core::clone::Clone::clone(&self.customer),
                event_type: ::core::clone::Clone::clone(&self.event_type),
                id: ::core::clone::Clone::clone(&self.id),
                owner: ::core::clone::Clone::clone(&self.owner),
                statement_descriptor: ::core::clone::Clone::clone(
                    &self.statement_descriptor,
                ),
                status: ::core::clone::Clone::clone(&self.status),
                type_: ::core::clone::Clone::clone(&self.type_),
            }
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for Source {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for Source {
        #[inline]
        fn eq(&self, other: &Source) -> bool {
            self.amount == other.amount && self.client_secret == other.client_secret
                && self.created == other.created && self.currency == other.currency
                && self.customer == other.customer && self.event_type == other.event_type
                && self.id == other.id && self.owner == other.owner
                && self.statement_descriptor == other.statement_descriptor
                && self.status == other.status && self.type_ == other.type_
        }
    }
    impl ::core::fmt::Debug for Source {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("Source")
                .field("amount", &self.amount)
                .field("client-secret", &self.client_secret)
                .field("created", &self.created)
                .field("currency", &self.currency)
                .field("customer", &self.customer)
                .field("event-type", &self.event_type)
                .field("id", &self.id)
                .field("owner", &self.owner)
                .field("statement-descriptor", &self.statement_descriptor)
                .field("status", &self.status)
                .field("type", &self.type_)
                .finish()
        }
    }
    pub enum SubscriptionDefaultSettingsBillingCycleAnchor {
        Automatic,
        PhaseStart,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de>
        for SubscriptionDefaultSettingsBillingCycleAnchor {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 2",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "Automatic" => _serde::__private::Ok(__Field::__field0),
                            "PhaseStart" => _serde::__private::Ok(__Field::__field1),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"Automatic" => _serde::__private::Ok(__Field::__field0),
                            b"PhaseStart" => _serde::__private::Ok(__Field::__field1),
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<
                        SubscriptionDefaultSettingsBillingCycleAnchor,
                    >,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = SubscriptionDefaultSettingsBillingCycleAnchor;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum SubscriptionDefaultSettingsBillingCycleAnchor",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    SubscriptionDefaultSettingsBillingCycleAnchor::Automatic,
                                )
                            }
                            (__Field::__field1, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    SubscriptionDefaultSettingsBillingCycleAnchor::PhaseStart,
                                )
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &["Automatic", "PhaseStart"];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "SubscriptionDefaultSettingsBillingCycleAnchor",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<
                            SubscriptionDefaultSettingsBillingCycleAnchor,
                        >,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for SubscriptionDefaultSettingsBillingCycleAnchor {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    SubscriptionDefaultSettingsBillingCycleAnchor::Automatic => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SubscriptionDefaultSettingsBillingCycleAnchor",
                            0u32,
                            "Automatic",
                        )
                    }
                    SubscriptionDefaultSettingsBillingCycleAnchor::PhaseStart => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SubscriptionDefaultSettingsBillingCycleAnchor",
                            1u32,
                            "PhaseStart",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for SubscriptionDefaultSettingsBillingCycleAnchor {
        #[inline]
        fn clone(&self) -> SubscriptionDefaultSettingsBillingCycleAnchor {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for SubscriptionDefaultSettingsBillingCycleAnchor {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq
    for SubscriptionDefaultSettingsBillingCycleAnchor {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for SubscriptionDefaultSettingsBillingCycleAnchor {
        #[inline]
        fn eq(&self, other: &SubscriptionDefaultSettingsBillingCycleAnchor) -> bool {
            let __self_discr = ::core::intrinsics::discriminant_value(self);
            let __arg1_discr = ::core::intrinsics::discriminant_value(other);
            __self_discr == __arg1_discr
        }
    }
    impl ::core::fmt::Debug for SubscriptionDefaultSettingsBillingCycleAnchor {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                SubscriptionDefaultSettingsBillingCycleAnchor::Automatic => {
                    f.debug_tuple(
                            "SubscriptionDefaultSettingsBillingCycleAnchor::Automatic",
                        )
                        .finish()
                }
                SubscriptionDefaultSettingsBillingCycleAnchor::PhaseStart => {
                    f.debug_tuple(
                            "SubscriptionDefaultSettingsBillingCycleAnchor::PhaseStart",
                        )
                        .finish()
                }
            }
        }
    }
    pub enum SubscriptionDefaultSettingsCollectionMethod {
        ChargeAutomatically,
        SendInvoice,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de>
        for SubscriptionDefaultSettingsCollectionMethod {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 2",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "ChargeAutomatically" => {
                                _serde::__private::Ok(__Field::__field0)
                            }
                            "SendInvoice" => _serde::__private::Ok(__Field::__field1),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"ChargeAutomatically" => {
                                _serde::__private::Ok(__Field::__field0)
                            }
                            b"SendInvoice" => _serde::__private::Ok(__Field::__field1),
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<
                        SubscriptionDefaultSettingsCollectionMethod,
                    >,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = SubscriptionDefaultSettingsCollectionMethod;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum SubscriptionDefaultSettingsCollectionMethod",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    SubscriptionDefaultSettingsCollectionMethod::ChargeAutomatically,
                                )
                            }
                            (__Field::__field1, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    SubscriptionDefaultSettingsCollectionMethod::SendInvoice,
                                )
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &[
                    "ChargeAutomatically",
                    "SendInvoice",
                ];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "SubscriptionDefaultSettingsCollectionMethod",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<
                            SubscriptionDefaultSettingsCollectionMethod,
                        >,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for SubscriptionDefaultSettingsCollectionMethod {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    SubscriptionDefaultSettingsCollectionMethod::ChargeAutomatically => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SubscriptionDefaultSettingsCollectionMethod",
                            0u32,
                            "ChargeAutomatically",
                        )
                    }
                    SubscriptionDefaultSettingsCollectionMethod::SendInvoice => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SubscriptionDefaultSettingsCollectionMethod",
                            1u32,
                            "SendInvoice",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for SubscriptionDefaultSettingsCollectionMethod {
        #[inline]
        fn clone(&self) -> SubscriptionDefaultSettingsCollectionMethod {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for SubscriptionDefaultSettingsCollectionMethod {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq
    for SubscriptionDefaultSettingsCollectionMethod {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for SubscriptionDefaultSettingsCollectionMethod {
        #[inline]
        fn eq(&self, other: &SubscriptionDefaultSettingsCollectionMethod) -> bool {
            let __self_discr = ::core::intrinsics::discriminant_value(self);
            let __arg1_discr = ::core::intrinsics::discriminant_value(other);
            __self_discr == __arg1_discr
        }
    }
    impl ::core::fmt::Debug for SubscriptionDefaultSettingsCollectionMethod {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                SubscriptionDefaultSettingsCollectionMethod::ChargeAutomatically => {
                    f.debug_tuple(
                            "SubscriptionDefaultSettingsCollectionMethod::ChargeAutomatically",
                        )
                        .finish()
                }
                SubscriptionDefaultSettingsCollectionMethod::SendInvoice => {
                    f.debug_tuple(
                            "SubscriptionDefaultSettingsCollectionMethod::SendInvoice",
                        )
                        .finish()
                }
            }
        }
    }
    #[repr(C)]
    pub struct SubscriptionDefaultSettings {
        pub billing_cycle_anchor: SubscriptionDefaultSettingsBillingCycleAnchor,
        pub collection_method: Option<SubscriptionDefaultSettingsCollectionMethod>,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for SubscriptionDefaultSettings {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "billing_cycle_anchor" => {
                                _serde::__private::Ok(__Field::__field0)
                            }
                            "collection_method" => {
                                _serde::__private::Ok(__Field::__field1)
                            }
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"billing_cycle_anchor" => {
                                _serde::__private::Ok(__Field::__field0)
                            }
                            b"collection_method" => {
                                _serde::__private::Ok(__Field::__field1)
                            }
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<SubscriptionDefaultSettings>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = SubscriptionDefaultSettings;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct SubscriptionDefaultSettings",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match _serde::de::SeqAccess::next_element::<
                            SubscriptionDefaultSettingsBillingCycleAnchor,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct SubscriptionDefaultSettings with 2 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match _serde::de::SeqAccess::next_element::<
                            Option<SubscriptionDefaultSettingsCollectionMethod>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct SubscriptionDefaultSettings with 2 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(SubscriptionDefaultSettings {
                            billing_cycle_anchor: __field0,
                            collection_method: __field1,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<
                            SubscriptionDefaultSettingsBillingCycleAnchor,
                        > = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<
                            Option<SubscriptionDefaultSettingsCollectionMethod>,
                        > = _serde::__private::None;
                        while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                            __Field,
                        >(&mut __map)? {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "billing_cycle_anchor",
                                            ),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            SubscriptionDefaultSettingsBillingCycleAnchor,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "collection_method",
                                            ),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<SubscriptionDefaultSettingsCollectionMethod>,
                                        >(&mut __map)?,
                                    );
                                }
                                _ => {
                                    let _ = _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map)?;
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field(
                                    "billing_cycle_anchor",
                                )?
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("collection_method")?
                            }
                        };
                        _serde::__private::Ok(SubscriptionDefaultSettings {
                            billing_cycle_anchor: __field0,
                            collection_method: __field1,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &[
                    "billing_cycle_anchor",
                    "collection_method",
                ];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "SubscriptionDefaultSettings",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<
                            SubscriptionDefaultSettings,
                        >,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for SubscriptionDefaultSettings {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = _serde::Serializer::serialize_struct(
                    __serializer,
                    "SubscriptionDefaultSettings",
                    false as usize + 1 + 1,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "billing_cycle_anchor",
                    &self.billing_cycle_anchor,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "collection_method",
                    &self.collection_method,
                )?;
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for SubscriptionDefaultSettings {
        #[inline]
        fn clone(&self) -> SubscriptionDefaultSettings {
            let _: ::core::clone::AssertParamIsClone<
                SubscriptionDefaultSettingsBillingCycleAnchor,
            >;
            let _: ::core::clone::AssertParamIsClone<
                Option<SubscriptionDefaultSettingsCollectionMethod>,
            >;
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for SubscriptionDefaultSettings {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for SubscriptionDefaultSettings {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for SubscriptionDefaultSettings {
        #[inline]
        fn eq(&self, other: &SubscriptionDefaultSettings) -> bool {
            self.billing_cycle_anchor == other.billing_cycle_anchor
                && self.collection_method == other.collection_method
        }
    }
    impl ::core::fmt::Debug for SubscriptionDefaultSettings {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("SubscriptionDefaultSettings")
                .field("billing-cycle-anchor", &self.billing_cycle_anchor)
                .field("collection-method", &self.collection_method)
                .finish()
        }
    }
    pub enum SubscriptionScheduleEndBehavior {
        Cancel,
        None,
        Release,
        Renew,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for SubscriptionScheduleEndBehavior {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 4",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "Cancel" => _serde::__private::Ok(__Field::__field0),
                            "None" => _serde::__private::Ok(__Field::__field1),
                            "Release" => _serde::__private::Ok(__Field::__field2),
                            "Renew" => _serde::__private::Ok(__Field::__field3),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"Cancel" => _serde::__private::Ok(__Field::__field0),
                            b"None" => _serde::__private::Ok(__Field::__field1),
                            b"Release" => _serde::__private::Ok(__Field::__field2),
                            b"Renew" => _serde::__private::Ok(__Field::__field3),
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<
                        SubscriptionScheduleEndBehavior,
                    >,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = SubscriptionScheduleEndBehavior;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum SubscriptionScheduleEndBehavior",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    SubscriptionScheduleEndBehavior::Cancel,
                                )
                            }
                            (__Field::__field1, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(SubscriptionScheduleEndBehavior::None)
                            }
                            (__Field::__field2, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    SubscriptionScheduleEndBehavior::Release,
                                )
                            }
                            (__Field::__field3, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    SubscriptionScheduleEndBehavior::Renew,
                                )
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &[
                    "Cancel",
                    "None",
                    "Release",
                    "Renew",
                ];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "SubscriptionScheduleEndBehavior",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<
                            SubscriptionScheduleEndBehavior,
                        >,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for SubscriptionScheduleEndBehavior {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    SubscriptionScheduleEndBehavior::Cancel => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SubscriptionScheduleEndBehavior",
                            0u32,
                            "Cancel",
                        )
                    }
                    SubscriptionScheduleEndBehavior::None => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SubscriptionScheduleEndBehavior",
                            1u32,
                            "None",
                        )
                    }
                    SubscriptionScheduleEndBehavior::Release => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SubscriptionScheduleEndBehavior",
                            2u32,
                            "Release",
                        )
                    }
                    SubscriptionScheduleEndBehavior::Renew => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SubscriptionScheduleEndBehavior",
                            3u32,
                            "Renew",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for SubscriptionScheduleEndBehavior {
        #[inline]
        fn clone(&self) -> SubscriptionScheduleEndBehavior {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for SubscriptionScheduleEndBehavior {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for SubscriptionScheduleEndBehavior {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for SubscriptionScheduleEndBehavior {
        #[inline]
        fn eq(&self, other: &SubscriptionScheduleEndBehavior) -> bool {
            let __self_discr = ::core::intrinsics::discriminant_value(self);
            let __arg1_discr = ::core::intrinsics::discriminant_value(other);
            __self_discr == __arg1_discr
        }
    }
    impl ::core::fmt::Debug for SubscriptionScheduleEndBehavior {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                SubscriptionScheduleEndBehavior::Cancel => {
                    f.debug_tuple("SubscriptionScheduleEndBehavior::Cancel").finish()
                }
                SubscriptionScheduleEndBehavior::None => {
                    f.debug_tuple("SubscriptionScheduleEndBehavior::None").finish()
                }
                SubscriptionScheduleEndBehavior::Release => {
                    f.debug_tuple("SubscriptionScheduleEndBehavior::Release").finish()
                }
                SubscriptionScheduleEndBehavior::Renew => {
                    f.debug_tuple("SubscriptionScheduleEndBehavior::Renew").finish()
                }
            }
        }
    }
    pub enum SubscriptionScheduleEventType {
        SubscriptionScheduleAborted,
        SubscriptionScheduleCanceled,
        SubscriptionScheduleCompleted,
        SubscriptionScheduleCreated,
        SubscriptionScheduleExpiring,
        SubscriptionScheduleReleased,
        SubscriptionScheduleUpdated,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for SubscriptionScheduleEventType {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            6u64 => _serde::__private::Ok(__Field::__field6),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 7",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "SubscriptionScheduleAborted" => {
                                _serde::__private::Ok(__Field::__field0)
                            }
                            "SubscriptionScheduleCanceled" => {
                                _serde::__private::Ok(__Field::__field1)
                            }
                            "SubscriptionScheduleCompleted" => {
                                _serde::__private::Ok(__Field::__field2)
                            }
                            "SubscriptionScheduleCreated" => {
                                _serde::__private::Ok(__Field::__field3)
                            }
                            "SubscriptionScheduleExpiring" => {
                                _serde::__private::Ok(__Field::__field4)
                            }
                            "SubscriptionScheduleReleased" => {
                                _serde::__private::Ok(__Field::__field5)
                            }
                            "SubscriptionScheduleUpdated" => {
                                _serde::__private::Ok(__Field::__field6)
                            }
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"SubscriptionScheduleAborted" => {
                                _serde::__private::Ok(__Field::__field0)
                            }
                            b"SubscriptionScheduleCanceled" => {
                                _serde::__private::Ok(__Field::__field1)
                            }
                            b"SubscriptionScheduleCompleted" => {
                                _serde::__private::Ok(__Field::__field2)
                            }
                            b"SubscriptionScheduleCreated" => {
                                _serde::__private::Ok(__Field::__field3)
                            }
                            b"SubscriptionScheduleExpiring" => {
                                _serde::__private::Ok(__Field::__field4)
                            }
                            b"SubscriptionScheduleReleased" => {
                                _serde::__private::Ok(__Field::__field5)
                            }
                            b"SubscriptionScheduleUpdated" => {
                                _serde::__private::Ok(__Field::__field6)
                            }
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<
                        SubscriptionScheduleEventType,
                    >,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = SubscriptionScheduleEventType;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum SubscriptionScheduleEventType",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    SubscriptionScheduleEventType::SubscriptionScheduleAborted,
                                )
                            }
                            (__Field::__field1, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    SubscriptionScheduleEventType::SubscriptionScheduleCanceled,
                                )
                            }
                            (__Field::__field2, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    SubscriptionScheduleEventType::SubscriptionScheduleCompleted,
                                )
                            }
                            (__Field::__field3, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    SubscriptionScheduleEventType::SubscriptionScheduleCreated,
                                )
                            }
                            (__Field::__field4, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    SubscriptionScheduleEventType::SubscriptionScheduleExpiring,
                                )
                            }
                            (__Field::__field5, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    SubscriptionScheduleEventType::SubscriptionScheduleReleased,
                                )
                            }
                            (__Field::__field6, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    SubscriptionScheduleEventType::SubscriptionScheduleUpdated,
                                )
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &[
                    "SubscriptionScheduleAborted",
                    "SubscriptionScheduleCanceled",
                    "SubscriptionScheduleCompleted",
                    "SubscriptionScheduleCreated",
                    "SubscriptionScheduleExpiring",
                    "SubscriptionScheduleReleased",
                    "SubscriptionScheduleUpdated",
                ];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "SubscriptionScheduleEventType",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<
                            SubscriptionScheduleEventType,
                        >,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for SubscriptionScheduleEventType {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    SubscriptionScheduleEventType::SubscriptionScheduleAborted => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SubscriptionScheduleEventType",
                            0u32,
                            "SubscriptionScheduleAborted",
                        )
                    }
                    SubscriptionScheduleEventType::SubscriptionScheduleCanceled => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SubscriptionScheduleEventType",
                            1u32,
                            "SubscriptionScheduleCanceled",
                        )
                    }
                    SubscriptionScheduleEventType::SubscriptionScheduleCompleted => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SubscriptionScheduleEventType",
                            2u32,
                            "SubscriptionScheduleCompleted",
                        )
                    }
                    SubscriptionScheduleEventType::SubscriptionScheduleCreated => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SubscriptionScheduleEventType",
                            3u32,
                            "SubscriptionScheduleCreated",
                        )
                    }
                    SubscriptionScheduleEventType::SubscriptionScheduleExpiring => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SubscriptionScheduleEventType",
                            4u32,
                            "SubscriptionScheduleExpiring",
                        )
                    }
                    SubscriptionScheduleEventType::SubscriptionScheduleReleased => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SubscriptionScheduleEventType",
                            5u32,
                            "SubscriptionScheduleReleased",
                        )
                    }
                    SubscriptionScheduleEventType::SubscriptionScheduleUpdated => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SubscriptionScheduleEventType",
                            6u32,
                            "SubscriptionScheduleUpdated",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for SubscriptionScheduleEventType {
        #[inline]
        fn clone(&self) -> SubscriptionScheduleEventType {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for SubscriptionScheduleEventType {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for SubscriptionScheduleEventType {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for SubscriptionScheduleEventType {
        #[inline]
        fn eq(&self, other: &SubscriptionScheduleEventType) -> bool {
            let __self_discr = ::core::intrinsics::discriminant_value(self);
            let __arg1_discr = ::core::intrinsics::discriminant_value(other);
            __self_discr == __arg1_discr
        }
    }
    impl ::core::fmt::Debug for SubscriptionScheduleEventType {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                SubscriptionScheduleEventType::SubscriptionScheduleAborted => {
                    f.debug_tuple(
                            "SubscriptionScheduleEventType::SubscriptionScheduleAborted",
                        )
                        .finish()
                }
                SubscriptionScheduleEventType::SubscriptionScheduleCanceled => {
                    f.debug_tuple(
                            "SubscriptionScheduleEventType::SubscriptionScheduleCanceled",
                        )
                        .finish()
                }
                SubscriptionScheduleEventType::SubscriptionScheduleCompleted => {
                    f.debug_tuple(
                            "SubscriptionScheduleEventType::SubscriptionScheduleCompleted",
                        )
                        .finish()
                }
                SubscriptionScheduleEventType::SubscriptionScheduleCreated => {
                    f.debug_tuple(
                            "SubscriptionScheduleEventType::SubscriptionScheduleCreated",
                        )
                        .finish()
                }
                SubscriptionScheduleEventType::SubscriptionScheduleExpiring => {
                    f.debug_tuple(
                            "SubscriptionScheduleEventType::SubscriptionScheduleExpiring",
                        )
                        .finish()
                }
                SubscriptionScheduleEventType::SubscriptionScheduleReleased => {
                    f.debug_tuple(
                            "SubscriptionScheduleEventType::SubscriptionScheduleReleased",
                        )
                        .finish()
                }
                SubscriptionScheduleEventType::SubscriptionScheduleUpdated => {
                    f.debug_tuple(
                            "SubscriptionScheduleEventType::SubscriptionScheduleUpdated",
                        )
                        .finish()
                }
            }
        }
    }
    pub enum SubscriptionScheduleStatus {
        Active,
        Canceled,
        Completed,
        NotStarted,
        Released,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for SubscriptionScheduleStatus {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 5",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "Active" => _serde::__private::Ok(__Field::__field0),
                            "Canceled" => _serde::__private::Ok(__Field::__field1),
                            "Completed" => _serde::__private::Ok(__Field::__field2),
                            "NotStarted" => _serde::__private::Ok(__Field::__field3),
                            "Released" => _serde::__private::Ok(__Field::__field4),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"Active" => _serde::__private::Ok(__Field::__field0),
                            b"Canceled" => _serde::__private::Ok(__Field::__field1),
                            b"Completed" => _serde::__private::Ok(__Field::__field2),
                            b"NotStarted" => _serde::__private::Ok(__Field::__field3),
                            b"Released" => _serde::__private::Ok(__Field::__field4),
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<SubscriptionScheduleStatus>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = SubscriptionScheduleStatus;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum SubscriptionScheduleStatus",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(SubscriptionScheduleStatus::Active)
                            }
                            (__Field::__field1, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(SubscriptionScheduleStatus::Canceled)
                            }
                            (__Field::__field2, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(SubscriptionScheduleStatus::Completed)
                            }
                            (__Field::__field3, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(
                                    SubscriptionScheduleStatus::NotStarted,
                                )
                            }
                            (__Field::__field4, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(SubscriptionScheduleStatus::Released)
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &[
                    "Active",
                    "Canceled",
                    "Completed",
                    "NotStarted",
                    "Released",
                ];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "SubscriptionScheduleStatus",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<
                            SubscriptionScheduleStatus,
                        >,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for SubscriptionScheduleStatus {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    SubscriptionScheduleStatus::Active => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SubscriptionScheduleStatus",
                            0u32,
                            "Active",
                        )
                    }
                    SubscriptionScheduleStatus::Canceled => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SubscriptionScheduleStatus",
                            1u32,
                            "Canceled",
                        )
                    }
                    SubscriptionScheduleStatus::Completed => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SubscriptionScheduleStatus",
                            2u32,
                            "Completed",
                        )
                    }
                    SubscriptionScheduleStatus::NotStarted => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SubscriptionScheduleStatus",
                            3u32,
                            "NotStarted",
                        )
                    }
                    SubscriptionScheduleStatus::Released => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "SubscriptionScheduleStatus",
                            4u32,
                            "Released",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for SubscriptionScheduleStatus {
        #[inline]
        fn clone(&self) -> SubscriptionScheduleStatus {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for SubscriptionScheduleStatus {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for SubscriptionScheduleStatus {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for SubscriptionScheduleStatus {
        #[inline]
        fn eq(&self, other: &SubscriptionScheduleStatus) -> bool {
            let __self_discr = ::core::intrinsics::discriminant_value(self);
            let __arg1_discr = ::core::intrinsics::discriminant_value(other);
            __self_discr == __arg1_discr
        }
    }
    impl ::core::fmt::Debug for SubscriptionScheduleStatus {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                SubscriptionScheduleStatus::Active => {
                    f.debug_tuple("SubscriptionScheduleStatus::Active").finish()
                }
                SubscriptionScheduleStatus::Canceled => {
                    f.debug_tuple("SubscriptionScheduleStatus::Canceled").finish()
                }
                SubscriptionScheduleStatus::Completed => {
                    f.debug_tuple("SubscriptionScheduleStatus::Completed").finish()
                }
                SubscriptionScheduleStatus::NotStarted => {
                    f.debug_tuple("SubscriptionScheduleStatus::NotStarted").finish()
                }
                SubscriptionScheduleStatus::Released => {
                    f.debug_tuple("SubscriptionScheduleStatus::Released").finish()
                }
            }
        }
    }
    pub struct SubscriptionSchedule {
        pub canceled_at: Option<i32>,
        pub completed_at: Option<i32>,
        pub created: i32,
        pub customer: _rt::String,
        pub default_settings: SubscriptionDefaultSettings,
        pub end_behavior: SubscriptionScheduleEndBehavior,
        pub event_type: SubscriptionScheduleEventType,
        pub id: _rt::String,
        pub released_at: Option<i32>,
        pub status: SubscriptionScheduleStatus,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for SubscriptionSchedule {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                    __field7,
                    __field8,
                    __field9,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            6u64 => _serde::__private::Ok(__Field::__field6),
                            7u64 => _serde::__private::Ok(__Field::__field7),
                            8u64 => _serde::__private::Ok(__Field::__field8),
                            9u64 => _serde::__private::Ok(__Field::__field9),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "canceled_at" => _serde::__private::Ok(__Field::__field0),
                            "completed_at" => _serde::__private::Ok(__Field::__field1),
                            "created" => _serde::__private::Ok(__Field::__field2),
                            "customer" => _serde::__private::Ok(__Field::__field3),
                            "default_settings" => {
                                _serde::__private::Ok(__Field::__field4)
                            }
                            "end_behavior" => _serde::__private::Ok(__Field::__field5),
                            "event_type" => _serde::__private::Ok(__Field::__field6),
                            "id" => _serde::__private::Ok(__Field::__field7),
                            "released_at" => _serde::__private::Ok(__Field::__field8),
                            "status" => _serde::__private::Ok(__Field::__field9),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"canceled_at" => _serde::__private::Ok(__Field::__field0),
                            b"completed_at" => _serde::__private::Ok(__Field::__field1),
                            b"created" => _serde::__private::Ok(__Field::__field2),
                            b"customer" => _serde::__private::Ok(__Field::__field3),
                            b"default_settings" => {
                                _serde::__private::Ok(__Field::__field4)
                            }
                            b"end_behavior" => _serde::__private::Ok(__Field::__field5),
                            b"event_type" => _serde::__private::Ok(__Field::__field6),
                            b"id" => _serde::__private::Ok(__Field::__field7),
                            b"released_at" => _serde::__private::Ok(__Field::__field8),
                            b"status" => _serde::__private::Ok(__Field::__field9),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<SubscriptionSchedule>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = SubscriptionSchedule;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct SubscriptionSchedule",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match _serde::de::SeqAccess::next_element::<
                            Option<i32>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct SubscriptionSchedule with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match _serde::de::SeqAccess::next_element::<
                            Option<i32>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct SubscriptionSchedule with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field2 = match _serde::de::SeqAccess::next_element::<
                            i32,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        2usize,
                                        &"struct SubscriptionSchedule with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field3 = match _serde::de::SeqAccess::next_element::<
                            _rt::String,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        3usize,
                                        &"struct SubscriptionSchedule with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field4 = match _serde::de::SeqAccess::next_element::<
                            SubscriptionDefaultSettings,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        4usize,
                                        &"struct SubscriptionSchedule with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field5 = match _serde::de::SeqAccess::next_element::<
                            SubscriptionScheduleEndBehavior,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        5usize,
                                        &"struct SubscriptionSchedule with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field6 = match _serde::de::SeqAccess::next_element::<
                            SubscriptionScheduleEventType,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        6usize,
                                        &"struct SubscriptionSchedule with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field7 = match _serde::de::SeqAccess::next_element::<
                            _rt::String,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        7usize,
                                        &"struct SubscriptionSchedule with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field8 = match _serde::de::SeqAccess::next_element::<
                            Option<i32>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        8usize,
                                        &"struct SubscriptionSchedule with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field9 = match _serde::de::SeqAccess::next_element::<
                            SubscriptionScheduleStatus,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        9usize,
                                        &"struct SubscriptionSchedule with 10 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(SubscriptionSchedule {
                            canceled_at: __field0,
                            completed_at: __field1,
                            created: __field2,
                            customer: __field3,
                            default_settings: __field4,
                            end_behavior: __field5,
                            event_type: __field6,
                            id: __field7,
                            released_at: __field8,
                            status: __field9,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<Option<i32>> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<Option<i32>> = _serde::__private::None;
                        let mut __field2: _serde::__private::Option<i32> = _serde::__private::None;
                        let mut __field3: _serde::__private::Option<_rt::String> = _serde::__private::None;
                        let mut __field4: _serde::__private::Option<
                            SubscriptionDefaultSettings,
                        > = _serde::__private::None;
                        let mut __field5: _serde::__private::Option<
                            SubscriptionScheduleEndBehavior,
                        > = _serde::__private::None;
                        let mut __field6: _serde::__private::Option<
                            SubscriptionScheduleEventType,
                        > = _serde::__private::None;
                        let mut __field7: _serde::__private::Option<_rt::String> = _serde::__private::None;
                        let mut __field8: _serde::__private::Option<Option<i32>> = _serde::__private::None;
                        let mut __field9: _serde::__private::Option<
                            SubscriptionScheduleStatus,
                        > = _serde::__private::None;
                        while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                            __Field,
                        >(&mut __map)? {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "canceled_at",
                                            ),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<i32>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "completed_at",
                                            ),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<i32>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "created",
                                            ),
                                        );
                                    }
                                    __field2 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                    );
                                }
                                __Field::__field3 => {
                                    if _serde::__private::Option::is_some(&__field3) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "customer",
                                            ),
                                        );
                                    }
                                    __field3 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            _rt::String,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field4 => {
                                    if _serde::__private::Option::is_some(&__field4) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "default_settings",
                                            ),
                                        );
                                    }
                                    __field4 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            SubscriptionDefaultSettings,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field5 => {
                                    if _serde::__private::Option::is_some(&__field5) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "end_behavior",
                                            ),
                                        );
                                    }
                                    __field5 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            SubscriptionScheduleEndBehavior,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field6 => {
                                    if _serde::__private::Option::is_some(&__field6) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "event_type",
                                            ),
                                        );
                                    }
                                    __field6 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            SubscriptionScheduleEventType,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field7 => {
                                    if _serde::__private::Option::is_some(&__field7) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                        );
                                    }
                                    __field7 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            _rt::String,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field8 => {
                                    if _serde::__private::Option::is_some(&__field8) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "released_at",
                                            ),
                                        );
                                    }
                                    __field8 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<i32>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field9 => {
                                    if _serde::__private::Option::is_some(&__field9) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("status"),
                                        );
                                    }
                                    __field9 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            SubscriptionScheduleStatus,
                                        >(&mut __map)?,
                                    );
                                }
                                _ => {
                                    let _ = _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map)?;
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("canceled_at")?
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("completed_at")?
                            }
                        };
                        let __field2 = match __field2 {
                            _serde::__private::Some(__field2) => __field2,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("created")?
                            }
                        };
                        let __field3 = match __field3 {
                            _serde::__private::Some(__field3) => __field3,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("customer")?
                            }
                        };
                        let __field4 = match __field4 {
                            _serde::__private::Some(__field4) => __field4,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("default_settings")?
                            }
                        };
                        let __field5 = match __field5 {
                            _serde::__private::Some(__field5) => __field5,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("end_behavior")?
                            }
                        };
                        let __field6 = match __field6 {
                            _serde::__private::Some(__field6) => __field6,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("event_type")?
                            }
                        };
                        let __field7 = match __field7 {
                            _serde::__private::Some(__field7) => __field7,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("id")?
                            }
                        };
                        let __field8 = match __field8 {
                            _serde::__private::Some(__field8) => __field8,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("released_at")?
                            }
                        };
                        let __field9 = match __field9 {
                            _serde::__private::Some(__field9) => __field9,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("status")?
                            }
                        };
                        _serde::__private::Ok(SubscriptionSchedule {
                            canceled_at: __field0,
                            completed_at: __field1,
                            created: __field2,
                            customer: __field3,
                            default_settings: __field4,
                            end_behavior: __field5,
                            event_type: __field6,
                            id: __field7,
                            released_at: __field8,
                            status: __field9,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &[
                    "canceled_at",
                    "completed_at",
                    "created",
                    "customer",
                    "default_settings",
                    "end_behavior",
                    "event_type",
                    "id",
                    "released_at",
                    "status",
                ];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "SubscriptionSchedule",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<SubscriptionSchedule>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for SubscriptionSchedule {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = _serde::Serializer::serialize_struct(
                    __serializer,
                    "SubscriptionSchedule",
                    false as usize + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "canceled_at",
                    &self.canceled_at,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "completed_at",
                    &self.completed_at,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "created",
                    &self.created,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "customer",
                    &self.customer,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "default_settings",
                    &self.default_settings,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "end_behavior",
                    &self.end_behavior,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "event_type",
                    &self.event_type,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "released_at",
                    &self.released_at,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "status",
                    &self.status,
                )?;
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for SubscriptionSchedule {
        #[inline]
        fn clone(&self) -> SubscriptionSchedule {
            SubscriptionSchedule {
                canceled_at: ::core::clone::Clone::clone(&self.canceled_at),
                completed_at: ::core::clone::Clone::clone(&self.completed_at),
                created: ::core::clone::Clone::clone(&self.created),
                customer: ::core::clone::Clone::clone(&self.customer),
                default_settings: ::core::clone::Clone::clone(&self.default_settings),
                end_behavior: ::core::clone::Clone::clone(&self.end_behavior),
                event_type: ::core::clone::Clone::clone(&self.event_type),
                id: ::core::clone::Clone::clone(&self.id),
                released_at: ::core::clone::Clone::clone(&self.released_at),
                status: ::core::clone::Clone::clone(&self.status),
            }
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for SubscriptionSchedule {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for SubscriptionSchedule {
        #[inline]
        fn eq(&self, other: &SubscriptionSchedule) -> bool {
            self.canceled_at == other.canceled_at
                && self.completed_at == other.completed_at
                && self.created == other.created && self.customer == other.customer
                && self.default_settings == other.default_settings
                && self.end_behavior == other.end_behavior
                && self.event_type == other.event_type && self.id == other.id
                && self.released_at == other.released_at && self.status == other.status
        }
    }
    impl ::core::fmt::Debug for SubscriptionSchedule {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("SubscriptionSchedule")
                .field("canceled-at", &self.canceled_at)
                .field("completed-at", &self.completed_at)
                .field("created", &self.created)
                .field("customer", &self.customer)
                .field("default-settings", &self.default_settings)
                .field("end-behavior", &self.end_behavior)
                .field("event-type", &self.event_type)
                .field("id", &self.id)
                .field("released-at", &self.released_at)
                .field("status", &self.status)
                .finish()
        }
    }
    pub enum TextObjectType {
        Mrkdwn,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for TextObjectType {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 1",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "Mrkdwn" => _serde::__private::Ok(__Field::__field0),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"Mrkdwn" => _serde::__private::Ok(__Field::__field0),
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<TextObjectType>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = TextObjectType;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum TextObjectType",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(TextObjectType::Mrkdwn)
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &["Mrkdwn"];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "TextObjectType",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<TextObjectType>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for TextObjectType {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    TextObjectType::Mrkdwn => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "TextObjectType",
                            0u32,
                            "Mrkdwn",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for TextObjectType {
        #[inline]
        fn clone(&self) -> TextObjectType {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for TextObjectType {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for TextObjectType {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for TextObjectType {
        #[inline]
        fn eq(&self, other: &TextObjectType) -> bool {
            true
        }
    }
    impl ::core::fmt::Debug for TextObjectType {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                TextObjectType::Mrkdwn => {
                    f.debug_tuple("TextObjectType::Mrkdwn").finish()
                }
            }
        }
    }
    pub struct TextObject {
        pub text: _rt::String,
        pub type_: TextObjectType,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for TextObject {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "text" => _serde::__private::Ok(__Field::__field0),
                            "type_" => _serde::__private::Ok(__Field::__field1),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"text" => _serde::__private::Ok(__Field::__field0),
                            b"type_" => _serde::__private::Ok(__Field::__field1),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<TextObject>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = TextObject;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct TextObject",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match _serde::de::SeqAccess::next_element::<
                            _rt::String,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct TextObject with 2 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match _serde::de::SeqAccess::next_element::<
                            TextObjectType,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct TextObject with 2 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(TextObject {
                            text: __field0,
                            type_: __field1,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<_rt::String> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<TextObjectType> = _serde::__private::None;
                        while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                            __Field,
                        >(&mut __map)? {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("text"),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            _rt::String,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("type_"),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            TextObjectType,
                                        >(&mut __map)?,
                                    );
                                }
                                _ => {
                                    let _ = _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map)?;
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("text")?
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("type_")?
                            }
                        };
                        _serde::__private::Ok(TextObject {
                            text: __field0,
                            type_: __field1,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &["text", "type_"];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "TextObject",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<TextObject>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for TextObject {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = _serde::Serializer::serialize_struct(
                    __serializer,
                    "TextObject",
                    false as usize + 1 + 1,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "text",
                    &self.text,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "type_",
                    &self.type_,
                )?;
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for TextObject {
        #[inline]
        fn clone(&self) -> TextObject {
            TextObject {
                text: ::core::clone::Clone::clone(&self.text),
                type_: ::core::clone::Clone::clone(&self.type_),
            }
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for TextObject {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for TextObject {
        #[inline]
        fn eq(&self, other: &TextObject) -> bool {
            self.text == other.text && self.type_ == other.type_
        }
    }
    impl ::core::fmt::Debug for TextObject {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("TextObject")
                .field("text", &self.text)
                .field("type", &self.type_)
                .finish()
        }
    }
    pub type FieldsSectionFields = _rt::Vec<TextObject>;
    pub struct FieldsSection {
        pub fields: FieldsSectionFields,
        pub type_: FieldsSectionType,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for FieldsSection {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "fields" => _serde::__private::Ok(__Field::__field0),
                            "type_" => _serde::__private::Ok(__Field::__field1),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"fields" => _serde::__private::Ok(__Field::__field0),
                            b"type_" => _serde::__private::Ok(__Field::__field1),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<FieldsSection>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = FieldsSection;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct FieldsSection",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match _serde::de::SeqAccess::next_element::<
                            FieldsSectionFields,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct FieldsSection with 2 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match _serde::de::SeqAccess::next_element::<
                            FieldsSectionType,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct FieldsSection with 2 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(FieldsSection {
                            fields: __field0,
                            type_: __field1,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<
                            FieldsSectionFields,
                        > = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<FieldsSectionType> = _serde::__private::None;
                        while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                            __Field,
                        >(&mut __map)? {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("fields"),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            FieldsSectionFields,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("type_"),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            FieldsSectionType,
                                        >(&mut __map)?,
                                    );
                                }
                                _ => {
                                    let _ = _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map)?;
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("fields")?
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("type_")?
                            }
                        };
                        _serde::__private::Ok(FieldsSection {
                            fields: __field0,
                            type_: __field1,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &["fields", "type_"];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "FieldsSection",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<FieldsSection>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for FieldsSection {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = _serde::Serializer::serialize_struct(
                    __serializer,
                    "FieldsSection",
                    false as usize + 1 + 1,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "fields",
                    &self.fields,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "type_",
                    &self.type_,
                )?;
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for FieldsSection {
        #[inline]
        fn clone(&self) -> FieldsSection {
            FieldsSection {
                fields: ::core::clone::Clone::clone(&self.fields),
                type_: ::core::clone::Clone::clone(&self.type_),
            }
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for FieldsSection {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for FieldsSection {
        #[inline]
        fn eq(&self, other: &FieldsSection) -> bool {
            self.fields == other.fields && self.type_ == other.type_
        }
    }
    impl ::core::fmt::Debug for FieldsSection {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("FieldsSection")
                .field("fields", &self.fields)
                .field("type", &self.type_)
                .finish()
        }
    }
    pub enum TextSectionType {
        Section,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for TextSectionType {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 1",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "Section" => _serde::__private::Ok(__Field::__field0),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"Section" => _serde::__private::Ok(__Field::__field0),
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<TextSectionType>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = TextSectionType;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum TextSectionType",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(TextSectionType::Section)
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &["Section"];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "TextSectionType",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<TextSectionType>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for TextSectionType {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    TextSectionType::Section => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "TextSectionType",
                            0u32,
                            "Section",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for TextSectionType {
        #[inline]
        fn clone(&self) -> TextSectionType {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for TextSectionType {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for TextSectionType {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for TextSectionType {
        #[inline]
        fn eq(&self, other: &TextSectionType) -> bool {
            true
        }
    }
    impl ::core::fmt::Debug for TextSectionType {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                TextSectionType::Section => {
                    f.debug_tuple("TextSectionType::Section").finish()
                }
            }
        }
    }
    pub struct TextSection {
        pub text: TextObject,
        pub type_: TextSectionType,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for TextSection {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "text" => _serde::__private::Ok(__Field::__field0),
                            "type_" => _serde::__private::Ok(__Field::__field1),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"text" => _serde::__private::Ok(__Field::__field0),
                            b"type_" => _serde::__private::Ok(__Field::__field1),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<TextSection>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = TextSection;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct TextSection",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match _serde::de::SeqAccess::next_element::<
                            TextObject,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct TextSection with 2 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match _serde::de::SeqAccess::next_element::<
                            TextSectionType,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct TextSection with 2 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(TextSection {
                            text: __field0,
                            type_: __field1,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<TextObject> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<TextSectionType> = _serde::__private::None;
                        while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                            __Field,
                        >(&mut __map)? {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("text"),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<TextObject>(&mut __map)?,
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("type_"),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            TextSectionType,
                                        >(&mut __map)?,
                                    );
                                }
                                _ => {
                                    let _ = _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map)?;
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("text")?
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("type_")?
                            }
                        };
                        _serde::__private::Ok(TextSection {
                            text: __field0,
                            type_: __field1,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &["text", "type_"];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "TextSection",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<TextSection>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for TextSection {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = _serde::Serializer::serialize_struct(
                    __serializer,
                    "TextSection",
                    false as usize + 1 + 1,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "text",
                    &self.text,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "type_",
                    &self.type_,
                )?;
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for TextSection {
        #[inline]
        fn clone(&self) -> TextSection {
            TextSection {
                text: ::core::clone::Clone::clone(&self.text),
                type_: ::core::clone::Clone::clone(&self.type_),
            }
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for TextSection {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for TextSection {
        #[inline]
        fn eq(&self, other: &TextSection) -> bool {
            self.text == other.text && self.type_ == other.type_
        }
    }
    impl ::core::fmt::Debug for TextSection {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("TextSection")
                .field("text", &self.text)
                .field("type", &self.type_)
                .finish()
        }
    }
    pub enum SlackEventUntagged {
        FieldsSection(FieldsSection),
        TextSection(TextSection),
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for SlackEventUntagged {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 2",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "FieldsSection" => _serde::__private::Ok(__Field::__field0),
                            "TextSection" => _serde::__private::Ok(__Field::__field1),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"FieldsSection" => _serde::__private::Ok(__Field::__field0),
                            b"TextSection" => _serde::__private::Ok(__Field::__field1),
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<SlackEventUntagged>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = SlackEventUntagged;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum SlackEventUntagged",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::__private::Result::map(
                                    _serde::de::VariantAccess::newtype_variant::<
                                        FieldsSection,
                                    >(__variant),
                                    SlackEventUntagged::FieldsSection,
                                )
                            }
                            (__Field::__field1, __variant) => {
                                _serde::__private::Result::map(
                                    _serde::de::VariantAccess::newtype_variant::<
                                        TextSection,
                                    >(__variant),
                                    SlackEventUntagged::TextSection,
                                )
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &[
                    "FieldsSection",
                    "TextSection",
                ];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "SlackEventUntagged",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<SlackEventUntagged>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for SlackEventUntagged {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    SlackEventUntagged::FieldsSection(ref __field0) => {
                        _serde::Serializer::serialize_newtype_variant(
                            __serializer,
                            "SlackEventUntagged",
                            0u32,
                            "FieldsSection",
                            __field0,
                        )
                    }
                    SlackEventUntagged::TextSection(ref __field0) => {
                        _serde::Serializer::serialize_newtype_variant(
                            __serializer,
                            "SlackEventUntagged",
                            1u32,
                            "TextSection",
                            __field0,
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for SlackEventUntagged {
        #[inline]
        fn clone(&self) -> SlackEventUntagged {
            match self {
                SlackEventUntagged::FieldsSection(__self_0) => {
                    SlackEventUntagged::FieldsSection(
                        ::core::clone::Clone::clone(__self_0),
                    )
                }
                SlackEventUntagged::TextSection(__self_0) => {
                    SlackEventUntagged::TextSection(
                        ::core::clone::Clone::clone(__self_0),
                    )
                }
            }
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for SlackEventUntagged {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for SlackEventUntagged {
        #[inline]
        fn eq(&self, other: &SlackEventUntagged) -> bool {
            let __self_discr = ::core::intrinsics::discriminant_value(self);
            let __arg1_discr = ::core::intrinsics::discriminant_value(other);
            __self_discr == __arg1_discr
                && match (self, other) {
                    (
                        SlackEventUntagged::FieldsSection(__self_0),
                        SlackEventUntagged::FieldsSection(__arg1_0),
                    ) => __self_0 == __arg1_0,
                    (
                        SlackEventUntagged::TextSection(__self_0),
                        SlackEventUntagged::TextSection(__arg1_0),
                    ) => __self_0 == __arg1_0,
                    _ => unsafe { ::core::intrinsics::unreachable() }
                }
        }
    }
    impl ::core::fmt::Debug for SlackEventUntagged {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                SlackEventUntagged::FieldsSection(e) => {
                    f.debug_tuple("SlackEventUntagged::FieldsSection").field(e).finish()
                }
                SlackEventUntagged::TextSection(e) => {
                    f.debug_tuple("SlackEventUntagged::TextSection").field(e).finish()
                }
            }
        }
    }
    pub type SlackEventBlocks = _rt::Vec<SlackEventUntagged>;
    pub struct SlackEvent {
        pub blocks: SlackEventBlocks,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for SlackEvent {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "blocks" => _serde::__private::Ok(__Field::__field0),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"blocks" => _serde::__private::Ok(__Field::__field0),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<SlackEvent>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = SlackEvent;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct SlackEvent",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match _serde::de::SeqAccess::next_element::<
                            SlackEventBlocks,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct SlackEvent with 1 element",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(SlackEvent { blocks: __field0 })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<SlackEventBlocks> = _serde::__private::None;
                        while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                            __Field,
                        >(&mut __map)? {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("blocks"),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            SlackEventBlocks,
                                        >(&mut __map)?,
                                    );
                                }
                                _ => {
                                    let _ = _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map)?;
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("blocks")?
                            }
                        };
                        _serde::__private::Ok(SlackEvent { blocks: __field0 })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &["blocks"];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "SlackEvent",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<SlackEvent>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for SlackEvent {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = _serde::Serializer::serialize_struct(
                    __serializer,
                    "SlackEvent",
                    false as usize + 1,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "blocks",
                    &self.blocks,
                )?;
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for SlackEvent {
        #[inline]
        fn clone(&self) -> SlackEvent {
            SlackEvent {
                blocks: ::core::clone::Clone::clone(&self.blocks),
            }
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for SlackEvent {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for SlackEvent {
        #[inline]
        fn eq(&self, other: &SlackEvent) -> bool {
            self.blocks == other.blocks
        }
    }
    impl ::core::fmt::Debug for SlackEvent {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("SlackEvent").field("blocks", &self.blocks).finish()
        }
    }
    pub enum TopupEventType {
        TopupCanceled,
        TopupCreated,
        TopupFailed,
        TopupReversed,
        TopupSucceeded,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for TopupEventType {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 5",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "TopupCanceled" => _serde::__private::Ok(__Field::__field0),
                            "TopupCreated" => _serde::__private::Ok(__Field::__field1),
                            "TopupFailed" => _serde::__private::Ok(__Field::__field2),
                            "TopupReversed" => _serde::__private::Ok(__Field::__field3),
                            "TopupSucceeded" => _serde::__private::Ok(__Field::__field4),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"TopupCanceled" => _serde::__private::Ok(__Field::__field0),
                            b"TopupCreated" => _serde::__private::Ok(__Field::__field1),
                            b"TopupFailed" => _serde::__private::Ok(__Field::__field2),
                            b"TopupReversed" => _serde::__private::Ok(__Field::__field3),
                            b"TopupSucceeded" => _serde::__private::Ok(__Field::__field4),
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<TopupEventType>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = TopupEventType;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum TopupEventType",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(TopupEventType::TopupCanceled)
                            }
                            (__Field::__field1, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(TopupEventType::TopupCreated)
                            }
                            (__Field::__field2, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(TopupEventType::TopupFailed)
                            }
                            (__Field::__field3, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(TopupEventType::TopupReversed)
                            }
                            (__Field::__field4, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(TopupEventType::TopupSucceeded)
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &[
                    "TopupCanceled",
                    "TopupCreated",
                    "TopupFailed",
                    "TopupReversed",
                    "TopupSucceeded",
                ];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "TopupEventType",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<TopupEventType>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for TopupEventType {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    TopupEventType::TopupCanceled => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "TopupEventType",
                            0u32,
                            "TopupCanceled",
                        )
                    }
                    TopupEventType::TopupCreated => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "TopupEventType",
                            1u32,
                            "TopupCreated",
                        )
                    }
                    TopupEventType::TopupFailed => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "TopupEventType",
                            2u32,
                            "TopupFailed",
                        )
                    }
                    TopupEventType::TopupReversed => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "TopupEventType",
                            3u32,
                            "TopupReversed",
                        )
                    }
                    TopupEventType::TopupSucceeded => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "TopupEventType",
                            4u32,
                            "TopupSucceeded",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for TopupEventType {
        #[inline]
        fn clone(&self) -> TopupEventType {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for TopupEventType {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for TopupEventType {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for TopupEventType {
        #[inline]
        fn eq(&self, other: &TopupEventType) -> bool {
            let __self_discr = ::core::intrinsics::discriminant_value(self);
            let __arg1_discr = ::core::intrinsics::discriminant_value(other);
            __self_discr == __arg1_discr
        }
    }
    impl ::core::fmt::Debug for TopupEventType {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                TopupEventType::TopupCanceled => {
                    f.debug_tuple("TopupEventType::TopupCanceled").finish()
                }
                TopupEventType::TopupCreated => {
                    f.debug_tuple("TopupEventType::TopupCreated").finish()
                }
                TopupEventType::TopupFailed => {
                    f.debug_tuple("TopupEventType::TopupFailed").finish()
                }
                TopupEventType::TopupReversed => {
                    f.debug_tuple("TopupEventType::TopupReversed").finish()
                }
                TopupEventType::TopupSucceeded => {
                    f.debug_tuple("TopupEventType::TopupSucceeded").finish()
                }
            }
        }
    }
    pub enum TopupStatus {
        Canceled,
        Failed,
        Pending,
        Reversed,
        Succeeded,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for TopupStatus {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 5",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "Canceled" => _serde::__private::Ok(__Field::__field0),
                            "Failed" => _serde::__private::Ok(__Field::__field1),
                            "Pending" => _serde::__private::Ok(__Field::__field2),
                            "Reversed" => _serde::__private::Ok(__Field::__field3),
                            "Succeeded" => _serde::__private::Ok(__Field::__field4),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"Canceled" => _serde::__private::Ok(__Field::__field0),
                            b"Failed" => _serde::__private::Ok(__Field::__field1),
                            b"Pending" => _serde::__private::Ok(__Field::__field2),
                            b"Reversed" => _serde::__private::Ok(__Field::__field3),
                            b"Succeeded" => _serde::__private::Ok(__Field::__field4),
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<TopupStatus>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = TopupStatus;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum TopupStatus",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(TopupStatus::Canceled)
                            }
                            (__Field::__field1, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(TopupStatus::Failed)
                            }
                            (__Field::__field2, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(TopupStatus::Pending)
                            }
                            (__Field::__field3, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(TopupStatus::Reversed)
                            }
                            (__Field::__field4, __variant) => {
                                _serde::de::VariantAccess::unit_variant(__variant)?;
                                _serde::__private::Ok(TopupStatus::Succeeded)
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &[
                    "Canceled",
                    "Failed",
                    "Pending",
                    "Reversed",
                    "Succeeded",
                ];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "TopupStatus",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<TopupStatus>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for TopupStatus {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    TopupStatus::Canceled => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "TopupStatus",
                            0u32,
                            "Canceled",
                        )
                    }
                    TopupStatus::Failed => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "TopupStatus",
                            1u32,
                            "Failed",
                        )
                    }
                    TopupStatus::Pending => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "TopupStatus",
                            2u32,
                            "Pending",
                        )
                    }
                    TopupStatus::Reversed => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "TopupStatus",
                            3u32,
                            "Reversed",
                        )
                    }
                    TopupStatus::Succeeded => {
                        _serde::Serializer::serialize_unit_variant(
                            __serializer,
                            "TopupStatus",
                            4u32,
                            "Succeeded",
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for TopupStatus {
        #[inline]
        fn clone(&self) -> TopupStatus {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for TopupStatus {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for TopupStatus {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for TopupStatus {
        #[inline]
        fn eq(&self, other: &TopupStatus) -> bool {
            let __self_discr = ::core::intrinsics::discriminant_value(self);
            let __arg1_discr = ::core::intrinsics::discriminant_value(other);
            __self_discr == __arg1_discr
        }
    }
    impl ::core::fmt::Debug for TopupStatus {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                TopupStatus::Canceled => f.debug_tuple("TopupStatus::Canceled").finish(),
                TopupStatus::Failed => f.debug_tuple("TopupStatus::Failed").finish(),
                TopupStatus::Pending => f.debug_tuple("TopupStatus::Pending").finish(),
                TopupStatus::Reversed => f.debug_tuple("TopupStatus::Reversed").finish(),
                TopupStatus::Succeeded => {
                    f.debug_tuple("TopupStatus::Succeeded").finish()
                }
            }
        }
    }
    pub struct Topup {
        pub amount: i32,
        pub created: i32,
        pub currency: _rt::String,
        pub description: Option<_rt::String>,
        pub event_type: TopupEventType,
        pub expected_availability_date: Option<i32>,
        pub failure_code: Option<_rt::String>,
        pub failure_message: Option<_rt::String>,
        pub id: _rt::String,
        pub status: TopupStatus,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for Topup {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                    __field7,
                    __field8,
                    __field9,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            6u64 => _serde::__private::Ok(__Field::__field6),
                            7u64 => _serde::__private::Ok(__Field::__field7),
                            8u64 => _serde::__private::Ok(__Field::__field8),
                            9u64 => _serde::__private::Ok(__Field::__field9),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "amount" => _serde::__private::Ok(__Field::__field0),
                            "created" => _serde::__private::Ok(__Field::__field1),
                            "currency" => _serde::__private::Ok(__Field::__field2),
                            "description" => _serde::__private::Ok(__Field::__field3),
                            "event_type" => _serde::__private::Ok(__Field::__field4),
                            "expected_availability_date" => {
                                _serde::__private::Ok(__Field::__field5)
                            }
                            "failure_code" => _serde::__private::Ok(__Field::__field6),
                            "failure_message" => _serde::__private::Ok(__Field::__field7),
                            "id" => _serde::__private::Ok(__Field::__field8),
                            "status" => _serde::__private::Ok(__Field::__field9),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"amount" => _serde::__private::Ok(__Field::__field0),
                            b"created" => _serde::__private::Ok(__Field::__field1),
                            b"currency" => _serde::__private::Ok(__Field::__field2),
                            b"description" => _serde::__private::Ok(__Field::__field3),
                            b"event_type" => _serde::__private::Ok(__Field::__field4),
                            b"expected_availability_date" => {
                                _serde::__private::Ok(__Field::__field5)
                            }
                            b"failure_code" => _serde::__private::Ok(__Field::__field6),
                            b"failure_message" => {
                                _serde::__private::Ok(__Field::__field7)
                            }
                            b"id" => _serde::__private::Ok(__Field::__field8),
                            b"status" => _serde::__private::Ok(__Field::__field9),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<Topup>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = Topup;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct Topup",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match _serde::de::SeqAccess::next_element::<
                            i32,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct Topup with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match _serde::de::SeqAccess::next_element::<
                            i32,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct Topup with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field2 = match _serde::de::SeqAccess::next_element::<
                            _rt::String,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        2usize,
                                        &"struct Topup with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field3 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        3usize,
                                        &"struct Topup with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field4 = match _serde::de::SeqAccess::next_element::<
                            TopupEventType,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        4usize,
                                        &"struct Topup with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field5 = match _serde::de::SeqAccess::next_element::<
                            Option<i32>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        5usize,
                                        &"struct Topup with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field6 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        6usize,
                                        &"struct Topup with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field7 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        7usize,
                                        &"struct Topup with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field8 = match _serde::de::SeqAccess::next_element::<
                            _rt::String,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        8usize,
                                        &"struct Topup with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field9 = match _serde::de::SeqAccess::next_element::<
                            TopupStatus,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        9usize,
                                        &"struct Topup with 10 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(Topup {
                            amount: __field0,
                            created: __field1,
                            currency: __field2,
                            description: __field3,
                            event_type: __field4,
                            expected_availability_date: __field5,
                            failure_code: __field6,
                            failure_message: __field7,
                            id: __field8,
                            status: __field9,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<i32> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<i32> = _serde::__private::None;
                        let mut __field2: _serde::__private::Option<_rt::String> = _serde::__private::None;
                        let mut __field3: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field4: _serde::__private::Option<TopupEventType> = _serde::__private::None;
                        let mut __field5: _serde::__private::Option<Option<i32>> = _serde::__private::None;
                        let mut __field6: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field7: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field8: _serde::__private::Option<_rt::String> = _serde::__private::None;
                        let mut __field9: _serde::__private::Option<TopupStatus> = _serde::__private::None;
                        while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                            __Field,
                        >(&mut __map)? {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("amount"),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "created",
                                            ),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                    );
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "currency",
                                            ),
                                        );
                                    }
                                    __field2 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            _rt::String,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field3 => {
                                    if _serde::__private::Option::is_some(&__field3) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "description",
                                            ),
                                        );
                                    }
                                    __field3 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field4 => {
                                    if _serde::__private::Option::is_some(&__field4) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "event_type",
                                            ),
                                        );
                                    }
                                    __field4 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            TopupEventType,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field5 => {
                                    if _serde::__private::Option::is_some(&__field5) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "expected_availability_date",
                                            ),
                                        );
                                    }
                                    __field5 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<i32>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field6 => {
                                    if _serde::__private::Option::is_some(&__field6) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "failure_code",
                                            ),
                                        );
                                    }
                                    __field6 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field7 => {
                                    if _serde::__private::Option::is_some(&__field7) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "failure_message",
                                            ),
                                        );
                                    }
                                    __field7 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field8 => {
                                    if _serde::__private::Option::is_some(&__field8) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                        );
                                    }
                                    __field8 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            _rt::String,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field9 => {
                                    if _serde::__private::Option::is_some(&__field9) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("status"),
                                        );
                                    }
                                    __field9 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            TopupStatus,
                                        >(&mut __map)?,
                                    );
                                }
                                _ => {
                                    let _ = _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map)?;
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("amount")?
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("created")?
                            }
                        };
                        let __field2 = match __field2 {
                            _serde::__private::Some(__field2) => __field2,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("currency")?
                            }
                        };
                        let __field3 = match __field3 {
                            _serde::__private::Some(__field3) => __field3,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("description")?
                            }
                        };
                        let __field4 = match __field4 {
                            _serde::__private::Some(__field4) => __field4,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("event_type")?
                            }
                        };
                        let __field5 = match __field5 {
                            _serde::__private::Some(__field5) => __field5,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field(
                                    "expected_availability_date",
                                )?
                            }
                        };
                        let __field6 = match __field6 {
                            _serde::__private::Some(__field6) => __field6,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("failure_code")?
                            }
                        };
                        let __field7 = match __field7 {
                            _serde::__private::Some(__field7) => __field7,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("failure_message")?
                            }
                        };
                        let __field8 = match __field8 {
                            _serde::__private::Some(__field8) => __field8,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("id")?
                            }
                        };
                        let __field9 = match __field9 {
                            _serde::__private::Some(__field9) => __field9,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("status")?
                            }
                        };
                        _serde::__private::Ok(Topup {
                            amount: __field0,
                            created: __field1,
                            currency: __field2,
                            description: __field3,
                            event_type: __field4,
                            expected_availability_date: __field5,
                            failure_code: __field6,
                            failure_message: __field7,
                            id: __field8,
                            status: __field9,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &[
                    "amount",
                    "created",
                    "currency",
                    "description",
                    "event_type",
                    "expected_availability_date",
                    "failure_code",
                    "failure_message",
                    "id",
                    "status",
                ];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "Topup",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<Topup>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for Topup {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = _serde::Serializer::serialize_struct(
                    __serializer,
                    "Topup",
                    false as usize + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "amount",
                    &self.amount,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "created",
                    &self.created,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "currency",
                    &self.currency,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "description",
                    &self.description,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "event_type",
                    &self.event_type,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "expected_availability_date",
                    &self.expected_availability_date,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "failure_code",
                    &self.failure_code,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "failure_message",
                    &self.failure_message,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "status",
                    &self.status,
                )?;
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for Topup {
        #[inline]
        fn clone(&self) -> Topup {
            Topup {
                amount: ::core::clone::Clone::clone(&self.amount),
                created: ::core::clone::Clone::clone(&self.created),
                currency: ::core::clone::Clone::clone(&self.currency),
                description: ::core::clone::Clone::clone(&self.description),
                event_type: ::core::clone::Clone::clone(&self.event_type),
                expected_availability_date: ::core::clone::Clone::clone(
                    &self.expected_availability_date,
                ),
                failure_code: ::core::clone::Clone::clone(&self.failure_code),
                failure_message: ::core::clone::Clone::clone(&self.failure_message),
                id: ::core::clone::Clone::clone(&self.id),
                status: ::core::clone::Clone::clone(&self.status),
            }
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for Topup {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for Topup {
        #[inline]
        fn eq(&self, other: &Topup) -> bool {
            self.amount == other.amount && self.created == other.created
                && self.currency == other.currency
                && self.description == other.description
                && self.event_type == other.event_type
                && self.expected_availability_date == other.expected_availability_date
                && self.failure_code == other.failure_code
                && self.failure_message == other.failure_message && self.id == other.id
                && self.status == other.status
        }
    }
    impl ::core::fmt::Debug for Topup {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("Topup")
                .field("amount", &self.amount)
                .field("created", &self.created)
                .field("currency", &self.currency)
                .field("description", &self.description)
                .field("event-type", &self.event_type)
                .field("expected-availability-date", &self.expected_availability_date)
                .field("failure-code", &self.failure_code)
                .field("failure-message", &self.failure_message)
                .field("id", &self.id)
                .field("status", &self.status)
                .finish()
        }
    }
    pub enum EventData {
        Charge(Charge),
        Customer(Customer),
        Invoice(Invoice),
        Invoiceitem(Invoiceitem),
        IssuingAuthorization(IssuingAuthorization),
        IssuingCard(IssuingCard),
        IssuingCardholder(IssuingCardholder),
        IssuingDispute(IssuingDispute),
        PaymentIntent(PaymentIntent),
        Payout(Payout),
        Source(Source),
        SubscriptionSchedule(SubscriptionSchedule),
        Topup(Topup),
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for EventData {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                    __field7,
                    __field8,
                    __field9,
                    __field10,
                    __field11,
                    __field12,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "variant identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            6u64 => _serde::__private::Ok(__Field::__field6),
                            7u64 => _serde::__private::Ok(__Field::__field7),
                            8u64 => _serde::__private::Ok(__Field::__field8),
                            9u64 => _serde::__private::Ok(__Field::__field9),
                            10u64 => _serde::__private::Ok(__Field::__field10),
                            11u64 => _serde::__private::Ok(__Field::__field11),
                            12u64 => _serde::__private::Ok(__Field::__field12),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::invalid_value(
                                        _serde::de::Unexpected::Unsigned(__value),
                                        &"variant index 0 <= i < 13",
                                    ),
                                )
                            }
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "Charge" => _serde::__private::Ok(__Field::__field0),
                            "Customer" => _serde::__private::Ok(__Field::__field1),
                            "Invoice" => _serde::__private::Ok(__Field::__field2),
                            "Invoiceitem" => _serde::__private::Ok(__Field::__field3),
                            "IssuingAuthorization" => {
                                _serde::__private::Ok(__Field::__field4)
                            }
                            "IssuingCard" => _serde::__private::Ok(__Field::__field5),
                            "IssuingCardholder" => {
                                _serde::__private::Ok(__Field::__field6)
                            }
                            "IssuingDispute" => _serde::__private::Ok(__Field::__field7),
                            "PaymentIntent" => _serde::__private::Ok(__Field::__field8),
                            "Payout" => _serde::__private::Ok(__Field::__field9),
                            "Source" => _serde::__private::Ok(__Field::__field10),
                            "SubscriptionSchedule" => {
                                _serde::__private::Ok(__Field::__field11)
                            }
                            "Topup" => _serde::__private::Ok(__Field::__field12),
                            _ => {
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"Charge" => _serde::__private::Ok(__Field::__field0),
                            b"Customer" => _serde::__private::Ok(__Field::__field1),
                            b"Invoice" => _serde::__private::Ok(__Field::__field2),
                            b"Invoiceitem" => _serde::__private::Ok(__Field::__field3),
                            b"IssuingAuthorization" => {
                                _serde::__private::Ok(__Field::__field4)
                            }
                            b"IssuingCard" => _serde::__private::Ok(__Field::__field5),
                            b"IssuingCardholder" => {
                                _serde::__private::Ok(__Field::__field6)
                            }
                            b"IssuingDispute" => _serde::__private::Ok(__Field::__field7),
                            b"PaymentIntent" => _serde::__private::Ok(__Field::__field8),
                            b"Payout" => _serde::__private::Ok(__Field::__field9),
                            b"Source" => _serde::__private::Ok(__Field::__field10),
                            b"SubscriptionSchedule" => {
                                _serde::__private::Ok(__Field::__field11)
                            }
                            b"Topup" => _serde::__private::Ok(__Field::__field12),
                            _ => {
                                let __value = &_serde::__private::from_utf8_lossy(__value);
                                _serde::__private::Err(
                                    _serde::de::Error::unknown_variant(__value, VARIANTS),
                                )
                            }
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<EventData>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = EventData;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "enum EventData",
                        )
                    }
                    fn visit_enum<__A>(
                        self,
                        __data: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::EnumAccess<'de>,
                    {
                        match _serde::de::EnumAccess::variant(__data)? {
                            (__Field::__field0, __variant) => {
                                _serde::__private::Result::map(
                                    _serde::de::VariantAccess::newtype_variant::<
                                        Charge,
                                    >(__variant),
                                    EventData::Charge,
                                )
                            }
                            (__Field::__field1, __variant) => {
                                _serde::__private::Result::map(
                                    _serde::de::VariantAccess::newtype_variant::<
                                        Customer,
                                    >(__variant),
                                    EventData::Customer,
                                )
                            }
                            (__Field::__field2, __variant) => {
                                _serde::__private::Result::map(
                                    _serde::de::VariantAccess::newtype_variant::<
                                        Invoice,
                                    >(__variant),
                                    EventData::Invoice,
                                )
                            }
                            (__Field::__field3, __variant) => {
                                _serde::__private::Result::map(
                                    _serde::de::VariantAccess::newtype_variant::<
                                        Invoiceitem,
                                    >(__variant),
                                    EventData::Invoiceitem,
                                )
                            }
                            (__Field::__field4, __variant) => {
                                _serde::__private::Result::map(
                                    _serde::de::VariantAccess::newtype_variant::<
                                        IssuingAuthorization,
                                    >(__variant),
                                    EventData::IssuingAuthorization,
                                )
                            }
                            (__Field::__field5, __variant) => {
                                _serde::__private::Result::map(
                                    _serde::de::VariantAccess::newtype_variant::<
                                        IssuingCard,
                                    >(__variant),
                                    EventData::IssuingCard,
                                )
                            }
                            (__Field::__field6, __variant) => {
                                _serde::__private::Result::map(
                                    _serde::de::VariantAccess::newtype_variant::<
                                        IssuingCardholder,
                                    >(__variant),
                                    EventData::IssuingCardholder,
                                )
                            }
                            (__Field::__field7, __variant) => {
                                _serde::__private::Result::map(
                                    _serde::de::VariantAccess::newtype_variant::<
                                        IssuingDispute,
                                    >(__variant),
                                    EventData::IssuingDispute,
                                )
                            }
                            (__Field::__field8, __variant) => {
                                _serde::__private::Result::map(
                                    _serde::de::VariantAccess::newtype_variant::<
                                        PaymentIntent,
                                    >(__variant),
                                    EventData::PaymentIntent,
                                )
                            }
                            (__Field::__field9, __variant) => {
                                _serde::__private::Result::map(
                                    _serde::de::VariantAccess::newtype_variant::<
                                        Payout,
                                    >(__variant),
                                    EventData::Payout,
                                )
                            }
                            (__Field::__field10, __variant) => {
                                _serde::__private::Result::map(
                                    _serde::de::VariantAccess::newtype_variant::<
                                        Source,
                                    >(__variant),
                                    EventData::Source,
                                )
                            }
                            (__Field::__field11, __variant) => {
                                _serde::__private::Result::map(
                                    _serde::de::VariantAccess::newtype_variant::<
                                        SubscriptionSchedule,
                                    >(__variant),
                                    EventData::SubscriptionSchedule,
                                )
                            }
                            (__Field::__field12, __variant) => {
                                _serde::__private::Result::map(
                                    _serde::de::VariantAccess::newtype_variant::<
                                        Topup,
                                    >(__variant),
                                    EventData::Topup,
                                )
                            }
                        }
                    }
                }
                #[doc(hidden)]
                const VARIANTS: &'static [&'static str] = &[
                    "Charge",
                    "Customer",
                    "Invoice",
                    "Invoiceitem",
                    "IssuingAuthorization",
                    "IssuingCard",
                    "IssuingCardholder",
                    "IssuingDispute",
                    "PaymentIntent",
                    "Payout",
                    "Source",
                    "SubscriptionSchedule",
                    "Topup",
                ];
                _serde::Deserializer::deserialize_enum(
                    __deserializer,
                    "EventData",
                    VARIANTS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<EventData>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for EventData {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                match *self {
                    EventData::Charge(ref __field0) => {
                        _serde::Serializer::serialize_newtype_variant(
                            __serializer,
                            "EventData",
                            0u32,
                            "Charge",
                            __field0,
                        )
                    }
                    EventData::Customer(ref __field0) => {
                        _serde::Serializer::serialize_newtype_variant(
                            __serializer,
                            "EventData",
                            1u32,
                            "Customer",
                            __field0,
                        )
                    }
                    EventData::Invoice(ref __field0) => {
                        _serde::Serializer::serialize_newtype_variant(
                            __serializer,
                            "EventData",
                            2u32,
                            "Invoice",
                            __field0,
                        )
                    }
                    EventData::Invoiceitem(ref __field0) => {
                        _serde::Serializer::serialize_newtype_variant(
                            __serializer,
                            "EventData",
                            3u32,
                            "Invoiceitem",
                            __field0,
                        )
                    }
                    EventData::IssuingAuthorization(ref __field0) => {
                        _serde::Serializer::serialize_newtype_variant(
                            __serializer,
                            "EventData",
                            4u32,
                            "IssuingAuthorization",
                            __field0,
                        )
                    }
                    EventData::IssuingCard(ref __field0) => {
                        _serde::Serializer::serialize_newtype_variant(
                            __serializer,
                            "EventData",
                            5u32,
                            "IssuingCard",
                            __field0,
                        )
                    }
                    EventData::IssuingCardholder(ref __field0) => {
                        _serde::Serializer::serialize_newtype_variant(
                            __serializer,
                            "EventData",
                            6u32,
                            "IssuingCardholder",
                            __field0,
                        )
                    }
                    EventData::IssuingDispute(ref __field0) => {
                        _serde::Serializer::serialize_newtype_variant(
                            __serializer,
                            "EventData",
                            7u32,
                            "IssuingDispute",
                            __field0,
                        )
                    }
                    EventData::PaymentIntent(ref __field0) => {
                        _serde::Serializer::serialize_newtype_variant(
                            __serializer,
                            "EventData",
                            8u32,
                            "PaymentIntent",
                            __field0,
                        )
                    }
                    EventData::Payout(ref __field0) => {
                        _serde::Serializer::serialize_newtype_variant(
                            __serializer,
                            "EventData",
                            9u32,
                            "Payout",
                            __field0,
                        )
                    }
                    EventData::Source(ref __field0) => {
                        _serde::Serializer::serialize_newtype_variant(
                            __serializer,
                            "EventData",
                            10u32,
                            "Source",
                            __field0,
                        )
                    }
                    EventData::SubscriptionSchedule(ref __field0) => {
                        _serde::Serializer::serialize_newtype_variant(
                            __serializer,
                            "EventData",
                            11u32,
                            "SubscriptionSchedule",
                            __field0,
                        )
                    }
                    EventData::Topup(ref __field0) => {
                        _serde::Serializer::serialize_newtype_variant(
                            __serializer,
                            "EventData",
                            12u32,
                            "Topup",
                            __field0,
                        )
                    }
                }
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for EventData {
        #[inline]
        fn clone(&self) -> EventData {
            match self {
                EventData::Charge(__self_0) => {
                    EventData::Charge(::core::clone::Clone::clone(__self_0))
                }
                EventData::Customer(__self_0) => {
                    EventData::Customer(::core::clone::Clone::clone(__self_0))
                }
                EventData::Invoice(__self_0) => {
                    EventData::Invoice(::core::clone::Clone::clone(__self_0))
                }
                EventData::Invoiceitem(__self_0) => {
                    EventData::Invoiceitem(::core::clone::Clone::clone(__self_0))
                }
                EventData::IssuingAuthorization(__self_0) => {
                    EventData::IssuingAuthorization(
                        ::core::clone::Clone::clone(__self_0),
                    )
                }
                EventData::IssuingCard(__self_0) => {
                    EventData::IssuingCard(::core::clone::Clone::clone(__self_0))
                }
                EventData::IssuingCardholder(__self_0) => {
                    EventData::IssuingCardholder(::core::clone::Clone::clone(__self_0))
                }
                EventData::IssuingDispute(__self_0) => {
                    EventData::IssuingDispute(::core::clone::Clone::clone(__self_0))
                }
                EventData::PaymentIntent(__self_0) => {
                    EventData::PaymentIntent(::core::clone::Clone::clone(__self_0))
                }
                EventData::Payout(__self_0) => {
                    EventData::Payout(::core::clone::Clone::clone(__self_0))
                }
                EventData::Source(__self_0) => {
                    EventData::Source(::core::clone::Clone::clone(__self_0))
                }
                EventData::SubscriptionSchedule(__self_0) => {
                    EventData::SubscriptionSchedule(
                        ::core::clone::Clone::clone(__self_0),
                    )
                }
                EventData::Topup(__self_0) => {
                    EventData::Topup(::core::clone::Clone::clone(__self_0))
                }
            }
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for EventData {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for EventData {
        #[inline]
        fn eq(&self, other: &EventData) -> bool {
            let __self_discr = ::core::intrinsics::discriminant_value(self);
            let __arg1_discr = ::core::intrinsics::discriminant_value(other);
            __self_discr == __arg1_discr
                && match (self, other) {
                    (EventData::Charge(__self_0), EventData::Charge(__arg1_0)) => {
                        __self_0 == __arg1_0
                    }
                    (EventData::Customer(__self_0), EventData::Customer(__arg1_0)) => {
                        __self_0 == __arg1_0
                    }
                    (EventData::Invoice(__self_0), EventData::Invoice(__arg1_0)) => {
                        __self_0 == __arg1_0
                    }
                    (
                        EventData::Invoiceitem(__self_0),
                        EventData::Invoiceitem(__arg1_0),
                    ) => __self_0 == __arg1_0,
                    (
                        EventData::IssuingAuthorization(__self_0),
                        EventData::IssuingAuthorization(__arg1_0),
                    ) => __self_0 == __arg1_0,
                    (
                        EventData::IssuingCard(__self_0),
                        EventData::IssuingCard(__arg1_0),
                    ) => __self_0 == __arg1_0,
                    (
                        EventData::IssuingCardholder(__self_0),
                        EventData::IssuingCardholder(__arg1_0),
                    ) => __self_0 == __arg1_0,
                    (
                        EventData::IssuingDispute(__self_0),
                        EventData::IssuingDispute(__arg1_0),
                    ) => __self_0 == __arg1_0,
                    (
                        EventData::PaymentIntent(__self_0),
                        EventData::PaymentIntent(__arg1_0),
                    ) => __self_0 == __arg1_0,
                    (EventData::Payout(__self_0), EventData::Payout(__arg1_0)) => {
                        __self_0 == __arg1_0
                    }
                    (EventData::Source(__self_0), EventData::Source(__arg1_0)) => {
                        __self_0 == __arg1_0
                    }
                    (
                        EventData::SubscriptionSchedule(__self_0),
                        EventData::SubscriptionSchedule(__arg1_0),
                    ) => __self_0 == __arg1_0,
                    (EventData::Topup(__self_0), EventData::Topup(__arg1_0)) => {
                        __self_0 == __arg1_0
                    }
                    _ => unsafe { ::core::intrinsics::unreachable() }
                }
        }
    }
    impl ::core::fmt::Debug for EventData {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                EventData::Charge(e) => {
                    f.debug_tuple("EventData::Charge").field(e).finish()
                }
                EventData::Customer(e) => {
                    f.debug_tuple("EventData::Customer").field(e).finish()
                }
                EventData::Invoice(e) => {
                    f.debug_tuple("EventData::Invoice").field(e).finish()
                }
                EventData::Invoiceitem(e) => {
                    f.debug_tuple("EventData::Invoiceitem").field(e).finish()
                }
                EventData::IssuingAuthorization(e) => {
                    f.debug_tuple("EventData::IssuingAuthorization").field(e).finish()
                }
                EventData::IssuingCard(e) => {
                    f.debug_tuple("EventData::IssuingCard").field(e).finish()
                }
                EventData::IssuingCardholder(e) => {
                    f.debug_tuple("EventData::IssuingCardholder").field(e).finish()
                }
                EventData::IssuingDispute(e) => {
                    f.debug_tuple("EventData::IssuingDispute").field(e).finish()
                }
                EventData::PaymentIntent(e) => {
                    f.debug_tuple("EventData::PaymentIntent").field(e).finish()
                }
                EventData::Payout(e) => {
                    f.debug_tuple("EventData::Payout").field(e).finish()
                }
                EventData::Source(e) => {
                    f.debug_tuple("EventData::Source").field(e).finish()
                }
                EventData::SubscriptionSchedule(e) => {
                    f.debug_tuple("EventData::SubscriptionSchedule").field(e).finish()
                }
                EventData::Topup(e) => {
                    f.debug_tuple("EventData::Topup").field(e).finish()
                }
            }
        }
    }
    pub struct StripeEvent {
        pub api_version: Option<_rt::String>,
        pub created: i32,
        pub data: EventData,
        pub fluvio_version: _rt::String,
        pub id: _rt::String,
        pub livemode: bool,
        pub pending_webhooks: i32,
    }
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for StripeEvent {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            6u64 => _serde::__private::Ok(__Field::__field6),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "api_version" => _serde::__private::Ok(__Field::__field0),
                            "created" => _serde::__private::Ok(__Field::__field1),
                            "data" => _serde::__private::Ok(__Field::__field2),
                            "fluvio_version" => _serde::__private::Ok(__Field::__field3),
                            "id" => _serde::__private::Ok(__Field::__field4),
                            "livemode" => _serde::__private::Ok(__Field::__field5),
                            "pending_webhooks" => {
                                _serde::__private::Ok(__Field::__field6)
                            }
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"api_version" => _serde::__private::Ok(__Field::__field0),
                            b"created" => _serde::__private::Ok(__Field::__field1),
                            b"data" => _serde::__private::Ok(__Field::__field2),
                            b"fluvio_version" => _serde::__private::Ok(__Field::__field3),
                            b"id" => _serde::__private::Ok(__Field::__field4),
                            b"livemode" => _serde::__private::Ok(__Field::__field5),
                            b"pending_webhooks" => {
                                _serde::__private::Ok(__Field::__field6)
                            }
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                #[automatically_derived]
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<StripeEvent>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                #[automatically_derived]
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = StripeEvent;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct StripeEvent",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match _serde::de::SeqAccess::next_element::<
                            Option<_rt::String>,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct StripeEvent with 7 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match _serde::de::SeqAccess::next_element::<
                            i32,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct StripeEvent with 7 elements",
                                    ),
                                );
                            }
                        };
                        let __field2 = match _serde::de::SeqAccess::next_element::<
                            EventData,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        2usize,
                                        &"struct StripeEvent with 7 elements",
                                    ),
                                );
                            }
                        };
                        let __field3 = match _serde::de::SeqAccess::next_element::<
                            _rt::String,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        3usize,
                                        &"struct StripeEvent with 7 elements",
                                    ),
                                );
                            }
                        };
                        let __field4 = match _serde::de::SeqAccess::next_element::<
                            _rt::String,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        4usize,
                                        &"struct StripeEvent with 7 elements",
                                    ),
                                );
                            }
                        };
                        let __field5 = match _serde::de::SeqAccess::next_element::<
                            bool,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        5usize,
                                        &"struct StripeEvent with 7 elements",
                                    ),
                                );
                            }
                        };
                        let __field6 = match _serde::de::SeqAccess::next_element::<
                            i32,
                        >(&mut __seq)? {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        6usize,
                                        &"struct StripeEvent with 7 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(StripeEvent {
                            api_version: __field0,
                            created: __field1,
                            data: __field2,
                            fluvio_version: __field3,
                            id: __field4,
                            livemode: __field5,
                            pending_webhooks: __field6,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<
                            Option<_rt::String>,
                        > = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<i32> = _serde::__private::None;
                        let mut __field2: _serde::__private::Option<EventData> = _serde::__private::None;
                        let mut __field3: _serde::__private::Option<_rt::String> = _serde::__private::None;
                        let mut __field4: _serde::__private::Option<_rt::String> = _serde::__private::None;
                        let mut __field5: _serde::__private::Option<bool> = _serde::__private::None;
                        let mut __field6: _serde::__private::Option<i32> = _serde::__private::None;
                        while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                            __Field,
                        >(&mut __map)? {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "api_version",
                                            ),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            Option<_rt::String>,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "created",
                                            ),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                    );
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("data"),
                                        );
                                    }
                                    __field2 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<EventData>(&mut __map)?,
                                    );
                                }
                                __Field::__field3 => {
                                    if _serde::__private::Option::is_some(&__field3) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "fluvio_version",
                                            ),
                                        );
                                    }
                                    __field3 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            _rt::String,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field4 => {
                                    if _serde::__private::Option::is_some(&__field4) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                        );
                                    }
                                    __field4 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<
                                            _rt::String,
                                        >(&mut __map)?,
                                    );
                                }
                                __Field::__field5 => {
                                    if _serde::__private::Option::is_some(&__field5) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "livemode",
                                            ),
                                        );
                                    }
                                    __field5 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<bool>(&mut __map)?,
                                    );
                                }
                                __Field::__field6 => {
                                    if _serde::__private::Option::is_some(&__field6) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "pending_webhooks",
                                            ),
                                        );
                                    }
                                    __field6 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                    );
                                }
                                _ => {
                                    let _ = _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map)?;
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("api_version")?
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("created")?
                            }
                        };
                        let __field2 = match __field2 {
                            _serde::__private::Some(__field2) => __field2,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("data")?
                            }
                        };
                        let __field3 = match __field3 {
                            _serde::__private::Some(__field3) => __field3,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("fluvio_version")?
                            }
                        };
                        let __field4 = match __field4 {
                            _serde::__private::Some(__field4) => __field4,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("id")?
                            }
                        };
                        let __field5 = match __field5 {
                            _serde::__private::Some(__field5) => __field5,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("livemode")?
                            }
                        };
                        let __field6 = match __field6 {
                            _serde::__private::Some(__field6) => __field6,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("pending_webhooks")?
                            }
                        };
                        _serde::__private::Ok(StripeEvent {
                            api_version: __field0,
                            created: __field1,
                            data: __field2,
                            fluvio_version: __field3,
                            id: __field4,
                            livemode: __field5,
                            pending_webhooks: __field6,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &[
                    "api_version",
                    "created",
                    "data",
                    "fluvio_version",
                    "id",
                    "livemode",
                    "pending_webhooks",
                ];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "StripeEvent",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<StripeEvent>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[doc(hidden)]
    #[allow(
        non_upper_case_globals,
        unused_attributes,
        unused_qualifications,
        clippy::absolute_paths,
    )]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for StripeEvent {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = _serde::Serializer::serialize_struct(
                    __serializer,
                    "StripeEvent",
                    false as usize + 1 + 1 + 1 + 1 + 1 + 1 + 1,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "api_version",
                    &self.api_version,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "created",
                    &self.created,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "data",
                    &self.data,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "fluvio_version",
                    &self.fluvio_version,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "livemode",
                    &self.livemode,
                )?;
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "pending_webhooks",
                    &self.pending_webhooks,
                )?;
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for StripeEvent {
        #[inline]
        fn clone(&self) -> StripeEvent {
            StripeEvent {
                api_version: ::core::clone::Clone::clone(&self.api_version),
                created: ::core::clone::Clone::clone(&self.created),
                data: ::core::clone::Clone::clone(&self.data),
                fluvio_version: ::core::clone::Clone::clone(&self.fluvio_version),
                id: ::core::clone::Clone::clone(&self.id),
                livemode: ::core::clone::Clone::clone(&self.livemode),
                pending_webhooks: ::core::clone::Clone::clone(&self.pending_webhooks),
            }
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for StripeEvent {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for StripeEvent {
        #[inline]
        fn eq(&self, other: &StripeEvent) -> bool {
            self.api_version == other.api_version && self.created == other.created
                && self.data == other.data && self.fluvio_version == other.fluvio_version
                && self.id == other.id && self.livemode == other.livemode
                && self.pending_webhooks == other.pending_webhooks
        }
    }
    impl ::core::fmt::Debug for StripeEvent {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("StripeEvent")
                .field("api-version", &self.api_version)
                .field("created", &self.created)
                .field("data", &self.data)
                .field("fluvio-version", &self.fluvio_version)
                .field("id", &self.id)
                .field("livemode", &self.livemode)
                .field("pending-webhooks", &self.pending_webhooks)
                .finish()
        }
    }
    #[doc(hidden)]
    pub(crate) use __export_examples_stripe_slack_types_cabi;
}
