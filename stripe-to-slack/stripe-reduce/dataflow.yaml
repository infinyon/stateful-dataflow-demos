apiVersion: 0.6.0
meta:
  name: stripe-reduce
  version: 0.1.0
  namespace: examples

config:
  converter: raw
  consumer:
    default_starting_offset:
      value: 0
      position: End  

imports:
  - pkg: examples/jaq@0.0.1
    functions:
      - name: jaq-transform

topics:
  stripe-origin-events:
    schema:
      value:
        type: bytes

  stripe-events:
    schema:
      value:
        type: bytes

services:
  process-invoice:
    sources:
      - type: topic
        id: stripe-origin-events

    transforms:
      - operator: filter-map
        uses: jaq-transform
        with: 
          jaq-filter: | 
            if (
              .body.type == "invoice.created" or 
              .body.type == "invoice.deleted" or
              .body.type == "invoice.finalized" or
              .body.type == "invoice.finalization_failed" or
              .body.type == "invoice.marked_uncollectible" or
              .body.type == "invoice.payment_action_required" or
              .body.type == "invoice.payment_failed" or
              .body.type == "invoice.payment_succeeded" or
              .body.type == "invoice.paid" or
              .body.type == "invoice.sent" or
              .body.type == "invoice.upcoming" or
              .body.type == "invoice.updated" or 
              .body.type == "invoice.voided" or
              .body.type == "invoice.will_be_due"
            )
            then {
              fluvio_version: "0.1",
              api_version: .body.api_version,
              created: .body.created,
              id: .body.id,
              livemode: .body.livemode,
              pending_webhooks: .body.pending_webhooks,
              data: (
                {
                  account_country: .body.data.object.account_country,
                  account_name: .body.data.object.account_name,
                  amount_due: .body.data.object.amount_due,
                  amount_paid: .body.data.object.amount_paid,
                  amount_remaining: .body.data.object.amount_remaining,
                  amount_shipping: .body.data.object.amount_shipping,
                  attempt_count: .body.data.object.attempt_count,
                  attempted: .body.data.object.attempted,
                  billing_reason: .body.data.object.billing_reason,
                  collection_method: .body.data.object.collection_method,
                  created: .body.data.object.created,
                  currency: .body.data.object.currency,
                  customer: (
                    if (.body.data.object.customer | type) == "string" 
                    then .body.data.object.customer else "" end
                  ),
                  customer_email: .body.data.object.customer_email,
                  customer_name: .body.data.object.customer_name,
                  event_type: .body.type,
                  id: .body.data.object.id,
                  paid: .body.data.object.paid,
                  paid_out_of_band: .body.data.object.paid_out_of_band,
                  period_end: .body.data.object.period_end,
                  period_start: .body.data.object.period_start,
                  status: .body.data.object.status,
                  subtotal: .body.data.object.subtotal,
                  total: .body.data.object.total
                }
                +
                (
                  if .body.data.object.hosted_invoice_url then
                    { hosted_invoice_url: .body.data.object.hosted_invoice_url }
                  else
                    {}
                  end
                )
                +
                {
                  lines: (.body.data.object.lines.data | map({ description, amount, currency }))
                }
              )
            } 
            else null
            end

    sinks:
      - type: topic
        id: stripe-events

  process-customer:
    sources:
      - type: topic
        id: stripe-origin-events

    transforms:
      - operator: filter-map
        uses: jaq-transform
        with: 
          jaq-filter: | 
            if (
              .body.type == "customer.updated" or
              .body.type == "customer.bank_account.created" or
              .body.type == "customer.bank_account.deleted" or
              .body.type == "customer.bank_account.updated" or
              .body.type == "customer.card.created" or
              .body.type == "customer.card.deleted" or
              .body.type == "customer.card.updated" or
              .body.type == "customer.created" or
              .body.type == "customer.deleted" or
              .body.type == "customer.subscription.created" or
              .body.type == "customer.subscription.deleted" or
              .body.type == "customer.subscription.paused" or
              .body.type == "customer.subscription.pending_update_applied" or
              .body.type == "customer.subscription.pending_update_expired" or
              .body.type == "customer.subscription.resumed" or
              .body.type == "customer.subscription.trial_will_end" or
              .body.type == "customer.subscription.updated"
            )
            then {
              fluvio_version: "0.1",
              api_version: .body.api_version,
              created: .body.created,
              id: .body.id,
              livemode: .body.livemode,
              pending_webhooks: .body.pending_webhooks,
              data: (
                {
                  balance: .body.data.object.balance,
                  created: .body.data.object.created,
                  currency: .body.data.object.currency,
                  delinquent: .body.data.object.delinquent,
                  description: .body.data.object.description,
                  email: .body.data.object.email,
                  event_type: .body.type,
                  id: .body.data.object.id,
                  invoice_prefix: .body.data.object.invoice_prefix,
                  name: .body.data.object.name,
                  next_invoice_sequence: .body.data.object.next_invoice_sequence,
                  phone: .body.data.object.phone
                }
                +
                (
                  if .body.data.object.address then
                    {
                      address: {
                        city: .body.data.object.address.city,
                        country: .body.data.object.address.country,
                        line1: .body.data.object.address.line1,
                        line2: .body.data.object.address.line2,
                        "postal-code": .body.data.object.address["postal-code"],
                        state: .body.data.object.address.state
                      }
                    }
                  else
                    {}
                  end
                )
              )
            }
            else null
            end

    sinks:
      - type: topic
        id: stripe-events

dev:
  imports:
    - pkg: examples/jaq@0.0.1
      path: ../../packages/jaq